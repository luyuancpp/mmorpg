version: '3.8'

services:
  # Kafka服务
  kafka:
    image: apache/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=controller,broker
      - KAFKA_CLUSTER_ID=5L6g3nShT-eMCtK--X86sw
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${HOST_IP:-host.docker.internal}:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
    volumes:
      - kafka-data:/tmp/kafka-logs
    user: "root:root"  # Windows权限适配

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      - kafka

  # Redis服务
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --no-maint-notify
    volumes:
      - redis-data:/data
    restart: unless-stopped

  # MySQL服务
  mysql:
    image: mysql:latest
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root123
      - MYSQL_DATABASE=testdb
      - MYSQL_USER=appuser
      - MYSQL_PASSWORD=apppass123
      - MYSQL_INITDB_SKIP_TZINFO=1  # 避免Windows时区配置警告
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 新增Nacos服务（配置中心/注册中心）
  nacos:
    image: nacos/nacos-server:latest
    container_name: nacos
    ports:
      - "8848:8848"  # 服务端口
      - "9848:9848"  # 客户端grpc端口
      - "9849:9849"  # 服务端grpc端口
    environment:
      - MODE=standalone  # 单机模式（适合开发测试）
      - SPRING_DATASOURCE_PLATFORM=mysql  # 可选：结合MySQL持久化配置
      - MYSQL_SERVICE_HOST=mysql  # 连接上面的MySQL容器
      - MYSQL_SERVICE_PORT=3306
      - MYSQL_SERVICE_DB_NAME=nacos_db  # Nacos专用数据库
      - MYSQL_SERVICE_USER=root
      - MYSQL_SERVICE_PASSWORD=root123
      - MYSQL_DATABASE_NUM=1
    volumes:
      - nacos-data:/home/nacos/data
      - nacos-log:/home/nacos/logs
    depends_on:
      mysql:
        condition: service_healthy  # 等待MySQL健康后启动
    restart: unless-stopped

  # 新增Etcd服务（分布式键值存储）
  etcd:
    image: bitnami/etcd:latest  # 推荐bitnami镜像，配置简单
    container_name: etcd
    ports:
      - "2379:2379"  # 客户端通信端口
      - "2380:2380"  # 集群节点通信端口
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes  # 开发环境关闭认证（生产需开启）
      - ETCD_ADVERTISE_CLIENT_URLS=http://${HOST_IP:-host.docker.internal}:2379  # 客户端暴露地址
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379  # 监听客户端地址
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380  # 监听节点通信地址
    volumes:
      - etcd-data:/bitnami/etcd/data  # 持久化数据
    restart: unless-stopped

volumes:
  kafka-data:
  redis-data:
  mysql-data:
  nacos-data:  # Nacos数据持久化
  nacos-log:   # Nacos日志
  etcd-data:   # Etcd数据持久化