// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/playerlocator/playerlocator.proto
// Protobuf C++ Version: 5.29.0

#ifndef proto_2fplayerlocator_2fplayerlocator_2eproto_2epb_2eh
#define proto_2fplayerlocator_2fplayerlocator_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fplayerlocator_2fplayerlocator_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fplayerlocator_2fplayerlocator_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proto_2fplayerlocator_2fplayerlocator_2eproto;
namespace playerlocator {
class PlayerId;
struct PlayerIdDefaultTypeInternal;
extern PlayerIdDefaultTypeInternal _PlayerId_default_instance_;
class PlayerLocation;
struct PlayerLocationDefaultTypeInternal;
extern PlayerLocationDefaultTypeInternal _PlayerLocation_default_instance_;
}  // namespace playerlocator
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace playerlocator {

// ===================================================================


// -------------------------------------------------------------------

class PlayerLocation final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:playerlocator.PlayerLocation) */ {
 public:
  inline PlayerLocation() : PlayerLocation(nullptr) {}
  ~PlayerLocation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PlayerLocation* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PlayerLocation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerLocation(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayerLocation(const PlayerLocation& from) : PlayerLocation(nullptr, from) {}
  inline PlayerLocation(PlayerLocation&& from) noexcept
      : PlayerLocation(nullptr, std::move(from)) {}
  inline PlayerLocation& operator=(const PlayerLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerLocation& operator=(PlayerLocation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerLocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerLocation* internal_default_instance() {
    return reinterpret_cast<const PlayerLocation*>(
        &_PlayerLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PlayerLocation& a, PlayerLocation& b) { a.Swap(&b); }
  inline void Swap(PlayerLocation* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerLocation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerLocation* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PlayerLocation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerLocation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayerLocation& from) { PlayerLocation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PlayerLocation* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "playerlocator.PlayerLocation"; }

 protected:
  explicit PlayerLocation(::google::protobuf::Arena* arena);
  PlayerLocation(::google::protobuf::Arena* arena, const PlayerLocation& from);
  PlayerLocation(::google::protobuf::Arena* arena, PlayerLocation&& from) noexcept
      : PlayerLocation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServerIdFieldNumber = 2,
    kTokenFieldNumber = 6,
    kUidFieldNumber = 1,
    kOnlineFieldNumber = 3,
    kMigratingFieldNumber = 4,
    kSceneIdFieldNumber = 5,
    kTsFieldNumber = 7,
  };
  // string server_id = 2;
  void clear_server_id() ;
  const std::string& server_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_server_id(Arg_&& arg, Args_... args);
  std::string* mutable_server_id();
  PROTOBUF_NODISCARD std::string* release_server_id();
  void set_allocated_server_id(std::string* value);

  private:
  const std::string& _internal_server_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_id(
      const std::string& value);
  std::string* _internal_mutable_server_id();

  public:
  // string token = 6;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // int64 uid = 1;
  void clear_uid() ;
  ::int64_t uid() const;
  void set_uid(::int64_t value);

  private:
  ::int64_t _internal_uid() const;
  void _internal_set_uid(::int64_t value);

  public:
  // bool online = 3;
  void clear_online() ;
  bool online() const;
  void set_online(bool value);

  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);

  public:
  // bool migrating = 4;
  void clear_migrating() ;
  bool migrating() const;
  void set_migrating(bool value);

  private:
  bool _internal_migrating() const;
  void _internal_set_migrating(bool value);

  public:
  // int32 scene_id = 5;
  void clear_scene_id() ;
  ::int32_t scene_id() const;
  void set_scene_id(::int32_t value);

  private:
  ::int32_t _internal_scene_id() const;
  void _internal_set_scene_id(::int32_t value);

  public:
  // int64 ts = 7;
  void clear_ts() ;
  ::int64_t ts() const;
  void set_ts(::int64_t value);

  private:
  ::int64_t _internal_ts() const;
  void _internal_set_ts(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:playerlocator.PlayerLocation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlayerLocation& from_msg);
    ::google::protobuf::internal::ArenaStringPtr server_id_;
    ::google::protobuf::internal::ArenaStringPtr token_;
    ::int64_t uid_;
    bool online_;
    bool migrating_;
    ::int32_t scene_id_;
    ::int64_t ts_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fplayerlocator_2fplayerlocator_2eproto;
};
// -------------------------------------------------------------------

class PlayerId final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:playerlocator.PlayerId) */ {
 public:
  inline PlayerId() : PlayerId(nullptr) {}
  ~PlayerId() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PlayerId* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PlayerId));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerId(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayerId(const PlayerId& from) : PlayerId(nullptr, from) {}
  inline PlayerId(PlayerId&& from) noexcept
      : PlayerId(nullptr, std::move(from)) {}
  inline PlayerId& operator=(const PlayerId& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerId& operator=(PlayerId&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerId& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerId* internal_default_instance() {
    return reinterpret_cast<const PlayerId*>(
        &_PlayerId_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PlayerId& a, PlayerId& b) { a.Swap(&b); }
  inline void Swap(PlayerId* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerId* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerId* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PlayerId>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerId& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayerId& from) { PlayerId::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PlayerId* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "playerlocator.PlayerId"; }

 protected:
  explicit PlayerId(::google::protobuf::Arena* arena);
  PlayerId(::google::protobuf::Arena* arena, const PlayerId& from);
  PlayerId(::google::protobuf::Arena* arena, PlayerId&& from) noexcept
      : PlayerId(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUidFieldNumber = 1,
  };
  // int64 uid = 1;
  void clear_uid() ;
  ::int64_t uid() const;
  void set_uid(::int64_t value);

  private:
  ::int64_t _internal_uid() const;
  void _internal_set_uid(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:playerlocator.PlayerId)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlayerId& from_msg);
    ::int64_t uid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fplayerlocator_2fplayerlocator_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PlayerLocation

// int64 uid = 1;
inline void PlayerLocation::clear_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_ = ::int64_t{0};
}
inline ::int64_t PlayerLocation::uid() const {
  // @@protoc_insertion_point(field_get:playerlocator.PlayerLocation.uid)
  return _internal_uid();
}
inline void PlayerLocation::set_uid(::int64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:playerlocator.PlayerLocation.uid)
}
inline ::int64_t PlayerLocation::_internal_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uid_;
}
inline void PlayerLocation::_internal_set_uid(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_ = value;
}

// string server_id = 2;
inline void PlayerLocation::clear_server_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_.ClearToEmpty();
}
inline const std::string& PlayerLocation::server_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:playerlocator.PlayerLocation.server_id)
  return _internal_server_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerLocation::set_server_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:playerlocator.PlayerLocation.server_id)
}
inline std::string* PlayerLocation::mutable_server_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_server_id();
  // @@protoc_insertion_point(field_mutable:playerlocator.PlayerLocation.server_id)
  return _s;
}
inline const std::string& PlayerLocation::_internal_server_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_id_.Get();
}
inline void PlayerLocation::_internal_set_server_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_.Set(value, GetArena());
}
inline std::string* PlayerLocation::_internal_mutable_server_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.server_id_.Mutable( GetArena());
}
inline std::string* PlayerLocation::release_server_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:playerlocator.PlayerLocation.server_id)
  return _impl_.server_id_.Release();
}
inline void PlayerLocation::set_allocated_server_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.server_id_.IsDefault()) {
    _impl_.server_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:playerlocator.PlayerLocation.server_id)
}

// bool online = 3;
inline void PlayerLocation::clear_online() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.online_ = false;
}
inline bool PlayerLocation::online() const {
  // @@protoc_insertion_point(field_get:playerlocator.PlayerLocation.online)
  return _internal_online();
}
inline void PlayerLocation::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:playerlocator.PlayerLocation.online)
}
inline bool PlayerLocation::_internal_online() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.online_;
}
inline void PlayerLocation::_internal_set_online(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.online_ = value;
}

// bool migrating = 4;
inline void PlayerLocation::clear_migrating() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.migrating_ = false;
}
inline bool PlayerLocation::migrating() const {
  // @@protoc_insertion_point(field_get:playerlocator.PlayerLocation.migrating)
  return _internal_migrating();
}
inline void PlayerLocation::set_migrating(bool value) {
  _internal_set_migrating(value);
  // @@protoc_insertion_point(field_set:playerlocator.PlayerLocation.migrating)
}
inline bool PlayerLocation::_internal_migrating() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.migrating_;
}
inline void PlayerLocation::_internal_set_migrating(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.migrating_ = value;
}

// int32 scene_id = 5;
inline void PlayerLocation::clear_scene_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scene_id_ = 0;
}
inline ::int32_t PlayerLocation::scene_id() const {
  // @@protoc_insertion_point(field_get:playerlocator.PlayerLocation.scene_id)
  return _internal_scene_id();
}
inline void PlayerLocation::set_scene_id(::int32_t value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:playerlocator.PlayerLocation.scene_id)
}
inline ::int32_t PlayerLocation::_internal_scene_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scene_id_;
}
inline void PlayerLocation::_internal_set_scene_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scene_id_ = value;
}

// string token = 6;
inline void PlayerLocation::clear_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& PlayerLocation::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:playerlocator.PlayerLocation.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerLocation::set_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:playerlocator.PlayerLocation.token)
}
inline std::string* PlayerLocation::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:playerlocator.PlayerLocation.token)
  return _s;
}
inline const std::string& PlayerLocation::_internal_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_.Get();
}
inline void PlayerLocation::_internal_set_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(value, GetArena());
}
inline std::string* PlayerLocation::_internal_mutable_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* PlayerLocation::release_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:playerlocator.PlayerLocation.token)
  return _impl_.token_.Release();
}
inline void PlayerLocation::set_allocated_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:playerlocator.PlayerLocation.token)
}

// int64 ts = 7;
inline void PlayerLocation::clear_ts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ts_ = ::int64_t{0};
}
inline ::int64_t PlayerLocation::ts() const {
  // @@protoc_insertion_point(field_get:playerlocator.PlayerLocation.ts)
  return _internal_ts();
}
inline void PlayerLocation::set_ts(::int64_t value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:playerlocator.PlayerLocation.ts)
}
inline ::int64_t PlayerLocation::_internal_ts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ts_;
}
inline void PlayerLocation::_internal_set_ts(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ts_ = value;
}

// -------------------------------------------------------------------

// PlayerId

// int64 uid = 1;
inline void PlayerId::clear_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_ = ::int64_t{0};
}
inline ::int64_t PlayerId::uid() const {
  // @@protoc_insertion_point(field_get:playerlocator.PlayerId.uid)
  return _internal_uid();
}
inline void PlayerId::set_uid(::int64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:playerlocator.PlayerId.uid)
}
inline ::int64_t PlayerId::_internal_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uid_;
}
inline void PlayerId::_internal_set_uid(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uid_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace playerlocator


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // proto_2fplayerlocator_2fplayerlocator_2eproto_2epb_2eh
