#include "common/common_message.pb.h"
#include <sol/sol.hpp>
#include "thread_local/storage_lua.h"
void Pb2sol2common_message()
{
tls_lua_state.new_usertype<RouteNodeInfo>("RouteNodeInfo",
"node_info",
[](RouteNodeInfo& pb) ->decltype(auto){ return pb.node_info();},
"mutable_node_info",
[](RouteNodeInfo& pb) ->decltype(auto){ return pb.mutable_node_info();},
"message_id",
sol::property(&RouteNodeInfo::message_id, &RouteNodeInfo::set_message_id),
"DebugString",
&RouteNodeInfo::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<MessageBody>("MessageBody",
"body",
[](MessageBody& pb) ->decltype(auto){ return pb.body();},
"mutable_body",
[](MessageBody& pb) ->decltype(auto){ return pb.mutable_body();},
"message_id",
sol::property(&MessageBody::message_id, &MessageBody::set_message_id),
"DebugString",
&MessageBody::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<NodeMessageHead>("NodeMessageHead",
"node_id",
sol::property(&NodeMessageHead::node_id, &NodeMessageHead::set_node_id),
"session_id",
sol::property(&NodeMessageHead::session_id, &NodeMessageHead::set_session_id),
"DebugString",
&NodeMessageHead::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<NodeRouteMessageRequest>("NodeRouteMessageRequest",
"body",
[](NodeRouteMessageRequest& pb) ->decltype(auto){ return pb.body();},
"mutable_body",
[](NodeRouteMessageRequest& pb) ->decltype(auto){ return pb.mutable_body();},
"head",
[](NodeRouteMessageRequest& pb) ->decltype(auto){ return pb.head();},
"mutable_head",
[](NodeRouteMessageRequest& pb) ->decltype(auto){ return pb.mutable_head();},
"DebugString",
&NodeRouteMessageRequest::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<NodeRouteMessageResponse>("NodeRouteMessageResponse",
"body",
[](NodeRouteMessageResponse& pb) ->decltype(auto){ return pb.body();},
"mutable_body",
[](NodeRouteMessageResponse& pb) ->decltype(auto){ return pb.mutable_body();},
"head",
[](NodeRouteMessageResponse& pb) ->decltype(auto){ return pb.head();},
"mutable_head",
[](NodeRouteMessageResponse& pb) ->decltype(auto){ return pb.mutable_head();},
"DebugString",
&NodeRouteMessageResponse::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<PlayerMessageExtern>("PlayerMessageExtern",
"player_id",
sol::property(&PlayerMessageExtern::player_id, &PlayerMessageExtern::set_player_id),
"DebugString",
&PlayerMessageExtern::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<PlayerNodeServiceRequest>("PlayerNodeServiceRequest",
"body",
[](PlayerNodeServiceRequest& pb) ->decltype(auto){ return pb.body();},
"mutable_body",
[](PlayerNodeServiceRequest& pb) ->decltype(auto){ return pb.mutable_body();},
"head",
[](PlayerNodeServiceRequest& pb) ->decltype(auto){ return pb.head();},
"mutable_head",
[](PlayerNodeServiceRequest& pb) ->decltype(auto){ return pb.mutable_head();},
"DebugString",
&PlayerNodeServiceRequest::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<PlayerMessageResponse>("PlayerMessageResponse",
"body",
[](PlayerMessageResponse& pb) ->decltype(auto){ return pb.body();},
"mutable_body",
[](PlayerMessageResponse& pb) ->decltype(auto){ return pb.mutable_body();},
"head",
[](PlayerMessageResponse& pb) ->decltype(auto){ return pb.head();},
"mutable_head",
[](PlayerMessageResponse& pb) ->decltype(auto){ return pb.mutable_head();},
"DebugString",
&PlayerMessageResponse::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<NodeRouteMessageBody>("NodeRouteMessageBody",
"node_info",
[](NodeRouteMessageBody& pb) ->decltype(auto){ return pb.node_info();},
"mutable_node_info",
[](NodeRouteMessageBody& pb) ->decltype(auto){ return pb.mutable_node_info();},
"DebugString",
&NodeRouteMessageBody::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<RegisterGameNodeSessionRequest>("RegisterGameNodeSessionRequest",
"session_info",
[](RegisterGameNodeSessionRequest& pb) ->decltype(auto){ return pb.session_info();},
"mutable_session_info",
[](RegisterGameNodeSessionRequest& pb) ->decltype(auto){ return pb.mutable_session_info();},
"game_node_id",
sol::property(&RegisterGameNodeSessionRequest::game_node_id, &RegisterGameNodeSessionRequest::set_game_node_id),
"DebugString",
&RegisterGameNodeSessionRequest::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<RegisterGameNodeSessionResponse>("RegisterGameNodeSessionResponse",
"session_info",
[](RegisterGameNodeSessionResponse& pb) ->decltype(auto){ return pb.session_info();},
"mutable_session_info",
[](RegisterGameNodeSessionResponse& pb) ->decltype(auto){ return pb.mutable_session_info();},
"DebugString",
&RegisterGameNodeSessionResponse::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<RegisterSessionGateNodeResponse>("RegisterSessionGateNodeResponse",
"session_info",
[](RegisterSessionGateNodeResponse& pb) ->decltype(auto){ return pb.session_info();},
"mutable_session_info",
[](RegisterSessionGateNodeResponse& pb) ->decltype(auto){ return pb.mutable_session_info();},
"DebugString",
&RegisterSessionGateNodeResponse::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<RegisterCentreSessionNodeRequest>("RegisterCentreSessionNodeRequest",
"session_info",
[](RegisterCentreSessionNodeRequest& pb) ->decltype(auto){ return pb.session_info();},
"mutable_session_info",
[](RegisterCentreSessionNodeRequest& pb) ->decltype(auto){ return pb.mutable_session_info();},
"centre_node_id",
sol::property(&RegisterCentreSessionNodeRequest::centre_node_id, &RegisterCentreSessionNodeRequest::set_centre_node_id),
"DebugString",
&RegisterCentreSessionNodeRequest::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<RegisterSessionCentreNodeResponse>("RegisterSessionCentreNodeResponse",
"session_info",
[](RegisterSessionCentreNodeResponse& pb) ->decltype(auto){ return pb.session_info();},
"mutable_session_info",
[](RegisterSessionCentreNodeResponse& pb) ->decltype(auto){ return pb.mutable_session_info();},
"DebugString",
&RegisterSessionCentreNodeResponse::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<GateSessionDisconnectRequest>("GateSessionDisconnectRequest",
"session_info",
[](GateSessionDisconnectRequest& pb) ->decltype(auto){ return pb.session_info();},
"mutable_session_info",
[](GateSessionDisconnectRequest& pb) ->decltype(auto){ return pb.mutable_session_info();},
"DebugString",
&GateSessionDisconnectRequest::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<RouteMsgStringRequest>("RouteMsgStringRequest",
"body",
[](RouteMsgStringRequest& pb) ->decltype(auto){ return pb.body();},
"mutable_body",
[](RouteMsgStringRequest& pb) ->decltype(auto){ return pb.mutable_body();},
"add_route_data_list",
&RouteMsgStringRequest::add_route_data_list,
"route_data_list",
[](const RouteMsgStringRequest& pb, int index) ->decltype(auto){ return pb.route_data_list(index);},
"mutable_route_data_list",
[](RouteMsgStringRequest& pb, int index) ->decltype(auto){ return pb.mutable_route_data_list(index);},
"route_data_list_size",
&RouteMsgStringRequest::route_data_list_size,
"clear_route_data_list",
&RouteMsgStringRequest::clear_route_data_list,
"session_id",
sol::property(&RouteMsgStringRequest::session_id, &RouteMsgStringRequest::set_session_id),
"id",
sol::property(&RouteMsgStringRequest::id, &RouteMsgStringRequest::set_id),
"is_client",
sol::property(&RouteMsgStringRequest::is_client, &RouteMsgStringRequest::set_is_client),
"DebugString",
&RouteMsgStringRequest::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<RouteMsgStringResponse>("RouteMsgStringResponse",
"body",
[](RouteMsgStringResponse& pb) ->decltype(auto){ return pb.body();},
"mutable_body",
[](RouteMsgStringResponse& pb) ->decltype(auto){ return pb.mutable_body();},
"add_route_data_list",
&RouteMsgStringResponse::add_route_data_list,
"route_data_list",
[](const RouteMsgStringResponse& pb, int index) ->decltype(auto){ return pb.route_data_list(index);},
"mutable_route_data_list",
[](RouteMsgStringResponse& pb, int index) ->decltype(auto){ return pb.mutable_route_data_list(index);},
"route_data_list_size",
&RouteMsgStringResponse::route_data_list_size,
"clear_route_data_list",
&RouteMsgStringResponse::clear_route_data_list,
"session_id",
sol::property(&RouteMsgStringResponse::session_id, &RouteMsgStringResponse::set_session_id),
"id",
sol::property(&RouteMsgStringResponse::id, &RouteMsgStringResponse::set_id),
"is_client",
sol::property(&RouteMsgStringResponse::is_client, &RouteMsgStringResponse::set_is_client),
"DebugString",
&RouteMsgStringResponse::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<RoutePlayerMsgStringRequest>("RoutePlayerMsgStringRequest",
"body",
[](RoutePlayerMsgStringRequest& pb) ->decltype(auto){ return pb.body();},
"mutable_body",
[](RoutePlayerMsgStringRequest& pb) ->decltype(auto){ return pb.mutable_body();},
"add_node_list",
&RoutePlayerMsgStringRequest::add_node_list,
"node_list",
[](const RoutePlayerMsgStringRequest& pb, int index) ->decltype(auto){ return pb.node_list(index);},
"mutable_node_list",
[](RoutePlayerMsgStringRequest& pb, int index) ->decltype(auto){ return pb.mutable_node_list(index);},
"node_list_size",
&RoutePlayerMsgStringRequest::node_list_size,
"clear_node_list",
&RoutePlayerMsgStringRequest::clear_node_list,
"player_ex",
[](RoutePlayerMsgStringRequest& pb) ->decltype(auto){ return pb.player_ex();},
"mutable_player_ex",
[](RoutePlayerMsgStringRequest& pb) ->decltype(auto){ return pb.mutable_player_ex();},
"DebugString",
&RoutePlayerMsgStringRequest::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<RoutePlayerMsgStringResponse>("RoutePlayerMsgStringResponse",
"body",
[](RoutePlayerMsgStringResponse& pb) ->decltype(auto){ return pb.body();},
"mutable_body",
[](RoutePlayerMsgStringResponse& pb) ->decltype(auto){ return pb.mutable_body();},
"add_node_list",
&RoutePlayerMsgStringResponse::add_node_list,
"node_list",
[](const RoutePlayerMsgStringResponse& pb, int index) ->decltype(auto){ return pb.node_list(index);},
"mutable_node_list",
[](RoutePlayerMsgStringResponse& pb, int index) ->decltype(auto){ return pb.mutable_node_list(index);},
"node_list_size",
&RoutePlayerMsgStringResponse::node_list_size,
"clear_node_list",
&RoutePlayerMsgStringResponse::clear_node_list,
"player_ex",
[](RoutePlayerMsgStringResponse& pb) ->decltype(auto){ return pb.player_ex();},
"mutable_player_ex",
[](RoutePlayerMsgStringResponse& pb) ->decltype(auto){ return pb.mutable_player_ex();},
"DebugString",
&RoutePlayerMsgStringResponse::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<RegisterGameNodeRequest>("RegisterGameNodeRequest",
"rpc_client",
[](RegisterGameNodeRequest& pb) ->decltype(auto){ return pb.rpc_client();},
"mutable_rpc_client",
[](RegisterGameNodeRequest& pb) ->decltype(auto){ return pb.mutable_rpc_client();},
"rpc_server",
[](RegisterGameNodeRequest& pb) ->decltype(auto){ return pb.rpc_server();},
"mutable_rpc_server",
[](RegisterGameNodeRequest& pb) ->decltype(auto){ return pb.mutable_rpc_server();},
"game_node_id",
sol::property(&RegisterGameNodeRequest::game_node_id, &RegisterGameNodeRequest::set_game_node_id),
"server_type",
sol::property(&RegisterGameNodeRequest::server_type, &RegisterGameNodeRequest::set_server_type),
"DebugString",
&RegisterGameNodeRequest::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<RegisterGateNodeRequest>("RegisterGateNodeRequest",
"rpc_client",
[](RegisterGateNodeRequest& pb) ->decltype(auto){ return pb.rpc_client();},
"mutable_rpc_client",
[](RegisterGateNodeRequest& pb) ->decltype(auto){ return pb.mutable_rpc_client();},
"gate_node_id",
sol::property(&RegisterGateNodeRequest::gate_node_id, &RegisterGateNodeRequest::set_gate_node_id),
"DebugString",
&RegisterGateNodeRequest::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<UnRegisterGameNodeRequest>("UnRegisterGameNodeRequest",
"game_node_id",
sol::property(&UnRegisterGameNodeRequest::game_node_id, &UnRegisterGameNodeRequest::set_game_node_id),
"DebugString",
&UnRegisterGameNodeRequest::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

}
