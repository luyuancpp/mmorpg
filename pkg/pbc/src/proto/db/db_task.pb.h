// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/db/db_task.proto
// Protobuf C++ Version: 5.29.0

#ifndef proto_2fdb_2fdb_5ftask_2eproto_2epb_2eh
#define proto_2fdb_2fdb_5ftask_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fdb_2fdb_5ftask_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fdb_2fdb_5ftask_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proto_2fdb_2fdb_5ftask_2eproto;
namespace taskpb {
class DBTask;
struct DBTaskDefaultTypeInternal;
extern DBTaskDefaultTypeInternal _DBTask_default_instance_;
}  // namespace taskpb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace taskpb {

// ===================================================================


// -------------------------------------------------------------------

class DBTask final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:taskpb.DBTask) */ {
 public:
  inline DBTask() : DBTask(nullptr) {}
  ~DBTask() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DBTask* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DBTask));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DBTask(
      ::google::protobuf::internal::ConstantInitialized);

  inline DBTask(const DBTask& from) : DBTask(nullptr, from) {}
  inline DBTask(DBTask&& from) noexcept
      : DBTask(nullptr, std::move(from)) {}
  inline DBTask& operator=(const DBTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBTask& operator=(DBTask&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBTask* internal_default_instance() {
    return reinterpret_cast<const DBTask*>(
        &_DBTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(DBTask& a, DBTask& b) { a.Swap(&b); }
  inline void Swap(DBTask* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBTask* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBTask* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DBTask>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DBTask& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DBTask& from) { DBTask::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DBTask* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "taskpb.DBTask"; }

 protected:
  explicit DBTask(::google::protobuf::Arena* arena);
  DBTask(::google::protobuf::Arena* arena, const DBTask& from);
  DBTask(::google::protobuf::Arena* arena, DBTask&& from) noexcept
      : DBTask(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWhereCaseFieldNumber = 2,
    kOpFieldNumber = 3,
    kMsgTypeFieldNumber = 4,
    kBodyFieldNumber = 5,
    kTaskIdFieldNumber = 6,
    kKeyFieldNumber = 1,
  };
  // string where_case = 2;
  void clear_where_case() ;
  const std::string& where_case() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_where_case(Arg_&& arg, Args_... args);
  std::string* mutable_where_case();
  PROTOBUF_NODISCARD std::string* release_where_case();
  void set_allocated_where_case(std::string* value);

  private:
  const std::string& _internal_where_case() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_where_case(
      const std::string& value);
  std::string* _internal_mutable_where_case();

  public:
  // string op = 3;
  void clear_op() ;
  const std::string& op() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_op(Arg_&& arg, Args_... args);
  std::string* mutable_op();
  PROTOBUF_NODISCARD std::string* release_op();
  void set_allocated_op(std::string* value);

  private:
  const std::string& _internal_op() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_op(
      const std::string& value);
  std::string* _internal_mutable_op();

  public:
  // string msg_type = 4;
  void clear_msg_type() ;
  const std::string& msg_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg_type(Arg_&& arg, Args_... args);
  std::string* mutable_msg_type();
  PROTOBUF_NODISCARD std::string* release_msg_type();
  void set_allocated_msg_type(std::string* value);

  private:
  const std::string& _internal_msg_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_type(
      const std::string& value);
  std::string* _internal_mutable_msg_type();

  public:
  // bytes body = 5;
  void clear_body() ;
  const std::string& body() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_body(Arg_&& arg, Args_... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* value);

  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(
      const std::string& value);
  std::string* _internal_mutable_body();

  public:
  // string task_id = 6;
  void clear_task_id() ;
  const std::string& task_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_task_id(Arg_&& arg, Args_... args);
  std::string* mutable_task_id();
  PROTOBUF_NODISCARD std::string* release_task_id();
  void set_allocated_task_id(std::string* value);

  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(
      const std::string& value);
  std::string* _internal_mutable_task_id();

  public:
  // uint64 key = 1;
  void clear_key() ;
  ::uint64_t key() const;
  void set_key(::uint64_t value);

  private:
  ::uint64_t _internal_key() const;
  void _internal_set_key(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:taskpb.DBTask)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DBTask& from_msg);
    ::google::protobuf::internal::ArenaStringPtr where_case_;
    ::google::protobuf::internal::ArenaStringPtr op_;
    ::google::protobuf::internal::ArenaStringPtr msg_type_;
    ::google::protobuf::internal::ArenaStringPtr body_;
    ::google::protobuf::internal::ArenaStringPtr task_id_;
    ::uint64_t key_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fdb_2fdb_5ftask_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DBTask

// uint64 key = 1;
inline void DBTask::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_ = ::uint64_t{0u};
}
inline ::uint64_t DBTask::key() const {
  // @@protoc_insertion_point(field_get:taskpb.DBTask.key)
  return _internal_key();
}
inline void DBTask::set_key(::uint64_t value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:taskpb.DBTask.key)
}
inline ::uint64_t DBTask::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_;
}
inline void DBTask::_internal_set_key(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_ = value;
}

// string where_case = 2;
inline void DBTask::clear_where_case() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.where_case_.ClearToEmpty();
}
inline const std::string& DBTask::where_case() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:taskpb.DBTask.where_case)
  return _internal_where_case();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DBTask::set_where_case(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.where_case_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:taskpb.DBTask.where_case)
}
inline std::string* DBTask::mutable_where_case() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_where_case();
  // @@protoc_insertion_point(field_mutable:taskpb.DBTask.where_case)
  return _s;
}
inline const std::string& DBTask::_internal_where_case() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.where_case_.Get();
}
inline void DBTask::_internal_set_where_case(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.where_case_.Set(value, GetArena());
}
inline std::string* DBTask::_internal_mutable_where_case() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.where_case_.Mutable( GetArena());
}
inline std::string* DBTask::release_where_case() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:taskpb.DBTask.where_case)
  return _impl_.where_case_.Release();
}
inline void DBTask::set_allocated_where_case(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.where_case_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.where_case_.IsDefault()) {
    _impl_.where_case_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:taskpb.DBTask.where_case)
}

// string op = 3;
inline void DBTask::clear_op() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_.ClearToEmpty();
}
inline const std::string& DBTask::op() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:taskpb.DBTask.op)
  return _internal_op();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DBTask::set_op(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:taskpb.DBTask.op)
}
inline std::string* DBTask::mutable_op() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_op();
  // @@protoc_insertion_point(field_mutable:taskpb.DBTask.op)
  return _s;
}
inline const std::string& DBTask::_internal_op() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.op_.Get();
}
inline void DBTask::_internal_set_op(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_.Set(value, GetArena());
}
inline std::string* DBTask::_internal_mutable_op() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.op_.Mutable( GetArena());
}
inline std::string* DBTask::release_op() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:taskpb.DBTask.op)
  return _impl_.op_.Release();
}
inline void DBTask::set_allocated_op(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.op_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.op_.IsDefault()) {
    _impl_.op_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:taskpb.DBTask.op)
}

// string msg_type = 4;
inline void DBTask::clear_msg_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_type_.ClearToEmpty();
}
inline const std::string& DBTask::msg_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:taskpb.DBTask.msg_type)
  return _internal_msg_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DBTask::set_msg_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:taskpb.DBTask.msg_type)
}
inline std::string* DBTask::mutable_msg_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_msg_type();
  // @@protoc_insertion_point(field_mutable:taskpb.DBTask.msg_type)
  return _s;
}
inline const std::string& DBTask::_internal_msg_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.msg_type_.Get();
}
inline void DBTask::_internal_set_msg_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_type_.Set(value, GetArena());
}
inline std::string* DBTask::_internal_mutable_msg_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.msg_type_.Mutable( GetArena());
}
inline std::string* DBTask::release_msg_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:taskpb.DBTask.msg_type)
  return _impl_.msg_type_.Release();
}
inline void DBTask::set_allocated_msg_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.msg_type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.msg_type_.IsDefault()) {
    _impl_.msg_type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:taskpb.DBTask.msg_type)
}

// bytes body = 5;
inline void DBTask::clear_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_.ClearToEmpty();
}
inline const std::string& DBTask::body() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:taskpb.DBTask.body)
  return _internal_body();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DBTask::set_body(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:taskpb.DBTask.body)
}
inline std::string* DBTask::mutable_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:taskpb.DBTask.body)
  return _s;
}
inline const std::string& DBTask::_internal_body() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.body_.Get();
}
inline void DBTask::_internal_set_body(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_.Set(value, GetArena());
}
inline std::string* DBTask::_internal_mutable_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.body_.Mutable( GetArena());
}
inline std::string* DBTask::release_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:taskpb.DBTask.body)
  return _impl_.body_.Release();
}
inline void DBTask::set_allocated_body(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.body_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:taskpb.DBTask.body)
}

// string task_id = 6;
inline void DBTask::clear_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.ClearToEmpty();
}
inline const std::string& DBTask::task_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:taskpb.DBTask.task_id)
  return _internal_task_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DBTask::set_task_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:taskpb.DBTask.task_id)
}
inline std::string* DBTask::mutable_task_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_task_id();
  // @@protoc_insertion_point(field_mutable:taskpb.DBTask.task_id)
  return _s;
}
inline const std::string& DBTask::_internal_task_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.task_id_.Get();
}
inline void DBTask::_internal_set_task_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.Set(value, GetArena());
}
inline std::string* DBTask::_internal_mutable_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.task_id_.Mutable( GetArena());
}
inline std::string* DBTask::release_task_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:taskpb.DBTask.task_id)
  return _impl_.task_id_.Release();
}
inline void DBTask::set_allocated_task_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.task_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.task_id_.IsDefault()) {
    _impl_.task_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:taskpb.DBTask.task_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace taskpb


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // proto_2fdb_2fdb_5ftask_2eproto_2epb_2eh
