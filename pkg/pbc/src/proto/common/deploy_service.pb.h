// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/common/deploy_service.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fcommon_2fdeploy_5fservice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fcommon_2fdeploy_5fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "proto/common/db_base.pb.h"
#include "proto/common/common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fcommon_2fdeploy_5fservice_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fcommon_2fdeploy_5fservice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proto_2fcommon_2fdeploy_5fservice_2eproto;
class GetGameNodeInfoRequest;
struct GetGameNodeInfoRequestDefaultTypeInternal;
extern GetGameNodeInfoRequestDefaultTypeInternal _GetGameNodeInfoRequest_default_instance_;
class GetGameNodeInfoResponse;
struct GetGameNodeInfoResponseDefaultTypeInternal;
extern GetGameNodeInfoResponseDefaultTypeInternal _GetGameNodeInfoResponse_default_instance_;
class NewGameNodeRequest;
struct NewGameNodeRequestDefaultTypeInternal;
extern NewGameNodeRequestDefaultTypeInternal _NewGameNodeRequest_default_instance_;
class NewGameNodeResponse;
struct NewGameNodeResponseDefaultTypeInternal;
extern NewGameNodeResponseDefaultTypeInternal _NewGameNodeResponse_default_instance_;
class NodeInfoRequest;
struct NodeInfoRequestDefaultTypeInternal;
extern NodeInfoRequestDefaultTypeInternal _NodeInfoRequest_default_instance_;
class NodeInfoResponse;
struct NodeInfoResponseDefaultTypeInternal;
extern NodeInfoResponseDefaultTypeInternal _NodeInfoResponse_default_instance_;
class centre_node_db;
struct centre_node_dbDefaultTypeInternal;
extern centre_node_dbDefaultTypeInternal _centre_node_db_default_instance_;
class centre_node_list_db;
struct centre_node_list_dbDefaultTypeInternal;
extern centre_node_list_dbDefaultTypeInternal _centre_node_list_db_default_instance_;
class database_node_db;
struct database_node_dbDefaultTypeInternal;
extern database_node_dbDefaultTypeInternal _database_node_db_default_instance_;
class game_node_db;
struct game_node_dbDefaultTypeInternal;
extern game_node_dbDefaultTypeInternal _game_node_db_default_instance_;
class game_node_list_db;
struct game_node_list_dbDefaultTypeInternal;
extern game_node_list_dbDefaultTypeInternal _game_node_list_db_default_instance_;
class gate_node_db;
struct gate_node_dbDefaultTypeInternal;
extern gate_node_dbDefaultTypeInternal _gate_node_db_default_instance_;
class gate_node_list_db;
struct gate_node_list_dbDefaultTypeInternal;
extern gate_node_list_dbDefaultTypeInternal _gate_node_list_db_default_instance_;
class lobby_node_db;
struct lobby_node_dbDefaultTypeInternal;
extern lobby_node_dbDefaultTypeInternal _lobby_node_db_default_instance_;
class login_node_db;
struct login_node_dbDefaultTypeInternal;
extern login_node_dbDefaultTypeInternal _login_node_db_default_instance_;
class login_node_list_db;
struct login_node_list_dbDefaultTypeInternal;
extern login_node_list_dbDefaultTypeInternal _login_node_list_db_default_instance_;
class nodes_info_data;
struct nodes_info_dataDefaultTypeInternal;
extern nodes_info_dataDefaultTypeInternal _nodes_info_data_default_instance_;
class redis_node_db;
struct redis_node_dbDefaultTypeInternal;
extern redis_node_dbDefaultTypeInternal _redis_node_db_default_instance_;
class redis_node_list_db;
struct redis_node_list_dbDefaultTypeInternal;
extern redis_node_list_dbDefaultTypeInternal _redis_node_list_db_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class redis_node_db final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:redis_node_db) */ {
 public:
  inline redis_node_db() : redis_node_db(nullptr) {}
  ~redis_node_db() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR redis_node_db(
      ::google::protobuf::internal::ConstantInitialized);

  inline redis_node_db(const redis_node_db& from) : redis_node_db(nullptr, from) {}
  inline redis_node_db(redis_node_db&& from) noexcept
      : redis_node_db(nullptr, std::move(from)) {}
  inline redis_node_db& operator=(const redis_node_db& from) {
    CopyFrom(from);
    return *this;
  }
  inline redis_node_db& operator=(redis_node_db&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const redis_node_db& default_instance() {
    return *internal_default_instance();
  }
  static inline const redis_node_db* internal_default_instance() {
    return reinterpret_cast<const redis_node_db*>(
        &_redis_node_db_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(redis_node_db& a, redis_node_db& b) { a.Swap(&b); }
  inline void Swap(redis_node_db* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(redis_node_db* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  redis_node_db* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<redis_node_db>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const redis_node_db& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const redis_node_db& from) { redis_node_db::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(redis_node_db* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "redis_node_db"; }

 protected:
  explicit redis_node_db(::google::protobuf::Arena* arena);
  redis_node_db(::google::protobuf::Arena* arena, const redis_node_db& from);
  redis_node_db(::google::protobuf::Arena* arena, redis_node_db&& from) noexcept
      : redis_node_db(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIpFieldNumber = 2,
    kIdFieldNumber = 1,
    kPortFieldNumber = 3,
    kZoneIdFieldNumber = 4,
  };
  // string ip = 2;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* value);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // uint32 port = 3;
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // uint32 zone_id = 4;
  void clear_zone_id() ;
  ::uint32_t zone_id() const;
  void set_zone_id(::uint32_t value);

  private:
  ::uint32_t _internal_zone_id() const;
  void _internal_set_zone_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:redis_node_db)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      24, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::uint32_t id_;
    ::uint32_t port_;
    ::uint32_t zone_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fdeploy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class login_node_db final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:login_node_db) */ {
 public:
  inline login_node_db() : login_node_db(nullptr) {}
  ~login_node_db() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR login_node_db(
      ::google::protobuf::internal::ConstantInitialized);

  inline login_node_db(const login_node_db& from) : login_node_db(nullptr, from) {}
  inline login_node_db(login_node_db&& from) noexcept
      : login_node_db(nullptr, std::move(from)) {}
  inline login_node_db& operator=(const login_node_db& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_node_db& operator=(login_node_db&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const login_node_db& default_instance() {
    return *internal_default_instance();
  }
  static inline const login_node_db* internal_default_instance() {
    return reinterpret_cast<const login_node_db*>(
        &_login_node_db_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(login_node_db& a, login_node_db& b) { a.Swap(&b); }
  inline void Swap(login_node_db* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_node_db* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  login_node_db* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<login_node_db>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const login_node_db& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const login_node_db& from) { login_node_db::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(login_node_db* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "login_node_db"; }

 protected:
  explicit login_node_db(::google::protobuf::Arena* arena);
  login_node_db(::google::protobuf::Arena* arena, const login_node_db& from);
  login_node_db(::google::protobuf::Arena* arena, login_node_db&& from) noexcept
      : login_node_db(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddrFieldNumber = 2,
    kIdFieldNumber = 1,
    kZoneIdFieldNumber = 3,
  };
  // string addr = 2;
  void clear_addr() ;
  const std::string& addr() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_addr(Arg_&& arg, Args_... args);
  std::string* mutable_addr();
  PROTOBUF_NODISCARD std::string* release_addr();
  void set_allocated_addr(std::string* value);

  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(
      const std::string& value);
  std::string* _internal_mutable_addr();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // uint32 zone_id = 3;
  void clear_zone_id() ;
  ::uint32_t zone_id() const;
  void set_zone_id(::uint32_t value);

  private:
  ::uint32_t _internal_zone_id() const;
  void _internal_set_zone_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:login_node_db)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      26, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr addr_;
    ::uint32_t id_;
    ::uint32_t zone_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fdeploy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class lobby_node_db final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:lobby_node_db) */ {
 public:
  inline lobby_node_db() : lobby_node_db(nullptr) {}
  ~lobby_node_db() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR lobby_node_db(
      ::google::protobuf::internal::ConstantInitialized);

  inline lobby_node_db(const lobby_node_db& from) : lobby_node_db(nullptr, from) {}
  inline lobby_node_db(lobby_node_db&& from) noexcept
      : lobby_node_db(nullptr, std::move(from)) {}
  inline lobby_node_db& operator=(const lobby_node_db& from) {
    CopyFrom(from);
    return *this;
  }
  inline lobby_node_db& operator=(lobby_node_db&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const lobby_node_db& default_instance() {
    return *internal_default_instance();
  }
  static inline const lobby_node_db* internal_default_instance() {
    return reinterpret_cast<const lobby_node_db*>(
        &_lobby_node_db_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(lobby_node_db& a, lobby_node_db& b) { a.Swap(&b); }
  inline void Swap(lobby_node_db* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(lobby_node_db* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  lobby_node_db* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<lobby_node_db>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const lobby_node_db& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const lobby_node_db& from) { lobby_node_db::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(lobby_node_db* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "lobby_node_db"; }

 protected:
  explicit lobby_node_db(::google::protobuf::Arena* arena);
  lobby_node_db(::google::protobuf::Arena* arena, const lobby_node_db& from);
  lobby_node_db(::google::protobuf::Arena* arena, lobby_node_db&& from) noexcept
      : lobby_node_db(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIpFieldNumber = 2,
    kIdFieldNumber = 1,
    kPortFieldNumber = 3,
  };
  // string ip = 2;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* value);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // uint32 port = 3;
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:lobby_node_db)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      24, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::uint32_t id_;
    ::uint32_t port_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fdeploy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class gate_node_db final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:gate_node_db) */ {
 public:
  inline gate_node_db() : gate_node_db(nullptr) {}
  ~gate_node_db() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR gate_node_db(
      ::google::protobuf::internal::ConstantInitialized);

  inline gate_node_db(const gate_node_db& from) : gate_node_db(nullptr, from) {}
  inline gate_node_db(gate_node_db&& from) noexcept
      : gate_node_db(nullptr, std::move(from)) {}
  inline gate_node_db& operator=(const gate_node_db& from) {
    CopyFrom(from);
    return *this;
  }
  inline gate_node_db& operator=(gate_node_db&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const gate_node_db& default_instance() {
    return *internal_default_instance();
  }
  static inline const gate_node_db* internal_default_instance() {
    return reinterpret_cast<const gate_node_db*>(
        &_gate_node_db_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(gate_node_db& a, gate_node_db& b) { a.Swap(&b); }
  inline void Swap(gate_node_db* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(gate_node_db* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  gate_node_db* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<gate_node_db>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const gate_node_db& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const gate_node_db& from) { gate_node_db::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(gate_node_db* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "gate_node_db"; }

 protected:
  explicit gate_node_db(::google::protobuf::Arena* arena);
  gate_node_db(::google::protobuf::Arena* arena, const gate_node_db& from);
  gate_node_db(::google::protobuf::Arena* arena, gate_node_db&& from) noexcept
      : gate_node_db(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIpFieldNumber = 2,
    kIdFieldNumber = 1,
    kPortFieldNumber = 3,
    kZoneIdFieldNumber = 4,
  };
  // string ip = 2;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* value);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // uint32 port = 3;
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // uint32 zone_id = 4;
  void clear_zone_id() ;
  ::uint32_t zone_id() const;
  void set_zone_id(::uint32_t value);

  private:
  ::uint32_t _internal_zone_id() const;
  void _internal_set_zone_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:gate_node_db)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      23, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::uint32_t id_;
    ::uint32_t port_;
    ::uint32_t zone_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fdeploy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class game_node_db final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:game_node_db) */ {
 public:
  inline game_node_db() : game_node_db(nullptr) {}
  ~game_node_db() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR game_node_db(
      ::google::protobuf::internal::ConstantInitialized);

  inline game_node_db(const game_node_db& from) : game_node_db(nullptr, from) {}
  inline game_node_db(game_node_db&& from) noexcept
      : game_node_db(nullptr, std::move(from)) {}
  inline game_node_db& operator=(const game_node_db& from) {
    CopyFrom(from);
    return *this;
  }
  inline game_node_db& operator=(game_node_db&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const game_node_db& default_instance() {
    return *internal_default_instance();
  }
  static inline const game_node_db* internal_default_instance() {
    return reinterpret_cast<const game_node_db*>(
        &_game_node_db_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(game_node_db& a, game_node_db& b) { a.Swap(&b); }
  inline void Swap(game_node_db* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(game_node_db* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  game_node_db* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<game_node_db>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const game_node_db& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const game_node_db& from) { game_node_db::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(game_node_db* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "game_node_db"; }

 protected:
  explicit game_node_db(::google::protobuf::Arena* arena);
  game_node_db(::google::protobuf::Arena* arena, const game_node_db& from);
  game_node_db(::google::protobuf::Arena* arena, game_node_db&& from) noexcept
      : game_node_db(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIpFieldNumber = 2,
    kIdFieldNumber = 1,
    kPortFieldNumber = 3,
    kZoneIdFieldNumber = 4,
  };
  // string ip = 2;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* value);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // uint32 port = 3;
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // uint32 zone_id = 4;
  void clear_zone_id() ;
  ::uint32_t zone_id() const;
  void set_zone_id(::uint32_t value);

  private:
  ::uint32_t _internal_zone_id() const;
  void _internal_set_zone_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:game_node_db)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      23, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::uint32_t id_;
    ::uint32_t port_;
    ::uint32_t zone_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fdeploy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class database_node_db final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:database_node_db) */ {
 public:
  inline database_node_db() : database_node_db(nullptr) {}
  ~database_node_db() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR database_node_db(
      ::google::protobuf::internal::ConstantInitialized);

  inline database_node_db(const database_node_db& from) : database_node_db(nullptr, from) {}
  inline database_node_db(database_node_db&& from) noexcept
      : database_node_db(nullptr, std::move(from)) {}
  inline database_node_db& operator=(const database_node_db& from) {
    CopyFrom(from);
    return *this;
  }
  inline database_node_db& operator=(database_node_db&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const database_node_db& default_instance() {
    return *internal_default_instance();
  }
  static inline const database_node_db* internal_default_instance() {
    return reinterpret_cast<const database_node_db*>(
        &_database_node_db_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(database_node_db& a, database_node_db& b) { a.Swap(&b); }
  inline void Swap(database_node_db* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(database_node_db* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  database_node_db* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<database_node_db>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const database_node_db& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const database_node_db& from) { database_node_db::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(database_node_db* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "database_node_db"; }

 protected:
  explicit database_node_db(::google::protobuf::Arena* arena);
  database_node_db(::google::protobuf::Arena* arena, const database_node_db& from);
  database_node_db(::google::protobuf::Arena* arena, database_node_db&& from) noexcept
      : database_node_db(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddrFieldNumber = 2,
    kIdFieldNumber = 1,
    kZoneIdFieldNumber = 3,
  };
  // string addr = 2;
  void clear_addr() ;
  const std::string& addr() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_addr(Arg_&& arg, Args_... args);
  std::string* mutable_addr();
  PROTOBUF_NODISCARD std::string* release_addr();
  void set_allocated_addr(std::string* value);

  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(
      const std::string& value);
  std::string* _internal_mutable_addr();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // uint32 zone_id = 3;
  void clear_zone_id() ;
  ::uint32_t zone_id() const;
  void set_zone_id(::uint32_t value);

  private:
  ::uint32_t _internal_zone_id() const;
  void _internal_set_zone_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:database_node_db)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      29, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr addr_;
    ::uint32_t id_;
    ::uint32_t zone_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fdeploy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class centre_node_db final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centre_node_db) */ {
 public:
  inline centre_node_db() : centre_node_db(nullptr) {}
  ~centre_node_db() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR centre_node_db(
      ::google::protobuf::internal::ConstantInitialized);

  inline centre_node_db(const centre_node_db& from) : centre_node_db(nullptr, from) {}
  inline centre_node_db(centre_node_db&& from) noexcept
      : centre_node_db(nullptr, std::move(from)) {}
  inline centre_node_db& operator=(const centre_node_db& from) {
    CopyFrom(from);
    return *this;
  }
  inline centre_node_db& operator=(centre_node_db&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const centre_node_db& default_instance() {
    return *internal_default_instance();
  }
  static inline const centre_node_db* internal_default_instance() {
    return reinterpret_cast<const centre_node_db*>(
        &_centre_node_db_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(centre_node_db& a, centre_node_db& b) { a.Swap(&b); }
  inline void Swap(centre_node_db* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(centre_node_db* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  centre_node_db* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<centre_node_db>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const centre_node_db& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const centre_node_db& from) { centre_node_db::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(centre_node_db* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "centre_node_db"; }

 protected:
  explicit centre_node_db(::google::protobuf::Arena* arena);
  centre_node_db(::google::protobuf::Arena* arena, const centre_node_db& from);
  centre_node_db(::google::protobuf::Arena* arena, centre_node_db&& from) noexcept
      : centre_node_db(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIpFieldNumber = 2,
    kIdFieldNumber = 1,
    kPortFieldNumber = 3,
    kZoneIdFieldNumber = 4,
  };
  // string ip = 2;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* value);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // uint32 port = 3;
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // uint32 zone_id = 4;
  void clear_zone_id() ;
  ::uint32_t zone_id() const;
  void set_zone_id(::uint32_t value);

  private:
  ::uint32_t _internal_zone_id() const;
  void _internal_set_zone_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:centre_node_db)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      25, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::uint32_t id_;
    ::uint32_t port_;
    ::uint32_t zone_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fdeploy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class NodeInfoRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NodeInfoRequest) */ {
 public:
  inline NodeInfoRequest() : NodeInfoRequest(nullptr) {}
  ~NodeInfoRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NodeInfoRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline NodeInfoRequest(const NodeInfoRequest& from) : NodeInfoRequest(nullptr, from) {}
  inline NodeInfoRequest(NodeInfoRequest&& from) noexcept
      : NodeInfoRequest(nullptr, std::move(from)) {}
  inline NodeInfoRequest& operator=(const NodeInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfoRequest& operator=(NodeInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeInfoRequest* internal_default_instance() {
    return reinterpret_cast<const NodeInfoRequest*>(
        &_NodeInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(NodeInfoRequest& a, NodeInfoRequest& b) { a.Swap(&b); }
  inline void Swap(NodeInfoRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeInfoRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NodeInfoRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NodeInfoRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NodeInfoRequest& from) { NodeInfoRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NodeInfoRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NodeInfoRequest"; }

 protected:
  explicit NodeInfoRequest(::google::protobuf::Arena* arena);
  NodeInfoRequest(::google::protobuf::Arena* arena, const NodeInfoRequest& from);
  NodeInfoRequest(::google::protobuf::Arena* arena, NodeInfoRequest&& from) noexcept
      : NodeInfoRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kZoneIdFieldNumber = 1,
    kNodeTypeFieldNumber = 2,
  };
  // uint32 zone_id = 1;
  void clear_zone_id() ;
  ::uint32_t zone_id() const;
  void set_zone_id(::uint32_t value);

  private:
  ::uint32_t _internal_zone_id() const;
  void _internal_set_zone_id(::uint32_t value);

  public:
  // uint32 node_type = 2;
  void clear_node_type() ;
  ::uint32_t node_type() const;
  void set_node_type(::uint32_t value);

  private:
  ::uint32_t _internal_node_type() const;
  void _internal_set_node_type(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NodeInfoRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t zone_id_;
    ::uint32_t node_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fdeploy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetGameNodeInfoRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GetGameNodeInfoRequest) */ {
 public:
  inline GetGameNodeInfoRequest() : GetGameNodeInfoRequest(nullptr) {}
  ~GetGameNodeInfoRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetGameNodeInfoRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetGameNodeInfoRequest(const GetGameNodeInfoRequest& from) : GetGameNodeInfoRequest(nullptr, from) {}
  inline GetGameNodeInfoRequest(GetGameNodeInfoRequest&& from) noexcept
      : GetGameNodeInfoRequest(nullptr, std::move(from)) {}
  inline GetGameNodeInfoRequest& operator=(const GetGameNodeInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGameNodeInfoRequest& operator=(GetGameNodeInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGameNodeInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGameNodeInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetGameNodeInfoRequest*>(
        &_GetGameNodeInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(GetGameNodeInfoRequest& a, GetGameNodeInfoRequest& b) { a.Swap(&b); }
  inline void Swap(GetGameNodeInfoRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGameNodeInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGameNodeInfoRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GetGameNodeInfoRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetGameNodeInfoRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetGameNodeInfoRequest& from) { GetGameNodeInfoRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetGameNodeInfoRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GetGameNodeInfoRequest"; }

 protected:
  explicit GetGameNodeInfoRequest(::google::protobuf::Arena* arena);
  GetGameNodeInfoRequest(::google::protobuf::Arena* arena, const GetGameNodeInfoRequest& from);
  GetGameNodeInfoRequest(::google::protobuf::Arena* arena, GetGameNodeInfoRequest&& from) noexcept
      : GetGameNodeInfoRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeIdFieldNumber = 1,
  };
  // uint32 node_id = 1;
  void clear_node_id() ;
  ::uint32_t node_id() const;
  void set_node_id(::uint32_t value);

  private:
  ::uint32_t _internal_node_id() const;
  void _internal_set_node_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:GetGameNodeInfoRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t node_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fdeploy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class redis_node_list_db final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:redis_node_list_db) */ {
 public:
  inline redis_node_list_db() : redis_node_list_db(nullptr) {}
  ~redis_node_list_db() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR redis_node_list_db(
      ::google::protobuf::internal::ConstantInitialized);

  inline redis_node_list_db(const redis_node_list_db& from) : redis_node_list_db(nullptr, from) {}
  inline redis_node_list_db(redis_node_list_db&& from) noexcept
      : redis_node_list_db(nullptr, std::move(from)) {}
  inline redis_node_list_db& operator=(const redis_node_list_db& from) {
    CopyFrom(from);
    return *this;
  }
  inline redis_node_list_db& operator=(redis_node_list_db&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const redis_node_list_db& default_instance() {
    return *internal_default_instance();
  }
  static inline const redis_node_list_db* internal_default_instance() {
    return reinterpret_cast<const redis_node_list_db*>(
        &_redis_node_list_db_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(redis_node_list_db& a, redis_node_list_db& b) { a.Swap(&b); }
  inline void Swap(redis_node_list_db* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(redis_node_list_db* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  redis_node_list_db* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<redis_node_list_db>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const redis_node_list_db& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const redis_node_list_db& from) { redis_node_list_db::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(redis_node_list_db* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "redis_node_list_db"; }

 protected:
  explicit redis_node_list_db(::google::protobuf::Arena* arena);
  redis_node_list_db(::google::protobuf::Arena* arena, const redis_node_list_db& from);
  redis_node_list_db(::google::protobuf::Arena* arena, redis_node_list_db&& from) noexcept
      : redis_node_list_db(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRedisInfoFieldNumber = 1,
  };
  // repeated .redis_node_db redis_info = 1;
  int redis_info_size() const;
  private:
  int _internal_redis_info_size() const;

  public:
  void clear_redis_info() ;
  ::redis_node_db* mutable_redis_info(int index);
  ::google::protobuf::RepeatedPtrField<::redis_node_db>* mutable_redis_info();

  private:
  const ::google::protobuf::RepeatedPtrField<::redis_node_db>& _internal_redis_info() const;
  ::google::protobuf::RepeatedPtrField<::redis_node_db>* _internal_mutable_redis_info();
  public:
  const ::redis_node_db& redis_info(int index) const;
  ::redis_node_db* add_redis_info();
  const ::google::protobuf::RepeatedPtrField<::redis_node_db>& redis_info() const;
  // @@protoc_insertion_point(class_scope:redis_node_list_db)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::redis_node_db > redis_info_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fdeploy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class login_node_list_db final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:login_node_list_db) */ {
 public:
  inline login_node_list_db() : login_node_list_db(nullptr) {}
  ~login_node_list_db() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR login_node_list_db(
      ::google::protobuf::internal::ConstantInitialized);

  inline login_node_list_db(const login_node_list_db& from) : login_node_list_db(nullptr, from) {}
  inline login_node_list_db(login_node_list_db&& from) noexcept
      : login_node_list_db(nullptr, std::move(from)) {}
  inline login_node_list_db& operator=(const login_node_list_db& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_node_list_db& operator=(login_node_list_db&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const login_node_list_db& default_instance() {
    return *internal_default_instance();
  }
  static inline const login_node_list_db* internal_default_instance() {
    return reinterpret_cast<const login_node_list_db*>(
        &_login_node_list_db_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(login_node_list_db& a, login_node_list_db& b) { a.Swap(&b); }
  inline void Swap(login_node_list_db* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_node_list_db* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  login_node_list_db* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<login_node_list_db>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const login_node_list_db& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const login_node_list_db& from) { login_node_list_db::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(login_node_list_db* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "login_node_list_db"; }

 protected:
  explicit login_node_list_db(::google::protobuf::Arena* arena);
  login_node_list_db(::google::protobuf::Arena* arena, const login_node_list_db& from);
  login_node_list_db(::google::protobuf::Arena* arena, login_node_list_db&& from) noexcept
      : login_node_list_db(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLoginInfoFieldNumber = 1,
  };
  // repeated .login_node_db login_info = 1;
  int login_info_size() const;
  private:
  int _internal_login_info_size() const;

  public:
  void clear_login_info() ;
  ::login_node_db* mutable_login_info(int index);
  ::google::protobuf::RepeatedPtrField<::login_node_db>* mutable_login_info();

  private:
  const ::google::protobuf::RepeatedPtrField<::login_node_db>& _internal_login_info() const;
  ::google::protobuf::RepeatedPtrField<::login_node_db>* _internal_mutable_login_info();
  public:
  const ::login_node_db& login_info(int index) const;
  ::login_node_db* add_login_info();
  const ::google::protobuf::RepeatedPtrField<::login_node_db>& login_info() const;
  // @@protoc_insertion_point(class_scope:login_node_list_db)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::login_node_db > login_info_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fdeploy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class gate_node_list_db final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:gate_node_list_db) */ {
 public:
  inline gate_node_list_db() : gate_node_list_db(nullptr) {}
  ~gate_node_list_db() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR gate_node_list_db(
      ::google::protobuf::internal::ConstantInitialized);

  inline gate_node_list_db(const gate_node_list_db& from) : gate_node_list_db(nullptr, from) {}
  inline gate_node_list_db(gate_node_list_db&& from) noexcept
      : gate_node_list_db(nullptr, std::move(from)) {}
  inline gate_node_list_db& operator=(const gate_node_list_db& from) {
    CopyFrom(from);
    return *this;
  }
  inline gate_node_list_db& operator=(gate_node_list_db&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const gate_node_list_db& default_instance() {
    return *internal_default_instance();
  }
  static inline const gate_node_list_db* internal_default_instance() {
    return reinterpret_cast<const gate_node_list_db*>(
        &_gate_node_list_db_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(gate_node_list_db& a, gate_node_list_db& b) { a.Swap(&b); }
  inline void Swap(gate_node_list_db* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(gate_node_list_db* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  gate_node_list_db* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<gate_node_list_db>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const gate_node_list_db& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const gate_node_list_db& from) { gate_node_list_db::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(gate_node_list_db* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "gate_node_list_db"; }

 protected:
  explicit gate_node_list_db(::google::protobuf::Arena* arena);
  gate_node_list_db(::google::protobuf::Arena* arena, const gate_node_list_db& from);
  gate_node_list_db(::google::protobuf::Arena* arena, gate_node_list_db&& from) noexcept
      : gate_node_list_db(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGateInfoFieldNumber = 1,
  };
  // repeated .gate_node_db gate_info = 1;
  int gate_info_size() const;
  private:
  int _internal_gate_info_size() const;

  public:
  void clear_gate_info() ;
  ::gate_node_db* mutable_gate_info(int index);
  ::google::protobuf::RepeatedPtrField<::gate_node_db>* mutable_gate_info();

  private:
  const ::google::protobuf::RepeatedPtrField<::gate_node_db>& _internal_gate_info() const;
  ::google::protobuf::RepeatedPtrField<::gate_node_db>* _internal_mutable_gate_info();
  public:
  const ::gate_node_db& gate_info(int index) const;
  ::gate_node_db* add_gate_info();
  const ::google::protobuf::RepeatedPtrField<::gate_node_db>& gate_info() const;
  // @@protoc_insertion_point(class_scope:gate_node_list_db)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::gate_node_db > gate_info_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fdeploy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class game_node_list_db final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:game_node_list_db) */ {
 public:
  inline game_node_list_db() : game_node_list_db(nullptr) {}
  ~game_node_list_db() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR game_node_list_db(
      ::google::protobuf::internal::ConstantInitialized);

  inline game_node_list_db(const game_node_list_db& from) : game_node_list_db(nullptr, from) {}
  inline game_node_list_db(game_node_list_db&& from) noexcept
      : game_node_list_db(nullptr, std::move(from)) {}
  inline game_node_list_db& operator=(const game_node_list_db& from) {
    CopyFrom(from);
    return *this;
  }
  inline game_node_list_db& operator=(game_node_list_db&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const game_node_list_db& default_instance() {
    return *internal_default_instance();
  }
  static inline const game_node_list_db* internal_default_instance() {
    return reinterpret_cast<const game_node_list_db*>(
        &_game_node_list_db_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(game_node_list_db& a, game_node_list_db& b) { a.Swap(&b); }
  inline void Swap(game_node_list_db* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(game_node_list_db* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  game_node_list_db* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<game_node_list_db>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const game_node_list_db& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const game_node_list_db& from) { game_node_list_db::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(game_node_list_db* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "game_node_list_db"; }

 protected:
  explicit game_node_list_db(::google::protobuf::Arena* arena);
  game_node_list_db(::google::protobuf::Arena* arena, const game_node_list_db& from);
  game_node_list_db(::google::protobuf::Arena* arena, game_node_list_db&& from) noexcept
      : game_node_list_db(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGameInfoFieldNumber = 1,
  };
  // repeated .game_node_db game_info = 1;
  int game_info_size() const;
  private:
  int _internal_game_info_size() const;

  public:
  void clear_game_info() ;
  ::game_node_db* mutable_game_info(int index);
  ::google::protobuf::RepeatedPtrField<::game_node_db>* mutable_game_info();

  private:
  const ::google::protobuf::RepeatedPtrField<::game_node_db>& _internal_game_info() const;
  ::google::protobuf::RepeatedPtrField<::game_node_db>* _internal_mutable_game_info();
  public:
  const ::game_node_db& game_info(int index) const;
  ::game_node_db* add_game_info();
  const ::google::protobuf::RepeatedPtrField<::game_node_db>& game_info() const;
  // @@protoc_insertion_point(class_scope:game_node_list_db)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::game_node_db > game_info_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fdeploy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class centre_node_list_db final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:centre_node_list_db) */ {
 public:
  inline centre_node_list_db() : centre_node_list_db(nullptr) {}
  ~centre_node_list_db() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR centre_node_list_db(
      ::google::protobuf::internal::ConstantInitialized);

  inline centre_node_list_db(const centre_node_list_db& from) : centre_node_list_db(nullptr, from) {}
  inline centre_node_list_db(centre_node_list_db&& from) noexcept
      : centre_node_list_db(nullptr, std::move(from)) {}
  inline centre_node_list_db& operator=(const centre_node_list_db& from) {
    CopyFrom(from);
    return *this;
  }
  inline centre_node_list_db& operator=(centre_node_list_db&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const centre_node_list_db& default_instance() {
    return *internal_default_instance();
  }
  static inline const centre_node_list_db* internal_default_instance() {
    return reinterpret_cast<const centre_node_list_db*>(
        &_centre_node_list_db_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(centre_node_list_db& a, centre_node_list_db& b) { a.Swap(&b); }
  inline void Swap(centre_node_list_db* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(centre_node_list_db* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  centre_node_list_db* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<centre_node_list_db>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const centre_node_list_db& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const centre_node_list_db& from) { centre_node_list_db::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(centre_node_list_db* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "centre_node_list_db"; }

 protected:
  explicit centre_node_list_db(::google::protobuf::Arena* arena);
  centre_node_list_db(::google::protobuf::Arena* arena, const centre_node_list_db& from);
  centre_node_list_db(::google::protobuf::Arena* arena, centre_node_list_db&& from) noexcept
      : centre_node_list_db(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCentreInfoFieldNumber = 1,
  };
  // repeated .centre_node_db centre_info = 1;
  int centre_info_size() const;
  private:
  int _internal_centre_info_size() const;

  public:
  void clear_centre_info() ;
  ::centre_node_db* mutable_centre_info(int index);
  ::google::protobuf::RepeatedPtrField<::centre_node_db>* mutable_centre_info();

  private:
  const ::google::protobuf::RepeatedPtrField<::centre_node_db>& _internal_centre_info() const;
  ::google::protobuf::RepeatedPtrField<::centre_node_db>* _internal_mutable_centre_info();
  public:
  const ::centre_node_db& centre_info(int index) const;
  ::centre_node_db* add_centre_info();
  const ::google::protobuf::RepeatedPtrField<::centre_node_db>& centre_info() const;
  // @@protoc_insertion_point(class_scope:centre_node_list_db)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::centre_node_db > centre_info_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fdeploy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class NewGameNodeResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NewGameNodeResponse) */ {
 public:
  inline NewGameNodeResponse() : NewGameNodeResponse(nullptr) {}
  ~NewGameNodeResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewGameNodeResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline NewGameNodeResponse(const NewGameNodeResponse& from) : NewGameNodeResponse(nullptr, from) {}
  inline NewGameNodeResponse(NewGameNodeResponse&& from) noexcept
      : NewGameNodeResponse(nullptr, std::move(from)) {}
  inline NewGameNodeResponse& operator=(const NewGameNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewGameNodeResponse& operator=(NewGameNodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewGameNodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewGameNodeResponse* internal_default_instance() {
    return reinterpret_cast<const NewGameNodeResponse*>(
        &_NewGameNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(NewGameNodeResponse& a, NewGameNodeResponse& b) { a.Swap(&b); }
  inline void Swap(NewGameNodeResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewGameNodeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewGameNodeResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NewGameNodeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewGameNodeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NewGameNodeResponse& from) { NewGameNodeResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NewGameNodeResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NewGameNodeResponse"; }

 protected:
  explicit NewGameNodeResponse(::google::protobuf::Arena* arena);
  NewGameNodeResponse(::google::protobuf::Arena* arena, const NewGameNodeResponse& from);
  NewGameNodeResponse(::google::protobuf::Arena* arena, NewGameNodeResponse&& from) noexcept
      : NewGameNodeResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMyInfoFieldNumber = 1,
    kRedisInfoFieldNumber = 5,
    kErrorNoFieldNumber = 2,
  };
  // .game_node_db my_info = 1;
  bool has_my_info() const;
  void clear_my_info() ;
  const ::game_node_db& my_info() const;
  PROTOBUF_NODISCARD ::game_node_db* release_my_info();
  ::game_node_db* mutable_my_info();
  void set_allocated_my_info(::game_node_db* value);
  void unsafe_arena_set_allocated_my_info(::game_node_db* value);
  ::game_node_db* unsafe_arena_release_my_info();

  private:
  const ::game_node_db& _internal_my_info() const;
  ::game_node_db* _internal_mutable_my_info();

  public:
  // .redis_node_db redis_info = 5;
  bool has_redis_info() const;
  void clear_redis_info() ;
  const ::redis_node_db& redis_info() const;
  PROTOBUF_NODISCARD ::redis_node_db* release_redis_info();
  ::redis_node_db* mutable_redis_info();
  void set_allocated_redis_info(::redis_node_db* value);
  void unsafe_arena_set_allocated_redis_info(::redis_node_db* value);
  ::redis_node_db* unsafe_arena_release_redis_info();

  private:
  const ::redis_node_db& _internal_redis_info() const;
  ::redis_node_db* _internal_mutable_redis_info();

  public:
  // uint32 error_no = 2;
  void clear_error_no() ;
  ::uint32_t error_no() const;
  void set_error_no(::uint32_t value);

  private:
  ::uint32_t _internal_error_no() const;
  void _internal_set_error_no(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NewGameNodeResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::game_node_db* my_info_;
    ::redis_node_db* redis_info_;
    ::uint32_t error_no_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fdeploy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class NewGameNodeRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NewGameNodeRequest) */ {
 public:
  inline NewGameNodeRequest() : NewGameNodeRequest(nullptr) {}
  ~NewGameNodeRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NewGameNodeRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline NewGameNodeRequest(const NewGameNodeRequest& from) : NewGameNodeRequest(nullptr, from) {}
  inline NewGameNodeRequest(NewGameNodeRequest&& from) noexcept
      : NewGameNodeRequest(nullptr, std::move(from)) {}
  inline NewGameNodeRequest& operator=(const NewGameNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewGameNodeRequest& operator=(NewGameNodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewGameNodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewGameNodeRequest* internal_default_instance() {
    return reinterpret_cast<const NewGameNodeRequest*>(
        &_NewGameNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(NewGameNodeRequest& a, NewGameNodeRequest& b) { a.Swap(&b); }
  inline void Swap(NewGameNodeRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewGameNodeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewGameNodeRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NewGameNodeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewGameNodeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NewGameNodeRequest& from) { NewGameNodeRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NewGameNodeRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NewGameNodeRequest"; }

 protected:
  explicit NewGameNodeRequest(::google::protobuf::Arena* arena);
  NewGameNodeRequest(::google::protobuf::Arena* arena, const NewGameNodeRequest& from);
  NewGameNodeRequest(::google::protobuf::Arena* arena, NewGameNodeRequest&& from) noexcept
      : NewGameNodeRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMyInfoFieldNumber = 2,
    kZoneIdFieldNumber = 1,
  };
  // .game_node_db my_info = 2;
  bool has_my_info() const;
  void clear_my_info() ;
  const ::game_node_db& my_info() const;
  PROTOBUF_NODISCARD ::game_node_db* release_my_info();
  ::game_node_db* mutable_my_info();
  void set_allocated_my_info(::game_node_db* value);
  void unsafe_arena_set_allocated_my_info(::game_node_db* value);
  ::game_node_db* unsafe_arena_release_my_info();

  private:
  const ::game_node_db& _internal_my_info() const;
  ::game_node_db* _internal_mutable_my_info();

  public:
  // uint32 zone_id = 1;
  void clear_zone_id() ;
  ::uint32_t zone_id() const;
  void set_zone_id(::uint32_t value);

  private:
  ::uint32_t _internal_zone_id() const;
  void _internal_set_zone_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NewGameNodeRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::game_node_db* my_info_;
    ::uint32_t zone_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fdeploy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetGameNodeInfoResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GetGameNodeInfoResponse) */ {
 public:
  inline GetGameNodeInfoResponse() : GetGameNodeInfoResponse(nullptr) {}
  ~GetGameNodeInfoResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetGameNodeInfoResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetGameNodeInfoResponse(const GetGameNodeInfoResponse& from) : GetGameNodeInfoResponse(nullptr, from) {}
  inline GetGameNodeInfoResponse(GetGameNodeInfoResponse&& from) noexcept
      : GetGameNodeInfoResponse(nullptr, std::move(from)) {}
  inline GetGameNodeInfoResponse& operator=(const GetGameNodeInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGameNodeInfoResponse& operator=(GetGameNodeInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGameNodeInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGameNodeInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetGameNodeInfoResponse*>(
        &_GetGameNodeInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(GetGameNodeInfoResponse& a, GetGameNodeInfoResponse& b) { a.Swap(&b); }
  inline void Swap(GetGameNodeInfoResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGameNodeInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGameNodeInfoResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GetGameNodeInfoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetGameNodeInfoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetGameNodeInfoResponse& from) { GetGameNodeInfoResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetGameNodeInfoResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "GetGameNodeInfoResponse"; }

 protected:
  explicit GetGameNodeInfoResponse(::google::protobuf::Arena* arena);
  GetGameNodeInfoResponse(::google::protobuf::Arena* arena, const GetGameNodeInfoResponse& from);
  GetGameNodeInfoResponse(::google::protobuf::Arena* arena, GetGameNodeInfoResponse&& from) noexcept
      : GetGameNodeInfoResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServiceAddrFieldNumber = 2,
    kNodeIdFieldNumber = 1,
  };
  // .NetworkAddress service_addr = 2;
  bool has_service_addr() const;
  void clear_service_addr() ;
  const ::NetworkAddress& service_addr() const;
  PROTOBUF_NODISCARD ::NetworkAddress* release_service_addr();
  ::NetworkAddress* mutable_service_addr();
  void set_allocated_service_addr(::NetworkAddress* value);
  void unsafe_arena_set_allocated_service_addr(::NetworkAddress* value);
  ::NetworkAddress* unsafe_arena_release_service_addr();

  private:
  const ::NetworkAddress& _internal_service_addr() const;
  ::NetworkAddress* _internal_mutable_service_addr();

  public:
  // uint32 node_id = 1;
  void clear_node_id() ;
  ::uint32_t node_id() const;
  void set_node_id(::uint32_t value);

  private:
  ::uint32_t _internal_node_id() const;
  void _internal_set_node_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:GetGameNodeInfoResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::NetworkAddress* service_addr_;
    ::uint32_t node_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fdeploy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class nodes_info_data final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nodes_info_data) */ {
 public:
  inline nodes_info_data() : nodes_info_data(nullptr) {}
  ~nodes_info_data() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR nodes_info_data(
      ::google::protobuf::internal::ConstantInitialized);

  inline nodes_info_data(const nodes_info_data& from) : nodes_info_data(nullptr, from) {}
  inline nodes_info_data(nodes_info_data&& from) noexcept
      : nodes_info_data(nullptr, std::move(from)) {}
  inline nodes_info_data& operator=(const nodes_info_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline nodes_info_data& operator=(nodes_info_data&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const nodes_info_data& default_instance() {
    return *internal_default_instance();
  }
  static inline const nodes_info_data* internal_default_instance() {
    return reinterpret_cast<const nodes_info_data*>(
        &_nodes_info_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(nodes_info_data& a, nodes_info_data& b) { a.Swap(&b); }
  inline void Swap(nodes_info_data* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(nodes_info_data* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  nodes_info_data* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<nodes_info_data>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const nodes_info_data& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const nodes_info_data& from) { nodes_info_data::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(nodes_info_data* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nodes_info_data"; }

 protected:
  explicit nodes_info_data(::google::protobuf::Arena* arena);
  nodes_info_data(::google::protobuf::Arena* arena, const nodes_info_data& from);
  nodes_info_data(::google::protobuf::Arena* arena, nodes_info_data&& from) noexcept
      : nodes_info_data(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDatabaseInfoFieldNumber = 1,
    kLoginInfoFieldNumber = 2,
    kCentreInfoFieldNumber = 3,
    kGateInfoFieldNumber = 4,
    kGameInfoFieldNumber = 5,
    kRedisInfoFieldNumber = 6,
  };
  // .database_node_db database_info = 1;
  bool has_database_info() const;
  void clear_database_info() ;
  const ::database_node_db& database_info() const;
  PROTOBUF_NODISCARD ::database_node_db* release_database_info();
  ::database_node_db* mutable_database_info();
  void set_allocated_database_info(::database_node_db* value);
  void unsafe_arena_set_allocated_database_info(::database_node_db* value);
  ::database_node_db* unsafe_arena_release_database_info();

  private:
  const ::database_node_db& _internal_database_info() const;
  ::database_node_db* _internal_mutable_database_info();

  public:
  // .login_node_list_db login_info = 2;
  bool has_login_info() const;
  void clear_login_info() ;
  const ::login_node_list_db& login_info() const;
  PROTOBUF_NODISCARD ::login_node_list_db* release_login_info();
  ::login_node_list_db* mutable_login_info();
  void set_allocated_login_info(::login_node_list_db* value);
  void unsafe_arena_set_allocated_login_info(::login_node_list_db* value);
  ::login_node_list_db* unsafe_arena_release_login_info();

  private:
  const ::login_node_list_db& _internal_login_info() const;
  ::login_node_list_db* _internal_mutable_login_info();

  public:
  // .centre_node_list_db centre_info = 3;
  bool has_centre_info() const;
  void clear_centre_info() ;
  const ::centre_node_list_db& centre_info() const;
  PROTOBUF_NODISCARD ::centre_node_list_db* release_centre_info();
  ::centre_node_list_db* mutable_centre_info();
  void set_allocated_centre_info(::centre_node_list_db* value);
  void unsafe_arena_set_allocated_centre_info(::centre_node_list_db* value);
  ::centre_node_list_db* unsafe_arena_release_centre_info();

  private:
  const ::centre_node_list_db& _internal_centre_info() const;
  ::centre_node_list_db* _internal_mutable_centre_info();

  public:
  // .gate_node_list_db gate_info = 4;
  bool has_gate_info() const;
  void clear_gate_info() ;
  const ::gate_node_list_db& gate_info() const;
  PROTOBUF_NODISCARD ::gate_node_list_db* release_gate_info();
  ::gate_node_list_db* mutable_gate_info();
  void set_allocated_gate_info(::gate_node_list_db* value);
  void unsafe_arena_set_allocated_gate_info(::gate_node_list_db* value);
  ::gate_node_list_db* unsafe_arena_release_gate_info();

  private:
  const ::gate_node_list_db& _internal_gate_info() const;
  ::gate_node_list_db* _internal_mutable_gate_info();

  public:
  // .game_node_list_db game_info = 5;
  bool has_game_info() const;
  void clear_game_info() ;
  const ::game_node_list_db& game_info() const;
  PROTOBUF_NODISCARD ::game_node_list_db* release_game_info();
  ::game_node_list_db* mutable_game_info();
  void set_allocated_game_info(::game_node_list_db* value);
  void unsafe_arena_set_allocated_game_info(::game_node_list_db* value);
  ::game_node_list_db* unsafe_arena_release_game_info();

  private:
  const ::game_node_list_db& _internal_game_info() const;
  ::game_node_list_db* _internal_mutable_game_info();

  public:
  // .redis_node_list_db redis_info = 6;
  bool has_redis_info() const;
  void clear_redis_info() ;
  const ::redis_node_list_db& redis_info() const;
  PROTOBUF_NODISCARD ::redis_node_list_db* release_redis_info();
  ::redis_node_list_db* mutable_redis_info();
  void set_allocated_redis_info(::redis_node_list_db* value);
  void unsafe_arena_set_allocated_redis_info(::redis_node_list_db* value);
  ::redis_node_list_db* unsafe_arena_release_redis_info();

  private:
  const ::redis_node_list_db& _internal_redis_info() const;
  ::redis_node_list_db* _internal_mutable_redis_info();

  public:
  // @@protoc_insertion_point(class_scope:nodes_info_data)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 6,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::database_node_db* database_info_;
    ::login_node_list_db* login_info_;
    ::centre_node_list_db* centre_info_;
    ::gate_node_list_db* gate_info_;
    ::game_node_list_db* game_info_;
    ::redis_node_list_db* redis_info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fdeploy_5fservice_2eproto;
};
// -------------------------------------------------------------------

class NodeInfoResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:NodeInfoResponse) */ {
 public:
  inline NodeInfoResponse() : NodeInfoResponse(nullptr) {}
  ~NodeInfoResponse() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NodeInfoResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline NodeInfoResponse(const NodeInfoResponse& from) : NodeInfoResponse(nullptr, from) {}
  inline NodeInfoResponse(NodeInfoResponse&& from) noexcept
      : NodeInfoResponse(nullptr, std::move(from)) {}
  inline NodeInfoResponse& operator=(const NodeInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfoResponse& operator=(NodeInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeInfoResponse* internal_default_instance() {
    return reinterpret_cast<const NodeInfoResponse*>(
        &_NodeInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(NodeInfoResponse& a, NodeInfoResponse& b) { a.Swap(&b); }
  inline void Swap(NodeInfoResponse* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeInfoResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<NodeInfoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NodeInfoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NodeInfoResponse& from) { NodeInfoResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NodeInfoResponse* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "NodeInfoResponse"; }

 protected:
  explicit NodeInfoResponse(::google::protobuf::Arena* arena);
  NodeInfoResponse(::google::protobuf::Arena* arena, const NodeInfoResponse& from);
  NodeInfoResponse(::google::protobuf::Arena* arena, NodeInfoResponse&& from) noexcept
      : NodeInfoResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInfoFieldNumber = 1,
    kNodeIdFieldNumber = 2,
  };
  // .nodes_info_data info = 1;
  bool has_info() const;
  void clear_info() ;
  const ::nodes_info_data& info() const;
  PROTOBUF_NODISCARD ::nodes_info_data* release_info();
  ::nodes_info_data* mutable_info();
  void set_allocated_info(::nodes_info_data* value);
  void unsafe_arena_set_allocated_info(::nodes_info_data* value);
  ::nodes_info_data* unsafe_arena_release_info();

  private:
  const ::nodes_info_data& _internal_info() const;
  ::nodes_info_data* _internal_mutable_info();

  public:
  // uint32 node_id = 2;
  void clear_node_id() ;
  ::uint32_t node_id() const;
  void set_node_id(::uint32_t value);

  private:
  ::uint32_t _internal_node_id() const;
  void _internal_set_node_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NodeInfoResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::nodes_info_data* info_;
    ::uint32_t node_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fdeploy_5fservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// database_node_db

// uint32 id = 1;
inline void database_node_db::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0u;
}
inline ::uint32_t database_node_db::id() const {
  // @@protoc_insertion_point(field_get:database_node_db.id)
  return _internal_id();
}
inline void database_node_db::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:database_node_db.id)
}
inline ::uint32_t database_node_db::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void database_node_db::_internal_set_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = value;
}

// string addr = 2;
inline void database_node_db::clear_addr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.addr_.ClearToEmpty();
}
inline const std::string& database_node_db::addr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:database_node_db.addr)
  return _internal_addr();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void database_node_db::set_addr(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.addr_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:database_node_db.addr)
}
inline std::string* database_node_db::mutable_addr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:database_node_db.addr)
  return _s;
}
inline const std::string& database_node_db::_internal_addr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.addr_.Get();
}
inline void database_node_db::_internal_set_addr(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.addr_.Set(value, GetArena());
}
inline std::string* database_node_db::_internal_mutable_addr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.addr_.Mutable( GetArena());
}
inline std::string* database_node_db::release_addr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:database_node_db.addr)
  return _impl_.addr_.Release();
}
inline void database_node_db::set_allocated_addr(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.addr_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.addr_.IsDefault()) {
          _impl_.addr_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:database_node_db.addr)
}

// uint32 zone_id = 3;
inline void database_node_db::clear_zone_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zone_id_ = 0u;
}
inline ::uint32_t database_node_db::zone_id() const {
  // @@protoc_insertion_point(field_get:database_node_db.zone_id)
  return _internal_zone_id();
}
inline void database_node_db::set_zone_id(::uint32_t value) {
  _internal_set_zone_id(value);
  // @@protoc_insertion_point(field_set:database_node_db.zone_id)
}
inline ::uint32_t database_node_db::_internal_zone_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.zone_id_;
}
inline void database_node_db::_internal_set_zone_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zone_id_ = value;
}

// -------------------------------------------------------------------

// login_node_list_db

// repeated .login_node_db login_info = 1;
inline int login_node_list_db::_internal_login_info_size() const {
  return _internal_login_info().size();
}
inline int login_node_list_db::login_info_size() const {
  return _internal_login_info_size();
}
inline void login_node_list_db::clear_login_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.login_info_.Clear();
}
inline ::login_node_db* login_node_list_db::mutable_login_info(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:login_node_list_db.login_info)
  return _internal_mutable_login_info()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::login_node_db>* login_node_list_db::mutable_login_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:login_node_list_db.login_info)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_login_info();
}
inline const ::login_node_db& login_node_list_db::login_info(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:login_node_list_db.login_info)
  return _internal_login_info().Get(index);
}
inline ::login_node_db* login_node_list_db::add_login_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::login_node_db* _add = _internal_mutable_login_info()->Add();
  // @@protoc_insertion_point(field_add:login_node_list_db.login_info)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::login_node_db>& login_node_list_db::login_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:login_node_list_db.login_info)
  return _internal_login_info();
}
inline const ::google::protobuf::RepeatedPtrField<::login_node_db>&
login_node_list_db::_internal_login_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.login_info_;
}
inline ::google::protobuf::RepeatedPtrField<::login_node_db>*
login_node_list_db::_internal_mutable_login_info() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.login_info_;
}

// -------------------------------------------------------------------

// centre_node_list_db

// repeated .centre_node_db centre_info = 1;
inline int centre_node_list_db::_internal_centre_info_size() const {
  return _internal_centre_info().size();
}
inline int centre_node_list_db::centre_info_size() const {
  return _internal_centre_info_size();
}
inline void centre_node_list_db::clear_centre_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.centre_info_.Clear();
}
inline ::centre_node_db* centre_node_list_db::mutable_centre_info(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:centre_node_list_db.centre_info)
  return _internal_mutable_centre_info()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::centre_node_db>* centre_node_list_db::mutable_centre_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:centre_node_list_db.centre_info)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_centre_info();
}
inline const ::centre_node_db& centre_node_list_db::centre_info(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centre_node_list_db.centre_info)
  return _internal_centre_info().Get(index);
}
inline ::centre_node_db* centre_node_list_db::add_centre_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::centre_node_db* _add = _internal_mutable_centre_info()->Add();
  // @@protoc_insertion_point(field_add:centre_node_list_db.centre_info)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::centre_node_db>& centre_node_list_db::centre_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:centre_node_list_db.centre_info)
  return _internal_centre_info();
}
inline const ::google::protobuf::RepeatedPtrField<::centre_node_db>&
centre_node_list_db::_internal_centre_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.centre_info_;
}
inline ::google::protobuf::RepeatedPtrField<::centre_node_db>*
centre_node_list_db::_internal_mutable_centre_info() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.centre_info_;
}

// -------------------------------------------------------------------

// gate_node_list_db

// repeated .gate_node_db gate_info = 1;
inline int gate_node_list_db::_internal_gate_info_size() const {
  return _internal_gate_info().size();
}
inline int gate_node_list_db::gate_info_size() const {
  return _internal_gate_info_size();
}
inline void gate_node_list_db::clear_gate_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gate_info_.Clear();
}
inline ::gate_node_db* gate_node_list_db::mutable_gate_info(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:gate_node_list_db.gate_info)
  return _internal_mutable_gate_info()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::gate_node_db>* gate_node_list_db::mutable_gate_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:gate_node_list_db.gate_info)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_gate_info();
}
inline const ::gate_node_db& gate_node_list_db::gate_info(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gate_node_list_db.gate_info)
  return _internal_gate_info().Get(index);
}
inline ::gate_node_db* gate_node_list_db::add_gate_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::gate_node_db* _add = _internal_mutable_gate_info()->Add();
  // @@protoc_insertion_point(field_add:gate_node_list_db.gate_info)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::gate_node_db>& gate_node_list_db::gate_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:gate_node_list_db.gate_info)
  return _internal_gate_info();
}
inline const ::google::protobuf::RepeatedPtrField<::gate_node_db>&
gate_node_list_db::_internal_gate_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gate_info_;
}
inline ::google::protobuf::RepeatedPtrField<::gate_node_db>*
gate_node_list_db::_internal_mutable_gate_info() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.gate_info_;
}

// -------------------------------------------------------------------

// game_node_list_db

// repeated .game_node_db game_info = 1;
inline int game_node_list_db::_internal_game_info_size() const {
  return _internal_game_info().size();
}
inline int game_node_list_db::game_info_size() const {
  return _internal_game_info_size();
}
inline void game_node_list_db::clear_game_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.game_info_.Clear();
}
inline ::game_node_db* game_node_list_db::mutable_game_info(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:game_node_list_db.game_info)
  return _internal_mutable_game_info()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::game_node_db>* game_node_list_db::mutable_game_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:game_node_list_db.game_info)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_game_info();
}
inline const ::game_node_db& game_node_list_db::game_info(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:game_node_list_db.game_info)
  return _internal_game_info().Get(index);
}
inline ::game_node_db* game_node_list_db::add_game_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::game_node_db* _add = _internal_mutable_game_info()->Add();
  // @@protoc_insertion_point(field_add:game_node_list_db.game_info)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::game_node_db>& game_node_list_db::game_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:game_node_list_db.game_info)
  return _internal_game_info();
}
inline const ::google::protobuf::RepeatedPtrField<::game_node_db>&
game_node_list_db::_internal_game_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.game_info_;
}
inline ::google::protobuf::RepeatedPtrField<::game_node_db>*
game_node_list_db::_internal_mutable_game_info() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.game_info_;
}

// -------------------------------------------------------------------

// redis_node_list_db

// repeated .redis_node_db redis_info = 1;
inline int redis_node_list_db::_internal_redis_info_size() const {
  return _internal_redis_info().size();
}
inline int redis_node_list_db::redis_info_size() const {
  return _internal_redis_info_size();
}
inline void redis_node_list_db::clear_redis_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.redis_info_.Clear();
}
inline ::redis_node_db* redis_node_list_db::mutable_redis_info(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:redis_node_list_db.redis_info)
  return _internal_mutable_redis_info()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::redis_node_db>* redis_node_list_db::mutable_redis_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:redis_node_list_db.redis_info)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_redis_info();
}
inline const ::redis_node_db& redis_node_list_db::redis_info(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:redis_node_list_db.redis_info)
  return _internal_redis_info().Get(index);
}
inline ::redis_node_db* redis_node_list_db::add_redis_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::redis_node_db* _add = _internal_mutable_redis_info()->Add();
  // @@protoc_insertion_point(field_add:redis_node_list_db.redis_info)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::redis_node_db>& redis_node_list_db::redis_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:redis_node_list_db.redis_info)
  return _internal_redis_info();
}
inline const ::google::protobuf::RepeatedPtrField<::redis_node_db>&
redis_node_list_db::_internal_redis_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.redis_info_;
}
inline ::google::protobuf::RepeatedPtrField<::redis_node_db>*
redis_node_list_db::_internal_mutable_redis_info() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.redis_info_;
}

// -------------------------------------------------------------------

// nodes_info_data

// .database_node_db database_info = 1;
inline bool nodes_info_data::has_database_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.database_info_ != nullptr);
  return value;
}
inline void nodes_info_data::clear_database_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.database_info_ != nullptr) _impl_.database_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::database_node_db& nodes_info_data::_internal_database_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::database_node_db* p = _impl_.database_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::database_node_db&>(::_database_node_db_default_instance_);
}
inline const ::database_node_db& nodes_info_data::database_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nodes_info_data.database_info)
  return _internal_database_info();
}
inline void nodes_info_data::unsafe_arena_set_allocated_database_info(::database_node_db* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.database_info_);
  }
  _impl_.database_info_ = reinterpret_cast<::database_node_db*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nodes_info_data.database_info)
}
inline ::database_node_db* nodes_info_data::release_database_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::database_node_db* released = _impl_.database_info_;
  _impl_.database_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::database_node_db* nodes_info_data::unsafe_arena_release_database_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nodes_info_data.database_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::database_node_db* temp = _impl_.database_info_;
  _impl_.database_info_ = nullptr;
  return temp;
}
inline ::database_node_db* nodes_info_data::_internal_mutable_database_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.database_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::database_node_db>(GetArena());
    _impl_.database_info_ = reinterpret_cast<::database_node_db*>(p);
  }
  return _impl_.database_info_;
}
inline ::database_node_db* nodes_info_data::mutable_database_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::database_node_db* _msg = _internal_mutable_database_info();
  // @@protoc_insertion_point(field_mutable:nodes_info_data.database_info)
  return _msg;
}
inline void nodes_info_data::set_allocated_database_info(::database_node_db* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.database_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.database_info_ = reinterpret_cast<::database_node_db*>(value);
  // @@protoc_insertion_point(field_set_allocated:nodes_info_data.database_info)
}

// .login_node_list_db login_info = 2;
inline bool nodes_info_data::has_login_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.login_info_ != nullptr);
  return value;
}
inline void nodes_info_data::clear_login_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.login_info_ != nullptr) _impl_.login_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::login_node_list_db& nodes_info_data::_internal_login_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::login_node_list_db* p = _impl_.login_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::login_node_list_db&>(::_login_node_list_db_default_instance_);
}
inline const ::login_node_list_db& nodes_info_data::login_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nodes_info_data.login_info)
  return _internal_login_info();
}
inline void nodes_info_data::unsafe_arena_set_allocated_login_info(::login_node_list_db* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.login_info_);
  }
  _impl_.login_info_ = reinterpret_cast<::login_node_list_db*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nodes_info_data.login_info)
}
inline ::login_node_list_db* nodes_info_data::release_login_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::login_node_list_db* released = _impl_.login_info_;
  _impl_.login_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::login_node_list_db* nodes_info_data::unsafe_arena_release_login_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nodes_info_data.login_info)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::login_node_list_db* temp = _impl_.login_info_;
  _impl_.login_info_ = nullptr;
  return temp;
}
inline ::login_node_list_db* nodes_info_data::_internal_mutable_login_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.login_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::login_node_list_db>(GetArena());
    _impl_.login_info_ = reinterpret_cast<::login_node_list_db*>(p);
  }
  return _impl_.login_info_;
}
inline ::login_node_list_db* nodes_info_data::mutable_login_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::login_node_list_db* _msg = _internal_mutable_login_info();
  // @@protoc_insertion_point(field_mutable:nodes_info_data.login_info)
  return _msg;
}
inline void nodes_info_data::set_allocated_login_info(::login_node_list_db* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.login_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.login_info_ = reinterpret_cast<::login_node_list_db*>(value);
  // @@protoc_insertion_point(field_set_allocated:nodes_info_data.login_info)
}

// .centre_node_list_db centre_info = 3;
inline bool nodes_info_data::has_centre_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.centre_info_ != nullptr);
  return value;
}
inline void nodes_info_data::clear_centre_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.centre_info_ != nullptr) _impl_.centre_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::centre_node_list_db& nodes_info_data::_internal_centre_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::centre_node_list_db* p = _impl_.centre_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::centre_node_list_db&>(::_centre_node_list_db_default_instance_);
}
inline const ::centre_node_list_db& nodes_info_data::centre_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nodes_info_data.centre_info)
  return _internal_centre_info();
}
inline void nodes_info_data::unsafe_arena_set_allocated_centre_info(::centre_node_list_db* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.centre_info_);
  }
  _impl_.centre_info_ = reinterpret_cast<::centre_node_list_db*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nodes_info_data.centre_info)
}
inline ::centre_node_list_db* nodes_info_data::release_centre_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::centre_node_list_db* released = _impl_.centre_info_;
  _impl_.centre_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::centre_node_list_db* nodes_info_data::unsafe_arena_release_centre_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nodes_info_data.centre_info)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::centre_node_list_db* temp = _impl_.centre_info_;
  _impl_.centre_info_ = nullptr;
  return temp;
}
inline ::centre_node_list_db* nodes_info_data::_internal_mutable_centre_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.centre_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::centre_node_list_db>(GetArena());
    _impl_.centre_info_ = reinterpret_cast<::centre_node_list_db*>(p);
  }
  return _impl_.centre_info_;
}
inline ::centre_node_list_db* nodes_info_data::mutable_centre_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::centre_node_list_db* _msg = _internal_mutable_centre_info();
  // @@protoc_insertion_point(field_mutable:nodes_info_data.centre_info)
  return _msg;
}
inline void nodes_info_data::set_allocated_centre_info(::centre_node_list_db* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.centre_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.centre_info_ = reinterpret_cast<::centre_node_list_db*>(value);
  // @@protoc_insertion_point(field_set_allocated:nodes_info_data.centre_info)
}

// .gate_node_list_db gate_info = 4;
inline bool nodes_info_data::has_gate_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gate_info_ != nullptr);
  return value;
}
inline void nodes_info_data::clear_gate_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.gate_info_ != nullptr) _impl_.gate_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::gate_node_list_db& nodes_info_data::_internal_gate_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::gate_node_list_db* p = _impl_.gate_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::gate_node_list_db&>(::_gate_node_list_db_default_instance_);
}
inline const ::gate_node_list_db& nodes_info_data::gate_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nodes_info_data.gate_info)
  return _internal_gate_info();
}
inline void nodes_info_data::unsafe_arena_set_allocated_gate_info(::gate_node_list_db* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gate_info_);
  }
  _impl_.gate_info_ = reinterpret_cast<::gate_node_list_db*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nodes_info_data.gate_info)
}
inline ::gate_node_list_db* nodes_info_data::release_gate_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::gate_node_list_db* released = _impl_.gate_info_;
  _impl_.gate_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::gate_node_list_db* nodes_info_data::unsafe_arena_release_gate_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nodes_info_data.gate_info)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::gate_node_list_db* temp = _impl_.gate_info_;
  _impl_.gate_info_ = nullptr;
  return temp;
}
inline ::gate_node_list_db* nodes_info_data::_internal_mutable_gate_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.gate_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::gate_node_list_db>(GetArena());
    _impl_.gate_info_ = reinterpret_cast<::gate_node_list_db*>(p);
  }
  return _impl_.gate_info_;
}
inline ::gate_node_list_db* nodes_info_data::mutable_gate_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::gate_node_list_db* _msg = _internal_mutable_gate_info();
  // @@protoc_insertion_point(field_mutable:nodes_info_data.gate_info)
  return _msg;
}
inline void nodes_info_data::set_allocated_gate_info(::gate_node_list_db* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.gate_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.gate_info_ = reinterpret_cast<::gate_node_list_db*>(value);
  // @@protoc_insertion_point(field_set_allocated:nodes_info_data.gate_info)
}

// .game_node_list_db game_info = 5;
inline bool nodes_info_data::has_game_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.game_info_ != nullptr);
  return value;
}
inline void nodes_info_data::clear_game_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.game_info_ != nullptr) _impl_.game_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::game_node_list_db& nodes_info_data::_internal_game_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::game_node_list_db* p = _impl_.game_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::game_node_list_db&>(::_game_node_list_db_default_instance_);
}
inline const ::game_node_list_db& nodes_info_data::game_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nodes_info_data.game_info)
  return _internal_game_info();
}
inline void nodes_info_data::unsafe_arena_set_allocated_game_info(::game_node_list_db* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.game_info_);
  }
  _impl_.game_info_ = reinterpret_cast<::game_node_list_db*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nodes_info_data.game_info)
}
inline ::game_node_list_db* nodes_info_data::release_game_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::game_node_list_db* released = _impl_.game_info_;
  _impl_.game_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::game_node_list_db* nodes_info_data::unsafe_arena_release_game_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nodes_info_data.game_info)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::game_node_list_db* temp = _impl_.game_info_;
  _impl_.game_info_ = nullptr;
  return temp;
}
inline ::game_node_list_db* nodes_info_data::_internal_mutable_game_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.game_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::game_node_list_db>(GetArena());
    _impl_.game_info_ = reinterpret_cast<::game_node_list_db*>(p);
  }
  return _impl_.game_info_;
}
inline ::game_node_list_db* nodes_info_data::mutable_game_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::game_node_list_db* _msg = _internal_mutable_game_info();
  // @@protoc_insertion_point(field_mutable:nodes_info_data.game_info)
  return _msg;
}
inline void nodes_info_data::set_allocated_game_info(::game_node_list_db* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.game_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.game_info_ = reinterpret_cast<::game_node_list_db*>(value);
  // @@protoc_insertion_point(field_set_allocated:nodes_info_data.game_info)
}

// .redis_node_list_db redis_info = 6;
inline bool nodes_info_data::has_redis_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redis_info_ != nullptr);
  return value;
}
inline void nodes_info_data::clear_redis_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.redis_info_ != nullptr) _impl_.redis_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::redis_node_list_db& nodes_info_data::_internal_redis_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::redis_node_list_db* p = _impl_.redis_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::redis_node_list_db&>(::_redis_node_list_db_default_instance_);
}
inline const ::redis_node_list_db& nodes_info_data::redis_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nodes_info_data.redis_info)
  return _internal_redis_info();
}
inline void nodes_info_data::unsafe_arena_set_allocated_redis_info(::redis_node_list_db* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.redis_info_);
  }
  _impl_.redis_info_ = reinterpret_cast<::redis_node_list_db*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nodes_info_data.redis_info)
}
inline ::redis_node_list_db* nodes_info_data::release_redis_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::redis_node_list_db* released = _impl_.redis_info_;
  _impl_.redis_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::redis_node_list_db* nodes_info_data::unsafe_arena_release_redis_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nodes_info_data.redis_info)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::redis_node_list_db* temp = _impl_.redis_info_;
  _impl_.redis_info_ = nullptr;
  return temp;
}
inline ::redis_node_list_db* nodes_info_data::_internal_mutable_redis_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.redis_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::redis_node_list_db>(GetArena());
    _impl_.redis_info_ = reinterpret_cast<::redis_node_list_db*>(p);
  }
  return _impl_.redis_info_;
}
inline ::redis_node_list_db* nodes_info_data::mutable_redis_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::redis_node_list_db* _msg = _internal_mutable_redis_info();
  // @@protoc_insertion_point(field_mutable:nodes_info_data.redis_info)
  return _msg;
}
inline void nodes_info_data::set_allocated_redis_info(::redis_node_list_db* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.redis_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.redis_info_ = reinterpret_cast<::redis_node_list_db*>(value);
  // @@protoc_insertion_point(field_set_allocated:nodes_info_data.redis_info)
}

// -------------------------------------------------------------------

// login_node_db

// uint32 id = 1;
inline void login_node_db::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0u;
}
inline ::uint32_t login_node_db::id() const {
  // @@protoc_insertion_point(field_get:login_node_db.id)
  return _internal_id();
}
inline void login_node_db::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:login_node_db.id)
}
inline ::uint32_t login_node_db::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void login_node_db::_internal_set_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = value;
}

// string addr = 2;
inline void login_node_db::clear_addr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.addr_.ClearToEmpty();
}
inline const std::string& login_node_db::addr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:login_node_db.addr)
  return _internal_addr();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void login_node_db::set_addr(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.addr_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:login_node_db.addr)
}
inline std::string* login_node_db::mutable_addr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:login_node_db.addr)
  return _s;
}
inline const std::string& login_node_db::_internal_addr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.addr_.Get();
}
inline void login_node_db::_internal_set_addr(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.addr_.Set(value, GetArena());
}
inline std::string* login_node_db::_internal_mutable_addr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.addr_.Mutable( GetArena());
}
inline std::string* login_node_db::release_addr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:login_node_db.addr)
  return _impl_.addr_.Release();
}
inline void login_node_db::set_allocated_addr(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.addr_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.addr_.IsDefault()) {
          _impl_.addr_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:login_node_db.addr)
}

// uint32 zone_id = 3;
inline void login_node_db::clear_zone_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zone_id_ = 0u;
}
inline ::uint32_t login_node_db::zone_id() const {
  // @@protoc_insertion_point(field_get:login_node_db.zone_id)
  return _internal_zone_id();
}
inline void login_node_db::set_zone_id(::uint32_t value) {
  _internal_set_zone_id(value);
  // @@protoc_insertion_point(field_set:login_node_db.zone_id)
}
inline ::uint32_t login_node_db::_internal_zone_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.zone_id_;
}
inline void login_node_db::_internal_set_zone_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zone_id_ = value;
}

// -------------------------------------------------------------------

// centre_node_db

// uint32 id = 1;
inline void centre_node_db::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0u;
}
inline ::uint32_t centre_node_db::id() const {
  // @@protoc_insertion_point(field_get:centre_node_db.id)
  return _internal_id();
}
inline void centre_node_db::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:centre_node_db.id)
}
inline ::uint32_t centre_node_db::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void centre_node_db::_internal_set_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = value;
}

// string ip = 2;
inline void centre_node_db::clear_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& centre_node_db::ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:centre_node_db.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void centre_node_db::set_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:centre_node_db.ip)
}
inline std::string* centre_node_db::mutable_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:centre_node_db.ip)
  return _s;
}
inline const std::string& centre_node_db::_internal_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_.Get();
}
inline void centre_node_db::_internal_set_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.Set(value, GetArena());
}
inline std::string* centre_node_db::_internal_mutable_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.ip_.Mutable( GetArena());
}
inline std::string* centre_node_db::release_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:centre_node_db.ip)
  return _impl_.ip_.Release();
}
inline void centre_node_db::set_allocated_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:centre_node_db.ip)
}

// uint32 port = 3;
inline void centre_node_db::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0u;
}
inline ::uint32_t centre_node_db::port() const {
  // @@protoc_insertion_point(field_get:centre_node_db.port)
  return _internal_port();
}
inline void centre_node_db::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:centre_node_db.port)
}
inline ::uint32_t centre_node_db::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void centre_node_db::_internal_set_port(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = value;
}

// uint32 zone_id = 4;
inline void centre_node_db::clear_zone_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zone_id_ = 0u;
}
inline ::uint32_t centre_node_db::zone_id() const {
  // @@protoc_insertion_point(field_get:centre_node_db.zone_id)
  return _internal_zone_id();
}
inline void centre_node_db::set_zone_id(::uint32_t value) {
  _internal_set_zone_id(value);
  // @@protoc_insertion_point(field_set:centre_node_db.zone_id)
}
inline ::uint32_t centre_node_db::_internal_zone_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.zone_id_;
}
inline void centre_node_db::_internal_set_zone_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zone_id_ = value;
}

// -------------------------------------------------------------------

// lobby_node_db

// uint32 id = 1;
inline void lobby_node_db::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0u;
}
inline ::uint32_t lobby_node_db::id() const {
  // @@protoc_insertion_point(field_get:lobby_node_db.id)
  return _internal_id();
}
inline void lobby_node_db::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:lobby_node_db.id)
}
inline ::uint32_t lobby_node_db::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void lobby_node_db::_internal_set_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = value;
}

// string ip = 2;
inline void lobby_node_db::clear_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& lobby_node_db::ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:lobby_node_db.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void lobby_node_db::set_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:lobby_node_db.ip)
}
inline std::string* lobby_node_db::mutable_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:lobby_node_db.ip)
  return _s;
}
inline const std::string& lobby_node_db::_internal_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_.Get();
}
inline void lobby_node_db::_internal_set_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.Set(value, GetArena());
}
inline std::string* lobby_node_db::_internal_mutable_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.ip_.Mutable( GetArena());
}
inline std::string* lobby_node_db::release_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:lobby_node_db.ip)
  return _impl_.ip_.Release();
}
inline void lobby_node_db::set_allocated_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby_node_db.ip)
}

// uint32 port = 3;
inline void lobby_node_db::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0u;
}
inline ::uint32_t lobby_node_db::port() const {
  // @@protoc_insertion_point(field_get:lobby_node_db.port)
  return _internal_port();
}
inline void lobby_node_db::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:lobby_node_db.port)
}
inline ::uint32_t lobby_node_db::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void lobby_node_db::_internal_set_port(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = value;
}

// -------------------------------------------------------------------

// redis_node_db

// uint32 id = 1;
inline void redis_node_db::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0u;
}
inline ::uint32_t redis_node_db::id() const {
  // @@protoc_insertion_point(field_get:redis_node_db.id)
  return _internal_id();
}
inline void redis_node_db::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:redis_node_db.id)
}
inline ::uint32_t redis_node_db::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void redis_node_db::_internal_set_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = value;
}

// string ip = 2;
inline void redis_node_db::clear_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& redis_node_db::ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:redis_node_db.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void redis_node_db::set_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:redis_node_db.ip)
}
inline std::string* redis_node_db::mutable_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:redis_node_db.ip)
  return _s;
}
inline const std::string& redis_node_db::_internal_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_.Get();
}
inline void redis_node_db::_internal_set_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.Set(value, GetArena());
}
inline std::string* redis_node_db::_internal_mutable_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.ip_.Mutable( GetArena());
}
inline std::string* redis_node_db::release_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:redis_node_db.ip)
  return _impl_.ip_.Release();
}
inline void redis_node_db::set_allocated_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:redis_node_db.ip)
}

// uint32 port = 3;
inline void redis_node_db::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0u;
}
inline ::uint32_t redis_node_db::port() const {
  // @@protoc_insertion_point(field_get:redis_node_db.port)
  return _internal_port();
}
inline void redis_node_db::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:redis_node_db.port)
}
inline ::uint32_t redis_node_db::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void redis_node_db::_internal_set_port(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = value;
}

// uint32 zone_id = 4;
inline void redis_node_db::clear_zone_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zone_id_ = 0u;
}
inline ::uint32_t redis_node_db::zone_id() const {
  // @@protoc_insertion_point(field_get:redis_node_db.zone_id)
  return _internal_zone_id();
}
inline void redis_node_db::set_zone_id(::uint32_t value) {
  _internal_set_zone_id(value);
  // @@protoc_insertion_point(field_set:redis_node_db.zone_id)
}
inline ::uint32_t redis_node_db::_internal_zone_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.zone_id_;
}
inline void redis_node_db::_internal_set_zone_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zone_id_ = value;
}

// -------------------------------------------------------------------

// game_node_db

// uint32 id = 1;
inline void game_node_db::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0u;
}
inline ::uint32_t game_node_db::id() const {
  // @@protoc_insertion_point(field_get:game_node_db.id)
  return _internal_id();
}
inline void game_node_db::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:game_node_db.id)
}
inline ::uint32_t game_node_db::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void game_node_db::_internal_set_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = value;
}

// string ip = 2;
inline void game_node_db::clear_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& game_node_db::ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:game_node_db.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void game_node_db::set_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:game_node_db.ip)
}
inline std::string* game_node_db::mutable_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:game_node_db.ip)
  return _s;
}
inline const std::string& game_node_db::_internal_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_.Get();
}
inline void game_node_db::_internal_set_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.Set(value, GetArena());
}
inline std::string* game_node_db::_internal_mutable_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.ip_.Mutable( GetArena());
}
inline std::string* game_node_db::release_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:game_node_db.ip)
  return _impl_.ip_.Release();
}
inline void game_node_db::set_allocated_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game_node_db.ip)
}

// uint32 port = 3;
inline void game_node_db::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0u;
}
inline ::uint32_t game_node_db::port() const {
  // @@protoc_insertion_point(field_get:game_node_db.port)
  return _internal_port();
}
inline void game_node_db::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:game_node_db.port)
}
inline ::uint32_t game_node_db::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void game_node_db::_internal_set_port(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = value;
}

// uint32 zone_id = 4;
inline void game_node_db::clear_zone_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zone_id_ = 0u;
}
inline ::uint32_t game_node_db::zone_id() const {
  // @@protoc_insertion_point(field_get:game_node_db.zone_id)
  return _internal_zone_id();
}
inline void game_node_db::set_zone_id(::uint32_t value) {
  _internal_set_zone_id(value);
  // @@protoc_insertion_point(field_set:game_node_db.zone_id)
}
inline ::uint32_t game_node_db::_internal_zone_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.zone_id_;
}
inline void game_node_db::_internal_set_zone_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zone_id_ = value;
}

// -------------------------------------------------------------------

// gate_node_db

// uint32 id = 1;
inline void gate_node_db::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0u;
}
inline ::uint32_t gate_node_db::id() const {
  // @@protoc_insertion_point(field_get:gate_node_db.id)
  return _internal_id();
}
inline void gate_node_db::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gate_node_db.id)
}
inline ::uint32_t gate_node_db::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void gate_node_db::_internal_set_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = value;
}

// string ip = 2;
inline void gate_node_db::clear_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& gate_node_db::ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:gate_node_db.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void gate_node_db::set_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:gate_node_db.ip)
}
inline std::string* gate_node_db::mutable_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:gate_node_db.ip)
  return _s;
}
inline const std::string& gate_node_db::_internal_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_.Get();
}
inline void gate_node_db::_internal_set_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.Set(value, GetArena());
}
inline std::string* gate_node_db::_internal_mutable_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.ip_.Mutable( GetArena());
}
inline std::string* gate_node_db::release_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:gate_node_db.ip)
  return _impl_.ip_.Release();
}
inline void gate_node_db::set_allocated_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gate_node_db.ip)
}

// uint32 port = 3;
inline void gate_node_db::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0u;
}
inline ::uint32_t gate_node_db::port() const {
  // @@protoc_insertion_point(field_get:gate_node_db.port)
  return _internal_port();
}
inline void gate_node_db::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:gate_node_db.port)
}
inline ::uint32_t gate_node_db::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void gate_node_db::_internal_set_port(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = value;
}

// uint32 zone_id = 4;
inline void gate_node_db::clear_zone_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zone_id_ = 0u;
}
inline ::uint32_t gate_node_db::zone_id() const {
  // @@protoc_insertion_point(field_get:gate_node_db.zone_id)
  return _internal_zone_id();
}
inline void gate_node_db::set_zone_id(::uint32_t value) {
  _internal_set_zone_id(value);
  // @@protoc_insertion_point(field_set:gate_node_db.zone_id)
}
inline ::uint32_t gate_node_db::_internal_zone_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.zone_id_;
}
inline void gate_node_db::_internal_set_zone_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zone_id_ = value;
}

// -------------------------------------------------------------------

// NodeInfoRequest

// uint32 zone_id = 1;
inline void NodeInfoRequest::clear_zone_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zone_id_ = 0u;
}
inline ::uint32_t NodeInfoRequest::zone_id() const {
  // @@protoc_insertion_point(field_get:NodeInfoRequest.zone_id)
  return _internal_zone_id();
}
inline void NodeInfoRequest::set_zone_id(::uint32_t value) {
  _internal_set_zone_id(value);
  // @@protoc_insertion_point(field_set:NodeInfoRequest.zone_id)
}
inline ::uint32_t NodeInfoRequest::_internal_zone_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.zone_id_;
}
inline void NodeInfoRequest::_internal_set_zone_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zone_id_ = value;
}

// uint32 node_type = 2;
inline void NodeInfoRequest::clear_node_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.node_type_ = 0u;
}
inline ::uint32_t NodeInfoRequest::node_type() const {
  // @@protoc_insertion_point(field_get:NodeInfoRequest.node_type)
  return _internal_node_type();
}
inline void NodeInfoRequest::set_node_type(::uint32_t value) {
  _internal_set_node_type(value);
  // @@protoc_insertion_point(field_set:NodeInfoRequest.node_type)
}
inline ::uint32_t NodeInfoRequest::_internal_node_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.node_type_;
}
inline void NodeInfoRequest::_internal_set_node_type(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.node_type_ = value;
}

// -------------------------------------------------------------------

// NodeInfoResponse

// .nodes_info_data info = 1;
inline bool NodeInfoResponse::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline void NodeInfoResponse::clear_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::nodes_info_data& NodeInfoResponse::_internal_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nodes_info_data* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::nodes_info_data&>(::_nodes_info_data_default_instance_);
}
inline const ::nodes_info_data& NodeInfoResponse::info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NodeInfoResponse.info)
  return _internal_info();
}
inline void NodeInfoResponse::unsafe_arena_set_allocated_info(::nodes_info_data* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = reinterpret_cast<::nodes_info_data*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NodeInfoResponse.info)
}
inline ::nodes_info_data* NodeInfoResponse::release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nodes_info_data* released = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nodes_info_data* NodeInfoResponse::unsafe_arena_release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:NodeInfoResponse.info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nodes_info_data* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::nodes_info_data* NodeInfoResponse::_internal_mutable_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nodes_info_data>(GetArena());
    _impl_.info_ = reinterpret_cast<::nodes_info_data*>(p);
  }
  return _impl_.info_;
}
inline ::nodes_info_data* NodeInfoResponse::mutable_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::nodes_info_data* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:NodeInfoResponse.info)
  return _msg;
}
inline void NodeInfoResponse::set_allocated_info(::nodes_info_data* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.info_ = reinterpret_cast<::nodes_info_data*>(value);
  // @@protoc_insertion_point(field_set_allocated:NodeInfoResponse.info)
}

// uint32 node_id = 2;
inline void NodeInfoResponse::clear_node_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.node_id_ = 0u;
}
inline ::uint32_t NodeInfoResponse::node_id() const {
  // @@protoc_insertion_point(field_get:NodeInfoResponse.node_id)
  return _internal_node_id();
}
inline void NodeInfoResponse::set_node_id(::uint32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:NodeInfoResponse.node_id)
}
inline ::uint32_t NodeInfoResponse::_internal_node_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.node_id_;
}
inline void NodeInfoResponse::_internal_set_node_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.node_id_ = value;
}

// -------------------------------------------------------------------

// NewGameNodeRequest

// uint32 zone_id = 1;
inline void NewGameNodeRequest::clear_zone_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zone_id_ = 0u;
}
inline ::uint32_t NewGameNodeRequest::zone_id() const {
  // @@protoc_insertion_point(field_get:NewGameNodeRequest.zone_id)
  return _internal_zone_id();
}
inline void NewGameNodeRequest::set_zone_id(::uint32_t value) {
  _internal_set_zone_id(value);
  // @@protoc_insertion_point(field_set:NewGameNodeRequest.zone_id)
}
inline ::uint32_t NewGameNodeRequest::_internal_zone_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.zone_id_;
}
inline void NewGameNodeRequest::_internal_set_zone_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zone_id_ = value;
}

// .game_node_db my_info = 2;
inline bool NewGameNodeRequest::has_my_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.my_info_ != nullptr);
  return value;
}
inline void NewGameNodeRequest::clear_my_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.my_info_ != nullptr) _impl_.my_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::game_node_db& NewGameNodeRequest::_internal_my_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::game_node_db* p = _impl_.my_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::game_node_db&>(::_game_node_db_default_instance_);
}
inline const ::game_node_db& NewGameNodeRequest::my_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NewGameNodeRequest.my_info)
  return _internal_my_info();
}
inline void NewGameNodeRequest::unsafe_arena_set_allocated_my_info(::game_node_db* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.my_info_);
  }
  _impl_.my_info_ = reinterpret_cast<::game_node_db*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NewGameNodeRequest.my_info)
}
inline ::game_node_db* NewGameNodeRequest::release_my_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::game_node_db* released = _impl_.my_info_;
  _impl_.my_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::game_node_db* NewGameNodeRequest::unsafe_arena_release_my_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:NewGameNodeRequest.my_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::game_node_db* temp = _impl_.my_info_;
  _impl_.my_info_ = nullptr;
  return temp;
}
inline ::game_node_db* NewGameNodeRequest::_internal_mutable_my_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.my_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::game_node_db>(GetArena());
    _impl_.my_info_ = reinterpret_cast<::game_node_db*>(p);
  }
  return _impl_.my_info_;
}
inline ::game_node_db* NewGameNodeRequest::mutable_my_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::game_node_db* _msg = _internal_mutable_my_info();
  // @@protoc_insertion_point(field_mutable:NewGameNodeRequest.my_info)
  return _msg;
}
inline void NewGameNodeRequest::set_allocated_my_info(::game_node_db* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.my_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.my_info_ = reinterpret_cast<::game_node_db*>(value);
  // @@protoc_insertion_point(field_set_allocated:NewGameNodeRequest.my_info)
}

// -------------------------------------------------------------------

// NewGameNodeResponse

// .game_node_db my_info = 1;
inline bool NewGameNodeResponse::has_my_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.my_info_ != nullptr);
  return value;
}
inline void NewGameNodeResponse::clear_my_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.my_info_ != nullptr) _impl_.my_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::game_node_db& NewGameNodeResponse::_internal_my_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::game_node_db* p = _impl_.my_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::game_node_db&>(::_game_node_db_default_instance_);
}
inline const ::game_node_db& NewGameNodeResponse::my_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NewGameNodeResponse.my_info)
  return _internal_my_info();
}
inline void NewGameNodeResponse::unsafe_arena_set_allocated_my_info(::game_node_db* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.my_info_);
  }
  _impl_.my_info_ = reinterpret_cast<::game_node_db*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NewGameNodeResponse.my_info)
}
inline ::game_node_db* NewGameNodeResponse::release_my_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::game_node_db* released = _impl_.my_info_;
  _impl_.my_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::game_node_db* NewGameNodeResponse::unsafe_arena_release_my_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:NewGameNodeResponse.my_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::game_node_db* temp = _impl_.my_info_;
  _impl_.my_info_ = nullptr;
  return temp;
}
inline ::game_node_db* NewGameNodeResponse::_internal_mutable_my_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.my_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::game_node_db>(GetArena());
    _impl_.my_info_ = reinterpret_cast<::game_node_db*>(p);
  }
  return _impl_.my_info_;
}
inline ::game_node_db* NewGameNodeResponse::mutable_my_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::game_node_db* _msg = _internal_mutable_my_info();
  // @@protoc_insertion_point(field_mutable:NewGameNodeResponse.my_info)
  return _msg;
}
inline void NewGameNodeResponse::set_allocated_my_info(::game_node_db* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.my_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.my_info_ = reinterpret_cast<::game_node_db*>(value);
  // @@protoc_insertion_point(field_set_allocated:NewGameNodeResponse.my_info)
}

// uint32 error_no = 2;
inline void NewGameNodeResponse::clear_error_no() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_no_ = 0u;
}
inline ::uint32_t NewGameNodeResponse::error_no() const {
  // @@protoc_insertion_point(field_get:NewGameNodeResponse.error_no)
  return _internal_error_no();
}
inline void NewGameNodeResponse::set_error_no(::uint32_t value) {
  _internal_set_error_no(value);
  // @@protoc_insertion_point(field_set:NewGameNodeResponse.error_no)
}
inline ::uint32_t NewGameNodeResponse::_internal_error_no() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_no_;
}
inline void NewGameNodeResponse::_internal_set_error_no(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_no_ = value;
}

// .redis_node_db redis_info = 5;
inline bool NewGameNodeResponse::has_redis_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.redis_info_ != nullptr);
  return value;
}
inline void NewGameNodeResponse::clear_redis_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.redis_info_ != nullptr) _impl_.redis_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::redis_node_db& NewGameNodeResponse::_internal_redis_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::redis_node_db* p = _impl_.redis_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::redis_node_db&>(::_redis_node_db_default_instance_);
}
inline const ::redis_node_db& NewGameNodeResponse::redis_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:NewGameNodeResponse.redis_info)
  return _internal_redis_info();
}
inline void NewGameNodeResponse::unsafe_arena_set_allocated_redis_info(::redis_node_db* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.redis_info_);
  }
  _impl_.redis_info_ = reinterpret_cast<::redis_node_db*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NewGameNodeResponse.redis_info)
}
inline ::redis_node_db* NewGameNodeResponse::release_redis_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::redis_node_db* released = _impl_.redis_info_;
  _impl_.redis_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::redis_node_db* NewGameNodeResponse::unsafe_arena_release_redis_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:NewGameNodeResponse.redis_info)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::redis_node_db* temp = _impl_.redis_info_;
  _impl_.redis_info_ = nullptr;
  return temp;
}
inline ::redis_node_db* NewGameNodeResponse::_internal_mutable_redis_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.redis_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::redis_node_db>(GetArena());
    _impl_.redis_info_ = reinterpret_cast<::redis_node_db*>(p);
  }
  return _impl_.redis_info_;
}
inline ::redis_node_db* NewGameNodeResponse::mutable_redis_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::redis_node_db* _msg = _internal_mutable_redis_info();
  // @@protoc_insertion_point(field_mutable:NewGameNodeResponse.redis_info)
  return _msg;
}
inline void NewGameNodeResponse::set_allocated_redis_info(::redis_node_db* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.redis_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.redis_info_ = reinterpret_cast<::redis_node_db*>(value);
  // @@protoc_insertion_point(field_set_allocated:NewGameNodeResponse.redis_info)
}

// -------------------------------------------------------------------

// GetGameNodeInfoRequest

// uint32 node_id = 1;
inline void GetGameNodeInfoRequest::clear_node_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.node_id_ = 0u;
}
inline ::uint32_t GetGameNodeInfoRequest::node_id() const {
  // @@protoc_insertion_point(field_get:GetGameNodeInfoRequest.node_id)
  return _internal_node_id();
}
inline void GetGameNodeInfoRequest::set_node_id(::uint32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:GetGameNodeInfoRequest.node_id)
}
inline ::uint32_t GetGameNodeInfoRequest::_internal_node_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.node_id_;
}
inline void GetGameNodeInfoRequest::_internal_set_node_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.node_id_ = value;
}

// -------------------------------------------------------------------

// GetGameNodeInfoResponse

// uint32 node_id = 1;
inline void GetGameNodeInfoResponse::clear_node_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.node_id_ = 0u;
}
inline ::uint32_t GetGameNodeInfoResponse::node_id() const {
  // @@protoc_insertion_point(field_get:GetGameNodeInfoResponse.node_id)
  return _internal_node_id();
}
inline void GetGameNodeInfoResponse::set_node_id(::uint32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:GetGameNodeInfoResponse.node_id)
}
inline ::uint32_t GetGameNodeInfoResponse::_internal_node_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.node_id_;
}
inline void GetGameNodeInfoResponse::_internal_set_node_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.node_id_ = value;
}

// .NetworkAddress service_addr = 2;
inline bool GetGameNodeInfoResponse::has_service_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.service_addr_ != nullptr);
  return value;
}
inline const ::NetworkAddress& GetGameNodeInfoResponse::_internal_service_addr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::NetworkAddress* p = _impl_.service_addr_;
  return p != nullptr ? *p : reinterpret_cast<const ::NetworkAddress&>(::_NetworkAddress_default_instance_);
}
inline const ::NetworkAddress& GetGameNodeInfoResponse::service_addr() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GetGameNodeInfoResponse.service_addr)
  return _internal_service_addr();
}
inline void GetGameNodeInfoResponse::unsafe_arena_set_allocated_service_addr(::NetworkAddress* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.service_addr_);
  }
  _impl_.service_addr_ = reinterpret_cast<::NetworkAddress*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetGameNodeInfoResponse.service_addr)
}
inline ::NetworkAddress* GetGameNodeInfoResponse::release_service_addr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::NetworkAddress* released = _impl_.service_addr_;
  _impl_.service_addr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::NetworkAddress* GetGameNodeInfoResponse::unsafe_arena_release_service_addr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:GetGameNodeInfoResponse.service_addr)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::NetworkAddress* temp = _impl_.service_addr_;
  _impl_.service_addr_ = nullptr;
  return temp;
}
inline ::NetworkAddress* GetGameNodeInfoResponse::_internal_mutable_service_addr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.service_addr_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::NetworkAddress>(GetArena());
    _impl_.service_addr_ = reinterpret_cast<::NetworkAddress*>(p);
  }
  return _impl_.service_addr_;
}
inline ::NetworkAddress* GetGameNodeInfoResponse::mutable_service_addr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::NetworkAddress* _msg = _internal_mutable_service_addr();
  // @@protoc_insertion_point(field_mutable:GetGameNodeInfoResponse.service_addr)
  return _msg;
}
inline void GetGameNodeInfoResponse::set_allocated_service_addr(::NetworkAddress* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.service_addr_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.service_addr_ = reinterpret_cast<::NetworkAddress*>(value);
  // @@protoc_insertion_point(field_set_allocated:GetGameNodeInfoResponse.service_addr)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_proto_2fcommon_2fdeploy_5fservice_2eproto_2epb_2eh
