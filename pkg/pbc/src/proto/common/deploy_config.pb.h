// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/common/deploy_config.proto
// Protobuf C++ Version: 6.31.0-dev

#ifndef proto_2fcommon_2fdeploy_5fconfig_2eproto_2epb_2eh
#define proto_2fcommon_2fdeploy_5fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fcommon_2fdeploy_5fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fcommon_2fdeploy_5fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_proto_2fcommon_2fdeploy_5fconfig_2eproto;
}  // extern "C"
class ConnetionParam;
struct ConnetionParamDefaultTypeInternal;
extern ConnetionParamDefaultTypeInternal _ConnetionParam_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull ConnetionParam_class_data_;
class GameConfigInfo;
struct GameConfigInfoDefaultTypeInternal;
extern GameConfigInfoDefaultTypeInternal _GameConfigInfo_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull GameConfigInfo_class_data_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class GameConfigInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameConfigInfo) */ {
 public:
  inline GameConfigInfo() : GameConfigInfo(nullptr) {}
  ~GameConfigInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GameConfigInfo* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GameConfigInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameConfigInfo(::google::protobuf::internal::ConstantInitialized);

  inline GameConfigInfo(const GameConfigInfo& from) : GameConfigInfo(nullptr, from) {}
  inline GameConfigInfo(GameConfigInfo&& from) noexcept
      : GameConfigInfo(nullptr, std::move(from)) {}
  inline GameConfigInfo& operator=(const GameConfigInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameConfigInfo& operator=(GameConfigInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameConfigInfo& default_instance() {
    return *reinterpret_cast<const GameConfigInfo*>(
        &_GameConfigInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(GameConfigInfo& a, GameConfigInfo& b) { a.Swap(&b); }
  inline void Swap(GameConfigInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameConfigInfo* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameConfigInfo* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GameConfigInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameConfigInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameConfigInfo& from) { GameConfigInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GameConfigInfo* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "GameConfigInfo"; }

 protected:
  explicit GameConfigInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  GameConfigInfo(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const GameConfigInfo& from);
  GameConfigInfo(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, GameConfigInfo&& from) noexcept
      : GameConfigInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMqTopicsFieldNumber = 5,
    kAccessPointFieldNumber = 6,
    kAccessKeyFieldNumber = 9,
    kAccessSecretFieldNumber = 10,
    kZoneIdFieldNumber = 1,
    kLobbyIdFieldNumber = 2,
    kLoglevelFieldNumber = 3,
    kServerTypeFieldNumber = 4,
    kMessageBodySizeFieldNumber = 7,
    kTotalFieldNumber = 8,
  };
  // repeated string mq_topics = 5;
  int mq_topics_size() const;
  private:
  int _internal_mq_topics_size() const;

  public:
  void clear_mq_topics() ;
  const std::string& mq_topics(int index) const;
  std::string* PROTOBUF_NONNULL mutable_mq_topics(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mq_topics(int index, Arg_&& value, Args_... args);
  std::string* PROTOBUF_NONNULL add_mq_topics();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_mq_topics(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& mq_topics() const;
  ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL mutable_mq_topics();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_mq_topics() const;
  ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL _internal_mutable_mq_topics();

  public:
  // string access_point = 6;
  void clear_access_point() ;
  const std::string& access_point() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_access_point(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_access_point();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_access_point();
  void set_allocated_access_point(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_access_point() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_access_point(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_access_point();

  public:
  // string access_key = 9;
  void clear_access_key() ;
  const std::string& access_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_access_key(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_access_key();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_access_key();
  void set_allocated_access_key(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_access_key() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_access_key(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_access_key();

  public:
  // string access_secret = 10;
  void clear_access_secret() ;
  const std::string& access_secret() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_access_secret(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_access_secret();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_access_secret();
  void set_allocated_access_secret(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_access_secret() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_access_secret(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_access_secret();

  public:
  // uint32 zone_id = 1;
  void clear_zone_id() ;
  ::uint32_t zone_id() const;
  void set_zone_id(::uint32_t value);

  private:
  ::uint32_t _internal_zone_id() const;
  void _internal_set_zone_id(::uint32_t value);

  public:
  // uint32 lobby_id = 2;
  void clear_lobby_id() ;
  ::uint32_t lobby_id() const;
  void set_lobby_id(::uint32_t value);

  private:
  ::uint32_t _internal_lobby_id() const;
  void _internal_set_lobby_id(::uint32_t value);

  public:
  // uint32 loglevel = 3;
  void clear_loglevel() ;
  ::uint32_t loglevel() const;
  void set_loglevel(::uint32_t value);

  private:
  ::uint32_t _internal_loglevel() const;
  void _internal_set_loglevel(::uint32_t value);

  public:
  // uint32 server_type = 4;
  void clear_server_type() ;
  ::uint32_t server_type() const;
  void set_server_type(::uint32_t value);

  private:
  ::uint32_t _internal_server_type() const;
  void _internal_set_server_type(::uint32_t value);

  public:
  // uint32 message_body_size = 7;
  void clear_message_body_size() ;
  ::uint32_t message_body_size() const;
  void set_message_body_size(::uint32_t value);

  private:
  ::uint32_t _internal_message_body_size() const;
  void _internal_set_message_body_size(::uint32_t value);

  public:
  // uint32 total = 8;
  void clear_total() ;
  ::uint32_t total() const;
  void set_total(::uint32_t value);

  private:
  ::uint32_t _internal_total() const;
  void _internal_set_total(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:GameConfigInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 10,
                                   0, 75,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const GameConfigInfo& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> mq_topics_;
    ::google::protobuf::internal::ArenaStringPtr access_point_;
    ::google::protobuf::internal::ArenaStringPtr access_key_;
    ::google::protobuf::internal::ArenaStringPtr access_secret_;
    ::uint32_t zone_id_;
    ::uint32_t lobby_id_;
    ::uint32_t loglevel_;
    ::uint32_t server_type_;
    ::uint32_t message_body_size_;
    ::uint32_t total_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fdeploy_5fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull GameConfigInfo_class_data_;
// -------------------------------------------------------------------

class ConnetionParam final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ConnetionParam) */ {
 public:
  inline ConnetionParam() : ConnetionParam(nullptr) {}
  ~ConnetionParam() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConnetionParam* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConnetionParam));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConnetionParam(::google::protobuf::internal::ConstantInitialized);

  inline ConnetionParam(const ConnetionParam& from) : ConnetionParam(nullptr, from) {}
  inline ConnetionParam(ConnetionParam&& from) noexcept
      : ConnetionParam(nullptr, std::move(from)) {}
  inline ConnetionParam& operator=(const ConnetionParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnetionParam& operator=(ConnetionParam&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnetionParam& default_instance() {
    return *reinterpret_cast<const ConnetionParam*>(
        &_ConnetionParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ConnetionParam& a, ConnetionParam& b) { a.Swap(&b); }
  inline void Swap(ConnetionParam* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnetionParam* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnetionParam* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConnetionParam>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConnetionParam& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConnetionParam& from) { ConnetionParam::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConnetionParam* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ConnetionParam"; }

 protected:
  explicit ConnetionParam(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  ConnetionParam(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ConnetionParam& from);
  ConnetionParam(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, ConnetionParam&& from) noexcept
      : ConnetionParam(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIpFieldNumber = 1,
    kDbHostFieldNumber = 3,
    kDbUserFieldNumber = 4,
    kDbPasswordFieldNumber = 5,
    kDbDbnameFieldNumber = 7,
    kPortFieldNumber = 2,
    kDbPortFieldNumber = 6,
  };
  // string ip = 1;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_ip();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_ip();
  void set_allocated_ip(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_ip() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_ip();

  public:
  // string db_host = 3;
  void clear_db_host() ;
  const std::string& db_host() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_db_host(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_db_host();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_db_host();
  void set_allocated_db_host(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_db_host() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_db_host(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_db_host();

  public:
  // string db_user = 4;
  void clear_db_user() ;
  const std::string& db_user() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_db_user(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_db_user();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_db_user();
  void set_allocated_db_user(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_db_user() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_db_user(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_db_user();

  public:
  // string db_password = 5;
  void clear_db_password() ;
  const std::string& db_password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_db_password(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_db_password();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_db_password();
  void set_allocated_db_password(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_db_password() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_db_password(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_db_password();

  public:
  // string db_dbname = 7;
  void clear_db_dbname() ;
  const std::string& db_dbname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_db_dbname(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_db_dbname();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_db_dbname();
  void set_allocated_db_dbname(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_db_dbname() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_db_dbname(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_db_dbname();

  public:
  // uint32 port = 2;
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // uint32 db_port = 6;
  void clear_db_port() ;
  ::uint32_t db_port() const;
  void set_db_port(::uint32_t value);

  private:
  ::uint32_t _internal_db_port() const;
  void _internal_set_db_port(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ConnetionParam)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7,
                                   0, 59,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const ConnetionParam& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::google::protobuf::internal::ArenaStringPtr db_host_;
    ::google::protobuf::internal::ArenaStringPtr db_user_;
    ::google::protobuf::internal::ArenaStringPtr db_password_;
    ::google::protobuf::internal::ArenaStringPtr db_dbname_;
    ::uint32_t port_;
    ::uint32_t db_port_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fdeploy_5fconfig_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull ConnetionParam_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ConnetionParam

// string ip = 1;
inline void ConnetionParam::clear_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConnetionParam::ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ConnetionParam.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConnetionParam::set_ip(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ConnetionParam.ip)
}
inline std::string* PROTOBUF_NONNULL ConnetionParam::mutable_ip()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:ConnetionParam.ip)
  return _s;
}
inline const std::string& ConnetionParam::_internal_ip() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ip_.Get();
}
inline void ConnetionParam::_internal_set_ip(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ip_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ConnetionParam::_internal_mutable_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ip_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ConnetionParam::release_ip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ConnetionParam.ip)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.ip_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.ip_.Set("", GetArena());
  }
  return released;
}
inline void ConnetionParam::set_allocated_ip(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ip_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ConnetionParam.ip)
}

// uint32 port = 2;
inline void ConnetionParam::clear_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t ConnetionParam::port() const {
  // @@protoc_insertion_point(field_get:ConnetionParam.port)
  return _internal_port();
}
inline void ConnetionParam::set_port(::uint32_t value) {
  _internal_set_port(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:ConnetionParam.port)
}
inline ::uint32_t ConnetionParam::_internal_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.port_;
}
inline void ConnetionParam::_internal_set_port(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = value;
}

// string db_host = 3;
inline void ConnetionParam::clear_db_host() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.db_host_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ConnetionParam::db_host() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ConnetionParam.db_host)
  return _internal_db_host();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConnetionParam::set_db_host(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.db_host_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ConnetionParam.db_host)
}
inline std::string* PROTOBUF_NONNULL ConnetionParam::mutable_db_host()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_db_host();
  // @@protoc_insertion_point(field_mutable:ConnetionParam.db_host)
  return _s;
}
inline const std::string& ConnetionParam::_internal_db_host() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.db_host_.Get();
}
inline void ConnetionParam::_internal_set_db_host(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.db_host_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ConnetionParam::_internal_mutable_db_host() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.db_host_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ConnetionParam::release_db_host() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ConnetionParam.db_host)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.db_host_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.db_host_.Set("", GetArena());
  }
  return released;
}
inline void ConnetionParam::set_allocated_db_host(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.db_host_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.db_host_.IsDefault()) {
    _impl_.db_host_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ConnetionParam.db_host)
}

// string db_user = 4;
inline void ConnetionParam::clear_db_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.db_user_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ConnetionParam::db_user() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ConnetionParam.db_user)
  return _internal_db_user();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConnetionParam::set_db_user(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.db_user_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ConnetionParam.db_user)
}
inline std::string* PROTOBUF_NONNULL ConnetionParam::mutable_db_user()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_db_user();
  // @@protoc_insertion_point(field_mutable:ConnetionParam.db_user)
  return _s;
}
inline const std::string& ConnetionParam::_internal_db_user() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.db_user_.Get();
}
inline void ConnetionParam::_internal_set_db_user(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.db_user_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ConnetionParam::_internal_mutable_db_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.db_user_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ConnetionParam::release_db_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ConnetionParam.db_user)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.db_user_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.db_user_.Set("", GetArena());
  }
  return released;
}
inline void ConnetionParam::set_allocated_db_user(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.db_user_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.db_user_.IsDefault()) {
    _impl_.db_user_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ConnetionParam.db_user)
}

// string db_password = 5;
inline void ConnetionParam::clear_db_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.db_password_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ConnetionParam::db_password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ConnetionParam.db_password)
  return _internal_db_password();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConnetionParam::set_db_password(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.db_password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ConnetionParam.db_password)
}
inline std::string* PROTOBUF_NONNULL ConnetionParam::mutable_db_password()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_db_password();
  // @@protoc_insertion_point(field_mutable:ConnetionParam.db_password)
  return _s;
}
inline const std::string& ConnetionParam::_internal_db_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.db_password_.Get();
}
inline void ConnetionParam::_internal_set_db_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.db_password_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ConnetionParam::_internal_mutable_db_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.db_password_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ConnetionParam::release_db_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ConnetionParam.db_password)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.db_password_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.db_password_.Set("", GetArena());
  }
  return released;
}
inline void ConnetionParam::set_allocated_db_password(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.db_password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.db_password_.IsDefault()) {
    _impl_.db_password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ConnetionParam.db_password)
}

// uint32 db_port = 6;
inline void ConnetionParam::clear_db_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.db_port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t ConnetionParam::db_port() const {
  // @@protoc_insertion_point(field_get:ConnetionParam.db_port)
  return _internal_db_port();
}
inline void ConnetionParam::set_db_port(::uint32_t value) {
  _internal_set_db_port(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:ConnetionParam.db_port)
}
inline ::uint32_t ConnetionParam::_internal_db_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.db_port_;
}
inline void ConnetionParam::_internal_set_db_port(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.db_port_ = value;
}

// string db_dbname = 7;
inline void ConnetionParam::clear_db_dbname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.db_dbname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ConnetionParam::db_dbname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ConnetionParam.db_dbname)
  return _internal_db_dbname();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void ConnetionParam::set_db_dbname(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.db_dbname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ConnetionParam.db_dbname)
}
inline std::string* PROTOBUF_NONNULL ConnetionParam::mutable_db_dbname()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_db_dbname();
  // @@protoc_insertion_point(field_mutable:ConnetionParam.db_dbname)
  return _s;
}
inline const std::string& ConnetionParam::_internal_db_dbname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.db_dbname_.Get();
}
inline void ConnetionParam::_internal_set_db_dbname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.db_dbname_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL ConnetionParam::_internal_mutable_db_dbname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.db_dbname_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE ConnetionParam::release_db_dbname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ConnetionParam.db_dbname)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.db_dbname_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.db_dbname_.Set("", GetArena());
  }
  return released;
}
inline void ConnetionParam::set_allocated_db_dbname(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.db_dbname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.db_dbname_.IsDefault()) {
    _impl_.db_dbname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ConnetionParam.db_dbname)
}

// -------------------------------------------------------------------

// GameConfigInfo

// uint32 zone_id = 1;
inline void GameConfigInfo::clear_zone_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zone_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t GameConfigInfo::zone_id() const {
  // @@protoc_insertion_point(field_get:GameConfigInfo.zone_id)
  return _internal_zone_id();
}
inline void GameConfigInfo::set_zone_id(::uint32_t value) {
  _internal_set_zone_id(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:GameConfigInfo.zone_id)
}
inline ::uint32_t GameConfigInfo::_internal_zone_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.zone_id_;
}
inline void GameConfigInfo::_internal_set_zone_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zone_id_ = value;
}

// uint32 lobby_id = 2;
inline void GameConfigInfo::clear_lobby_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lobby_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t GameConfigInfo::lobby_id() const {
  // @@protoc_insertion_point(field_get:GameConfigInfo.lobby_id)
  return _internal_lobby_id();
}
inline void GameConfigInfo::set_lobby_id(::uint32_t value) {
  _internal_set_lobby_id(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:GameConfigInfo.lobby_id)
}
inline ::uint32_t GameConfigInfo::_internal_lobby_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lobby_id_;
}
inline void GameConfigInfo::_internal_set_lobby_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lobby_id_ = value;
}

// uint32 loglevel = 3;
inline void GameConfigInfo::clear_loglevel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.loglevel_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t GameConfigInfo::loglevel() const {
  // @@protoc_insertion_point(field_get:GameConfigInfo.loglevel)
  return _internal_loglevel();
}
inline void GameConfigInfo::set_loglevel(::uint32_t value) {
  _internal_set_loglevel(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:GameConfigInfo.loglevel)
}
inline ::uint32_t GameConfigInfo::_internal_loglevel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.loglevel_;
}
inline void GameConfigInfo::_internal_set_loglevel(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.loglevel_ = value;
}

// uint32 server_type = 4;
inline void GameConfigInfo::clear_server_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t GameConfigInfo::server_type() const {
  // @@protoc_insertion_point(field_get:GameConfigInfo.server_type)
  return _internal_server_type();
}
inline void GameConfigInfo::set_server_type(::uint32_t value) {
  _internal_set_server_type(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:GameConfigInfo.server_type)
}
inline ::uint32_t GameConfigInfo::_internal_server_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.server_type_;
}
inline void GameConfigInfo::_internal_set_server_type(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.server_type_ = value;
}

// repeated string mq_topics = 5;
inline int GameConfigInfo::_internal_mq_topics_size() const {
  return _internal_mq_topics().size();
}
inline int GameConfigInfo::mq_topics_size() const {
  return _internal_mq_topics_size();
}
inline void GameConfigInfo::clear_mq_topics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mq_topics_.Clear();
}
inline std::string* PROTOBUF_NONNULL GameConfigInfo::add_mq_topics()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_mq_topics()->Add();
  // @@protoc_insertion_point(field_add_mutable:GameConfigInfo.mq_topics)
  return _s;
}
inline const std::string& GameConfigInfo::mq_topics(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameConfigInfo.mq_topics)
  return _internal_mq_topics().Get(index);
}
inline std::string* PROTOBUF_NONNULL GameConfigInfo::mutable_mq_topics(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:GameConfigInfo.mq_topics)
  return _internal_mutable_mq_topics()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void GameConfigInfo::set_mq_topics(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(*_internal_mutable_mq_topics()->Mutable(index), std::forward<Arg_>(value),
                        args... );
  // @@protoc_insertion_point(field_set:GameConfigInfo.mq_topics)
}
template <typename Arg_, typename... Args_>
inline void GameConfigInfo::add_mq_topics(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_mq_topics(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:GameConfigInfo.mq_topics)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>& GameConfigInfo::mq_topics() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:GameConfigInfo.mq_topics)
  return _internal_mq_topics();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL
GameConfigInfo::mutable_mq_topics() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:GameConfigInfo.mq_topics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_mq_topics();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GameConfigInfo::_internal_mq_topics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mq_topics_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL
GameConfigInfo::_internal_mutable_mq_topics() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.mq_topics_;
}

// string access_point = 6;
inline void GameConfigInfo::clear_access_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_point_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameConfigInfo::access_point() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameConfigInfo.access_point)
  return _internal_access_point();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void GameConfigInfo::set_access_point(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.access_point_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GameConfigInfo.access_point)
}
inline std::string* PROTOBUF_NONNULL GameConfigInfo::mutable_access_point()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_access_point();
  // @@protoc_insertion_point(field_mutable:GameConfigInfo.access_point)
  return _s;
}
inline const std::string& GameConfigInfo::_internal_access_point() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.access_point_.Get();
}
inline void GameConfigInfo::_internal_set_access_point(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.access_point_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL GameConfigInfo::_internal_mutable_access_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.access_point_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE GameConfigInfo::release_access_point() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameConfigInfo.access_point)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.access_point_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.access_point_.Set("", GetArena());
  }
  return released;
}
inline void GameConfigInfo::set_allocated_access_point(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.access_point_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.access_point_.IsDefault()) {
    _impl_.access_point_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:GameConfigInfo.access_point)
}

// uint32 message_body_size = 7;
inline void GameConfigInfo::clear_message_body_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_body_size_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t GameConfigInfo::message_body_size() const {
  // @@protoc_insertion_point(field_get:GameConfigInfo.message_body_size)
  return _internal_message_body_size();
}
inline void GameConfigInfo::set_message_body_size(::uint32_t value) {
  _internal_set_message_body_size(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:GameConfigInfo.message_body_size)
}
inline ::uint32_t GameConfigInfo::_internal_message_body_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_body_size_;
}
inline void GameConfigInfo::_internal_set_message_body_size(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_body_size_ = value;
}

// uint32 total = 8;
inline void GameConfigInfo::clear_total() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t GameConfigInfo::total() const {
  // @@protoc_insertion_point(field_get:GameConfigInfo.total)
  return _internal_total();
}
inline void GameConfigInfo::set_total(::uint32_t value) {
  _internal_set_total(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:GameConfigInfo.total)
}
inline ::uint32_t GameConfigInfo::_internal_total() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_;
}
inline void GameConfigInfo::_internal_set_total(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_ = value;
}

// string access_key = 9;
inline void GameConfigInfo::clear_access_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GameConfigInfo::access_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameConfigInfo.access_key)
  return _internal_access_key();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void GameConfigInfo::set_access_key(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.access_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GameConfigInfo.access_key)
}
inline std::string* PROTOBUF_NONNULL GameConfigInfo::mutable_access_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_access_key();
  // @@protoc_insertion_point(field_mutable:GameConfigInfo.access_key)
  return _s;
}
inline const std::string& GameConfigInfo::_internal_access_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.access_key_.Get();
}
inline void GameConfigInfo::_internal_set_access_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.access_key_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL GameConfigInfo::_internal_mutable_access_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.access_key_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE GameConfigInfo::release_access_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameConfigInfo.access_key)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.access_key_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.access_key_.Set("", GetArena());
  }
  return released;
}
inline void GameConfigInfo::set_allocated_access_key(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.access_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.access_key_.IsDefault()) {
    _impl_.access_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:GameConfigInfo.access_key)
}

// string access_secret = 10;
inline void GameConfigInfo::clear_access_secret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.access_secret_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GameConfigInfo::access_secret() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:GameConfigInfo.access_secret)
  return _internal_access_secret();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void GameConfigInfo::set_access_secret(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.access_secret_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:GameConfigInfo.access_secret)
}
inline std::string* PROTOBUF_NONNULL GameConfigInfo::mutable_access_secret()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_access_secret();
  // @@protoc_insertion_point(field_mutable:GameConfigInfo.access_secret)
  return _s;
}
inline const std::string& GameConfigInfo::_internal_access_secret() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.access_secret_.Get();
}
inline void GameConfigInfo::_internal_set_access_secret(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.access_secret_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL GameConfigInfo::_internal_mutable_access_secret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.access_secret_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE GameConfigInfo::release_access_secret() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:GameConfigInfo.access_secret)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.access_secret_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.access_secret_.Set("", GetArena());
  }
  return released;
}
inline void GameConfigInfo::set_allocated_access_secret(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.access_secret_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.access_secret_.IsDefault()) {
    _impl_.access_secret_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:GameConfigInfo.access_secret)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // proto_2fcommon_2fdeploy_5fconfig_2eproto_2epb_2eh
