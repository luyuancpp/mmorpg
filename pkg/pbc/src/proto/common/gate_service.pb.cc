// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/common/gate_service.proto
// Protobuf C++ Version: 5.29.0

#include "proto/common/gate_service.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr KickSessionRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : session_id_{::uint64_t{0u}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR KickSessionRequest::KickSessionRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct KickSessionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KickSessionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~KickSessionRequestDefaultTypeInternal() {}
  union {
    KickSessionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KickSessionRequestDefaultTypeInternal _KickSessionRequest_default_instance_;

inline constexpr BroadcastToPlayersRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        session_list_{},
        _session_list_cached_byte_size_{0},
        message_content_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR BroadcastToPlayersRequest::BroadcastToPlayersRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BroadcastToPlayersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BroadcastToPlayersRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BroadcastToPlayersRequestDefaultTypeInternal() {}
  union {
    BroadcastToPlayersRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BroadcastToPlayersRequestDefaultTypeInternal _BroadcastToPlayersRequest_default_instance_;
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_proto_2fcommon_2fgate_5fservice_2eproto = nullptr;
static const ::_pb::ServiceDescriptor*
    file_level_service_descriptors_proto_2fcommon_2fgate_5fservice_2eproto[1];
const ::uint32_t
    TableStruct_proto_2fcommon_2fgate_5fservice_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::KickSessionRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::KickSessionRequest, _impl_.session_id_),
        PROTOBUF_FIELD_OFFSET(::BroadcastToPlayersRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::BroadcastToPlayersRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::BroadcastToPlayersRequest, _impl_.session_list_),
        PROTOBUF_FIELD_OFFSET(::BroadcastToPlayersRequest, _impl_.message_content_),
        ~0u,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::KickSessionRequest)},
        {9, 19, -1, sizeof(::BroadcastToPlayersRequest)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_KickSessionRequest_default_instance_._instance,
    &::_BroadcastToPlayersRequest_default_instance_._instance,
};
const char descriptor_table_protodef_proto_2fcommon_2fgate_5fservice_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\037proto/common/gate_service.proto\032\030proto"
    "/common/empty.proto\032\031proto/common/common"
    ".proto\032!proto/common/common_message.prot"
    "o\"(\n\022KickSessionRequest\022\022\n\nsession_id\030\001 "
    "\001(\004\"[\n\031BroadcastToPlayersRequest\022\024\n\014sess"
    "ion_list\030\001 \003(\004\022(\n\017message_content\030\002 \001(\0132"
    "\017.MessageContent2\236\003\n\013GateService\022X\n\023Play"
    "erEnterGameNode\022\037.RegisterGameNodeSessio"
    "nRequest\032 .RegisterGameNodeSessionRespon"
    "se\0227\n\023SendMessageToPlayer\022\030.NodeRouteMes"
    "sageRequest\032\006.Empty\0222\n\023KickSessionByCent"
    "re\022\023.KickSessionRequest\032\006.Empty\022\?\n\020Route"
    "NodeMessage\022\024.RouteMessageRequest\032\025.Rout"
    "eMessageResponse\022M\n\022RoutePlayerMessage\022\032"
    ".RoutePlayerMessageRequest\032\033.RoutePlayer"
    "MessageResponse\0228\n\022BroadcastToPlayers\022\032."
    "BroadcastToPlayersRequest\032\006.EmptyB\014Z\007pb/"
    "game\200\001\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_proto_2fcommon_2fgate_5fservice_2eproto_deps[3] =
    {
        &::descriptor_table_proto_2fcommon_2fcommon_2eproto,
        &::descriptor_table_proto_2fcommon_2fcommon_5fmessage_2eproto,
        &::descriptor_table_proto_2fcommon_2fempty_2eproto,
};
static ::absl::once_flag descriptor_table_proto_2fcommon_2fgate_5fservice_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_proto_2fcommon_2fgate_5fservice_2eproto = {
    false,
    false,
    695,
    descriptor_table_protodef_proto_2fcommon_2fgate_5fservice_2eproto,
    "proto/common/gate_service.proto",
    &descriptor_table_proto_2fcommon_2fgate_5fservice_2eproto_once,
    descriptor_table_proto_2fcommon_2fgate_5fservice_2eproto_deps,
    3,
    2,
    schemas,
    file_default_instances,
    TableStruct_proto_2fcommon_2fgate_5fservice_2eproto::offsets,
    file_level_enum_descriptors_proto_2fcommon_2fgate_5fservice_2eproto,
    file_level_service_descriptors_proto_2fcommon_2fgate_5fservice_2eproto,
};
// ===================================================================

class KickSessionRequest::_Internal {
 public:
};

KickSessionRequest::KickSessionRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:KickSessionRequest)
}
KickSessionRequest::KickSessionRequest(
    ::google::protobuf::Arena* arena, const KickSessionRequest& from)
    : KickSessionRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE KickSessionRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void KickSessionRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.session_id_ = {};
}
KickSessionRequest::~KickSessionRequest() {
  // @@protoc_insertion_point(destructor:KickSessionRequest)
  SharedDtor(*this);
}
inline void KickSessionRequest::SharedDtor(MessageLite& self) {
  KickSessionRequest& this_ = static_cast<KickSessionRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* KickSessionRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) KickSessionRequest(arena);
}
constexpr auto KickSessionRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(KickSessionRequest),
                                            alignof(KickSessionRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull KickSessionRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_KickSessionRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &KickSessionRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<KickSessionRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &KickSessionRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<KickSessionRequest>(), &KickSessionRequest::ByteSizeLong,
            &KickSessionRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(KickSessionRequest, _impl_._cached_size_),
        false,
    },
    &KickSessionRequest::kDescriptorMethods,
    &descriptor_table_proto_2fcommon_2fgate_5fservice_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* KickSessionRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> KickSessionRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::KickSessionRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint64 session_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(KickSessionRequest, _impl_.session_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(KickSessionRequest, _impl_.session_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 session_id = 1;
    {PROTOBUF_FIELD_OFFSET(KickSessionRequest, _impl_.session_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void KickSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:KickSessionRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* KickSessionRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const KickSessionRequest& this_ = static_cast<const KickSessionRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* KickSessionRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const KickSessionRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:KickSessionRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint64 session_id = 1;
          if (this_._internal_session_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                1, this_._internal_session_id(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:KickSessionRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t KickSessionRequest::ByteSizeLong(const MessageLite& base) {
          const KickSessionRequest& this_ = static_cast<const KickSessionRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t KickSessionRequest::ByteSizeLong() const {
          const KickSessionRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:KickSessionRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // uint64 session_id = 1;
            if (this_._internal_session_id() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_session_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void KickSessionRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<KickSessionRequest*>(&to_msg);
  auto& from = static_cast<const KickSessionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KickSessionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_session_id() != 0) {
    _this->_impl_.session_id_ = from._impl_.session_id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void KickSessionRequest::CopyFrom(const KickSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KickSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void KickSessionRequest::InternalSwap(KickSessionRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.session_id_, other->_impl_.session_id_);
}

::google::protobuf::Metadata KickSessionRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BroadcastToPlayersRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<BroadcastToPlayersRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BroadcastToPlayersRequest, _impl_._has_bits_);
};

void BroadcastToPlayersRequest::clear_message_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.message_content_ != nullptr) _impl_.message_content_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
BroadcastToPlayersRequest::BroadcastToPlayersRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:BroadcastToPlayersRequest)
}
inline PROTOBUF_NDEBUG_INLINE BroadcastToPlayersRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::BroadcastToPlayersRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        session_list_{visibility, arena, from.session_list_},
        _session_list_cached_byte_size_{0} {}

BroadcastToPlayersRequest::BroadcastToPlayersRequest(
    ::google::protobuf::Arena* arena,
    const BroadcastToPlayersRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BroadcastToPlayersRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.message_content_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::MessageContent>(
                              arena, *from._impl_.message_content_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:BroadcastToPlayersRequest)
}
inline PROTOBUF_NDEBUG_INLINE BroadcastToPlayersRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        session_list_{visibility, arena},
        _session_list_cached_byte_size_{0} {}

inline void BroadcastToPlayersRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.message_content_ = {};
}
BroadcastToPlayersRequest::~BroadcastToPlayersRequest() {
  // @@protoc_insertion_point(destructor:BroadcastToPlayersRequest)
  SharedDtor(*this);
}
inline void BroadcastToPlayersRequest::SharedDtor(MessageLite& self) {
  BroadcastToPlayersRequest& this_ = static_cast<BroadcastToPlayersRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.message_content_;
  this_._impl_.~Impl_();
}

inline void* BroadcastToPlayersRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) BroadcastToPlayersRequest(arena);
}
constexpr auto BroadcastToPlayersRequest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(BroadcastToPlayersRequest, _impl_.session_list_) +
          decltype(BroadcastToPlayersRequest::_impl_.session_list_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(BroadcastToPlayersRequest), alignof(BroadcastToPlayersRequest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&BroadcastToPlayersRequest::PlacementNew_,
                                 sizeof(BroadcastToPlayersRequest),
                                 alignof(BroadcastToPlayersRequest));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull BroadcastToPlayersRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_BroadcastToPlayersRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &BroadcastToPlayersRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<BroadcastToPlayersRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &BroadcastToPlayersRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<BroadcastToPlayersRequest>(), &BroadcastToPlayersRequest::ByteSizeLong,
            &BroadcastToPlayersRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(BroadcastToPlayersRequest, _impl_._cached_size_),
        false,
    },
    &BroadcastToPlayersRequest::kDescriptorMethods,
    &descriptor_table_proto_2fcommon_2fgate_5fservice_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* BroadcastToPlayersRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> BroadcastToPlayersRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BroadcastToPlayersRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::BroadcastToPlayersRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .MessageContent message_content = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(BroadcastToPlayersRequest, _impl_.message_content_)}},
    // repeated uint64 session_list = 1;
    {::_pbi::TcParser::FastV64P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(BroadcastToPlayersRequest, _impl_.session_list_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated uint64 session_list = 1;
    {PROTOBUF_FIELD_OFFSET(BroadcastToPlayersRequest, _impl_.session_list_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt64)},
    // .MessageContent message_content = 2;
    {PROTOBUF_FIELD_OFFSET(BroadcastToPlayersRequest, _impl_.message_content_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::MessageContent>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void BroadcastToPlayersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BroadcastToPlayersRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.message_content_ != nullptr);
    _impl_.message_content_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BroadcastToPlayersRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BroadcastToPlayersRequest& this_ = static_cast<const BroadcastToPlayersRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BroadcastToPlayersRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BroadcastToPlayersRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:BroadcastToPlayersRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated uint64 session_list = 1;
          {
            int byte_size = this_._impl_._session_list_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteUInt64Packed(
                  1, this_._internal_session_list(), byte_size, target);
            }
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .MessageContent message_content = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.message_content_, this_._impl_.message_content_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:BroadcastToPlayersRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BroadcastToPlayersRequest::ByteSizeLong(const MessageLite& base) {
          const BroadcastToPlayersRequest& this_ = static_cast<const BroadcastToPlayersRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BroadcastToPlayersRequest::ByteSizeLong() const {
          const BroadcastToPlayersRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:BroadcastToPlayersRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated uint64 session_list = 1;
            {
              total_size +=
                  ::_pbi::WireFormatLite::UInt64SizeWithPackedTagSize(
                      this_._internal_session_list(), 1,
                      this_._impl_._session_list_cached_byte_size_);
            }
          }
           {
            // .MessageContent message_content = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.message_content_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BroadcastToPlayersRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BroadcastToPlayersRequest*>(&to_msg);
  auto& from = static_cast<const BroadcastToPlayersRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:BroadcastToPlayersRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_session_list()->MergeFrom(from._internal_session_list());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.message_content_ != nullptr);
    if (_this->_impl_.message_content_ == nullptr) {
      _this->_impl_.message_content_ =
          ::google::protobuf::Message::CopyConstruct<::MessageContent>(arena, *from._impl_.message_content_);
    } else {
      _this->_impl_.message_content_->MergeFrom(*from._impl_.message_content_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BroadcastToPlayersRequest::CopyFrom(const BroadcastToPlayersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BroadcastToPlayersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BroadcastToPlayersRequest::InternalSwap(BroadcastToPlayersRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.session_list_.InternalSwap(&other->_impl_.session_list_);
  swap(_impl_.message_content_, other->_impl_.message_content_);
}

::google::protobuf::Metadata BroadcastToPlayersRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

const ::google::protobuf::ServiceDescriptor* GateService::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_proto_2fcommon_2fgate_5fservice_2eproto);
  return file_level_service_descriptors_proto_2fcommon_2fgate_5fservice_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* GateService::GetDescriptor() {
  return descriptor();
}

void GateService::PlayerEnterGameNode(::google::protobuf::RpcController* controller,
                         const ::RegisterGameNodeSessionRequest*, ::RegisterGameNodeSessionResponse*, ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PlayerEnterGameNode() not implemented.");
  done->Run();
}
void GateService::SendMessageToPlayer(::google::protobuf::RpcController* controller,
                         const ::NodeRouteMessageRequest*, ::Empty*, ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendMessageToPlayer() not implemented.");
  done->Run();
}
void GateService::KickSessionByCentre(::google::protobuf::RpcController* controller,
                         const ::KickSessionRequest*, ::Empty*, ::google::protobuf::Closure* done) {
  controller->SetFailed("Method KickSessionByCentre() not implemented.");
  done->Run();
}
void GateService::RouteNodeMessage(::google::protobuf::RpcController* controller,
                         const ::RouteMessageRequest*, ::RouteMessageResponse*, ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RouteNodeMessage() not implemented.");
  done->Run();
}
void GateService::RoutePlayerMessage(::google::protobuf::RpcController* controller,
                         const ::RoutePlayerMessageRequest*, ::RoutePlayerMessageResponse*, ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RoutePlayerMessage() not implemented.");
  done->Run();
}
void GateService::BroadcastToPlayers(::google::protobuf::RpcController* controller,
                         const ::BroadcastToPlayersRequest*, ::Empty*, ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BroadcastToPlayers() not implemented.");
  done->Run();
}

void GateService::CallMethod(
    const ::google::protobuf::MethodDescriptor* method,
    ::google::protobuf::RpcController* controller,
    const ::google::protobuf::Message* request,
    ::google::protobuf::Message* response, ::google::protobuf::Closure* done) {
  ABSL_DCHECK_EQ(method->service(), file_level_service_descriptors_proto_2fcommon_2fgate_5fservice_2eproto[0]);
  switch (method->index()) {
    case 0:
      this->PlayerEnterGameNode(controller,
                   ::google::protobuf::DownCastMessage<::RegisterGameNodeSessionRequest>(request),
                   ::google::protobuf::DownCastMessage<::RegisterGameNodeSessionResponse>(response),
                   done);
      break;
    case 1:
      this->SendMessageToPlayer(controller,
                   ::google::protobuf::DownCastMessage<::NodeRouteMessageRequest>(request),
                   ::google::protobuf::DownCastMessage<::Empty>(response),
                   done);
      break;
    case 2:
      this->KickSessionByCentre(controller,
                   ::google::protobuf::DownCastMessage<::KickSessionRequest>(request),
                   ::google::protobuf::DownCastMessage<::Empty>(response),
                   done);
      break;
    case 3:
      this->RouteNodeMessage(controller,
                   ::google::protobuf::DownCastMessage<::RouteMessageRequest>(request),
                   ::google::protobuf::DownCastMessage<::RouteMessageResponse>(response),
                   done);
      break;
    case 4:
      this->RoutePlayerMessage(controller,
                   ::google::protobuf::DownCastMessage<::RoutePlayerMessageRequest>(request),
                   ::google::protobuf::DownCastMessage<::RoutePlayerMessageResponse>(response),
                   done);
      break;
    case 5:
      this->BroadcastToPlayers(controller,
                   ::google::protobuf::DownCastMessage<::BroadcastToPlayersRequest>(request),
                   ::google::protobuf::DownCastMessage<::Empty>(response),
                   done);
      break;

    default:
      ABSL_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& GateService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  ABSL_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
    case 0:
      return ::RegisterGameNodeSessionRequest::default_instance();
    case 1:
      return ::NodeRouteMessageRequest::default_instance();
    case 2:
      return ::KickSessionRequest::default_instance();
    case 3:
      return ::RouteMessageRequest::default_instance();
    case 4:
      return ::RoutePlayerMessageRequest::default_instance();
    case 5:
      return ::BroadcastToPlayersRequest::default_instance();

    default:
      ABSL_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
                  ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& GateService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  ABSL_DCHECK_EQ(method->service(), descriptor());
  switch (method->index()) {
    case 0:
      return ::RegisterGameNodeSessionResponse::default_instance();
    case 1:
      return ::Empty::default_instance();
    case 2:
      return ::Empty::default_instance();
    case 3:
      return ::RouteMessageResponse::default_instance();
    case 4:
      return ::RoutePlayerMessageResponse::default_instance();
    case 5:
      return ::Empty::default_instance();

    default:
      ABSL_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
                  ->GetPrototype(method->output_type());
  }
}

GateService_Stub::GateService_Stub(::google::protobuf::RpcChannel* channel)
    : channel_(channel), owns_channel_(false) {}

GateService_Stub::GateService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
    : channel_(channel),
      owns_channel_(ownership ==
                    ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}

GateService_Stub::~GateService_Stub() {
  if (owns_channel_) delete channel_;
}

void GateService_Stub::PlayerEnterGameNode(::google::protobuf::RpcController* controller,
                              const ::RegisterGameNodeSessionRequest* request,
                              ::RegisterGameNodeSessionResponse* response, ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0), controller,
                       request, response, done);
}
void GateService_Stub::SendMessageToPlayer(::google::protobuf::RpcController* controller,
                              const ::NodeRouteMessageRequest* request,
                              ::Empty* response, ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1), controller,
                       request, response, done);
}
void GateService_Stub::KickSessionByCentre(::google::protobuf::RpcController* controller,
                              const ::KickSessionRequest* request,
                              ::Empty* response, ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2), controller,
                       request, response, done);
}
void GateService_Stub::RouteNodeMessage(::google::protobuf::RpcController* controller,
                              const ::RouteMessageRequest* request,
                              ::RouteMessageResponse* response, ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3), controller,
                       request, response, done);
}
void GateService_Stub::RoutePlayerMessage(::google::protobuf::RpcController* controller,
                              const ::RoutePlayerMessageRequest* request,
                              ::RoutePlayerMessageResponse* response, ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4), controller,
                       request, response, done);
}
void GateService_Stub::BroadcastToPlayers(::google::protobuf::RpcController* controller,
                              const ::BroadcastToPlayersRequest* request,
                              ::Empty* response, ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5), controller,
                       request, response, done);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_proto_2fcommon_2fgate_5fservice_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
