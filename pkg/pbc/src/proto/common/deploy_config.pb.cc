// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/common/deploy_config.proto
// Protobuf C++ Version: 5.26.1

#include "proto/common/deploy_config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr GameConfigInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : mq_topics_{},
        access_point_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        access_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        access_secret_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        zone_id_{0u},
        lobby_id_{0u},
        loglevel_{0u},
        server_type_{0u},
        message_body_size_{0u},
        total_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameConfigInfo::GameConfigInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GameConfigInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameConfigInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameConfigInfoDefaultTypeInternal() {}
  union {
    GameConfigInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameConfigInfoDefaultTypeInternal _GameConfigInfo_default_instance_;

inline constexpr ConnetionParam::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        db_host_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        db_user_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        db_password_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        db_dbname_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        port_{0u},
        db_port_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ConnetionParam::ConnetionParam(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ConnetionParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnetionParamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnetionParamDefaultTypeInternal() {}
  union {
    ConnetionParam _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnetionParamDefaultTypeInternal _ConnetionParam_default_instance_;
static ::_pb::Metadata file_level_metadata_proto_2fcommon_2fdeploy_5fconfig_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_proto_2fcommon_2fdeploy_5fconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_proto_2fcommon_2fdeploy_5fconfig_2eproto = nullptr;
const ::uint32_t
    TableStruct_proto_2fcommon_2fdeploy_5fconfig_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ConnetionParam, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::ConnetionParam, _impl_.ip_),
        PROTOBUF_FIELD_OFFSET(::ConnetionParam, _impl_.port_),
        PROTOBUF_FIELD_OFFSET(::ConnetionParam, _impl_.db_host_),
        PROTOBUF_FIELD_OFFSET(::ConnetionParam, _impl_.db_user_),
        PROTOBUF_FIELD_OFFSET(::ConnetionParam, _impl_.db_password_),
        PROTOBUF_FIELD_OFFSET(::ConnetionParam, _impl_.db_port_),
        PROTOBUF_FIELD_OFFSET(::ConnetionParam, _impl_.db_dbname_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::GameConfigInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::GameConfigInfo, _impl_.zone_id_),
        PROTOBUF_FIELD_OFFSET(::GameConfigInfo, _impl_.lobby_id_),
        PROTOBUF_FIELD_OFFSET(::GameConfigInfo, _impl_.loglevel_),
        PROTOBUF_FIELD_OFFSET(::GameConfigInfo, _impl_.server_type_),
        PROTOBUF_FIELD_OFFSET(::GameConfigInfo, _impl_.mq_topics_),
        PROTOBUF_FIELD_OFFSET(::GameConfigInfo, _impl_.access_point_),
        PROTOBUF_FIELD_OFFSET(::GameConfigInfo, _impl_.message_body_size_),
        PROTOBUF_FIELD_OFFSET(::GameConfigInfo, _impl_.total_),
        PROTOBUF_FIELD_OFFSET(::GameConfigInfo, _impl_.access_key_),
        PROTOBUF_FIELD_OFFSET(::GameConfigInfo, _impl_.access_secret_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::ConnetionParam)},
        {15, -1, -1, sizeof(::GameConfigInfo)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_ConnetionParam_default_instance_._instance,
    &::_GameConfigInfo_default_instance_._instance,
};
const char descriptor_table_protodef_proto_2fcommon_2fdeploy_5fconfig_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n proto/common/deploy_config.proto\"\205\001\n\016C"
    "onnetionParam\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\022"
    "\017\n\007db_host\030\003 \001(\t\022\017\n\007db_user\030\004 \001(\t\022\023\n\013db_"
    "password\030\005 \001(\t\022\017\n\007db_port\030\006 \001(\r\022\021\n\tdb_db"
    "name\030\007 \001(\t\"\330\001\n\016GameConfigInfo\022\017\n\007zone_id"
    "\030\001 \001(\r\022\020\n\010lobby_id\030\002 \001(\r\022\020\n\010loglevel\030\003 \001"
    "(\r\022\023\n\013server_type\030\004 \001(\r\022\021\n\tmq_topics\030\005 \003"
    "(\t\022\024\n\014access_point\030\006 \001(\t\022\031\n\021message_body"
    "_size\030\007 \001(\r\022\r\n\005total\030\010 \001(\r\022\022\n\naccess_key"
    "\030\t \001(\t\022\025\n\raccess_secret\030\n \001(\tB\tZ\007pb/game"
    "b\006proto3"
};
static ::absl::once_flag descriptor_table_proto_2fcommon_2fdeploy_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fcommon_2fdeploy_5fconfig_2eproto = {
    false,
    false,
    408,
    descriptor_table_protodef_proto_2fcommon_2fdeploy_5fconfig_2eproto,
    "proto/common/deploy_config.proto",
    &descriptor_table_proto_2fcommon_2fdeploy_5fconfig_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_proto_2fcommon_2fdeploy_5fconfig_2eproto::offsets,
    file_level_metadata_proto_2fcommon_2fdeploy_5fconfig_2eproto,
    file_level_enum_descriptors_proto_2fcommon_2fdeploy_5fconfig_2eproto,
    file_level_service_descriptors_proto_2fcommon_2fdeploy_5fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fcommon_2fdeploy_5fconfig_2eproto_getter() {
  return &descriptor_table_proto_2fcommon_2fdeploy_5fconfig_2eproto;
}
// ===================================================================

class ConnetionParam::_Internal {
 public:
};

ConnetionParam::ConnetionParam(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ConnetionParam)
}
inline PROTOBUF_NDEBUG_INLINE ConnetionParam::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : ip_(arena, from.ip_),
        db_host_(arena, from.db_host_),
        db_user_(arena, from.db_user_),
        db_password_(arena, from.db_password_),
        db_dbname_(arena, from.db_dbname_),
        _cached_size_{0} {}

ConnetionParam::ConnetionParam(
    ::google::protobuf::Arena* arena,
    const ConnetionParam& from)
    : ::google::protobuf::Message(arena) {
  ConnetionParam* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, port_),
           offsetof(Impl_, db_port_) -
               offsetof(Impl_, port_) +
               sizeof(Impl_::db_port_));

  // @@protoc_insertion_point(copy_constructor:ConnetionParam)
}
inline PROTOBUF_NDEBUG_INLINE ConnetionParam::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : ip_(arena),
        db_host_(arena),
        db_user_(arena),
        db_password_(arena),
        db_dbname_(arena),
        _cached_size_{0} {}

inline void ConnetionParam::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_),
           0,
           offsetof(Impl_, db_port_) -
               offsetof(Impl_, port_) +
               sizeof(Impl_::db_port_));
}
ConnetionParam::~ConnetionParam() {
  // @@protoc_insertion_point(destructor:ConnetionParam)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ConnetionParam::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.ip_.Destroy();
  _impl_.db_host_.Destroy();
  _impl_.db_user_.Destroy();
  _impl_.db_password_.Destroy();
  _impl_.db_dbname_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ConnetionParam::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(ConnetionParam, _impl_._cached_size_),
              false,
          },
          &ConnetionParam::MergeImpl,
          &ConnetionParam::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void ConnetionParam::Clear() {
// @@protoc_insertion_point(message_clear_start:ConnetionParam)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.ClearToEmpty();
  _impl_.db_host_.ClearToEmpty();
  _impl_.db_user_.ClearToEmpty();
  _impl_.db_password_.ClearToEmpty();
  _impl_.db_dbname_.ClearToEmpty();
  ::memset(&_impl_.port_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.db_port_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.db_port_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ConnetionParam::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 59, 2> ConnetionParam::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ConnetionParam_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ConnetionParam>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string ip = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ConnetionParam, _impl_.ip_)}},
    // uint32 port = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConnetionParam, _impl_.port_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ConnetionParam, _impl_.port_)}},
    // string db_host = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ConnetionParam, _impl_.db_host_)}},
    // string db_user = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ConnetionParam, _impl_.db_user_)}},
    // string db_password = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ConnetionParam, _impl_.db_password_)}},
    // uint32 db_port = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConnetionParam, _impl_.db_port_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(ConnetionParam, _impl_.db_port_)}},
    // string db_dbname = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(ConnetionParam, _impl_.db_dbname_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string ip = 1;
    {PROTOBUF_FIELD_OFFSET(ConnetionParam, _impl_.ip_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 port = 2;
    {PROTOBUF_FIELD_OFFSET(ConnetionParam, _impl_.port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string db_host = 3;
    {PROTOBUF_FIELD_OFFSET(ConnetionParam, _impl_.db_host_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string db_user = 4;
    {PROTOBUF_FIELD_OFFSET(ConnetionParam, _impl_.db_user_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string db_password = 5;
    {PROTOBUF_FIELD_OFFSET(ConnetionParam, _impl_.db_password_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 db_port = 6;
    {PROTOBUF_FIELD_OFFSET(ConnetionParam, _impl_.db_port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string db_dbname = 7;
    {PROTOBUF_FIELD_OFFSET(ConnetionParam, _impl_.db_dbname_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\16\2\0\7\7\13\0\11"
    "ConnetionParam"
    "ip"
    "db_host"
    "db_user"
    "db_password"
    "db_dbname"
  }},
};

::uint8_t* ConnetionParam::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConnetionParam)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    const std::string& _s = this->_internal_ip();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ConnetionParam.ip");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_port(), target);
  }

  // string db_host = 3;
  if (!this->_internal_db_host().empty()) {
    const std::string& _s = this->_internal_db_host();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ConnetionParam.db_host");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string db_user = 4;
  if (!this->_internal_db_user().empty()) {
    const std::string& _s = this->_internal_db_user();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ConnetionParam.db_user");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string db_password = 5;
  if (!this->_internal_db_password().empty()) {
    const std::string& _s = this->_internal_db_password();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ConnetionParam.db_password");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // uint32 db_port = 6;
  if (this->_internal_db_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_db_port(), target);
  }

  // string db_dbname = 7;
  if (!this->_internal_db_dbname().empty()) {
    const std::string& _s = this->_internal_db_dbname();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ConnetionParam.db_dbname");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnetionParam)
  return target;
}

::size_t ConnetionParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConnetionParam)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ip());
  }

  // string db_host = 3;
  if (!this->_internal_db_host().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_db_host());
  }

  // string db_user = 4;
  if (!this->_internal_db_user().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_db_user());
  }

  // string db_password = 5;
  if (!this->_internal_db_password().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_db_password());
  }

  // string db_dbname = 7;
  if (!this->_internal_db_dbname().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_db_dbname());
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_port());
  }

  // uint32 db_port = 6;
  if (this->_internal_db_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_db_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ConnetionParam::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConnetionParam*>(&to_msg);
  auto& from = static_cast<const ConnetionParam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ConnetionParam)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (!from._internal_db_host().empty()) {
    _this->_internal_set_db_host(from._internal_db_host());
  }
  if (!from._internal_db_user().empty()) {
    _this->_internal_set_db_user(from._internal_db_user());
  }
  if (!from._internal_db_password().empty()) {
    _this->_internal_set_db_password(from._internal_db_password());
  }
  if (!from._internal_db_dbname().empty()) {
    _this->_internal_set_db_dbname(from._internal_db_dbname());
  }
  if (from._internal_port() != 0) {
    _this->_impl_.port_ = from._impl_.port_;
  }
  if (from._internal_db_port() != 0) {
    _this->_impl_.db_port_ = from._impl_.db_port_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConnetionParam::CopyFrom(const ConnetionParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConnetionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ConnetionParam::IsInitialized() const {
  return true;
}

void ConnetionParam::InternalSwap(ConnetionParam* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, &other->_impl_.ip_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.db_host_, &other->_impl_.db_host_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.db_user_, &other->_impl_.db_user_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.db_password_, &other->_impl_.db_password_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.db_dbname_, &other->_impl_.db_dbname_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnetionParam, _impl_.db_port_)
      + sizeof(ConnetionParam::_impl_.db_port_)
      - PROTOBUF_FIELD_OFFSET(ConnetionParam, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::google::protobuf::Metadata ConnetionParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_proto_2fcommon_2fdeploy_5fconfig_2eproto_getter,
                                   &descriptor_table_proto_2fcommon_2fdeploy_5fconfig_2eproto_once,
                                   file_level_metadata_proto_2fcommon_2fdeploy_5fconfig_2eproto[0]);
}
// ===================================================================

class GameConfigInfo::_Internal {
 public:
};

GameConfigInfo::GameConfigInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameConfigInfo)
}
inline PROTOBUF_NDEBUG_INLINE GameConfigInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : mq_topics_{visibility, arena, from.mq_topics_},
        access_point_(arena, from.access_point_),
        access_key_(arena, from.access_key_),
        access_secret_(arena, from.access_secret_),
        _cached_size_{0} {}

GameConfigInfo::GameConfigInfo(
    ::google::protobuf::Arena* arena,
    const GameConfigInfo& from)
    : ::google::protobuf::Message(arena) {
  GameConfigInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, zone_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, zone_id_),
           offsetof(Impl_, total_) -
               offsetof(Impl_, zone_id_) +
               sizeof(Impl_::total_));

  // @@protoc_insertion_point(copy_constructor:GameConfigInfo)
}
inline PROTOBUF_NDEBUG_INLINE GameConfigInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : mq_topics_{visibility, arena},
        access_point_(arena),
        access_key_(arena),
        access_secret_(arena),
        _cached_size_{0} {}

inline void GameConfigInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, zone_id_),
           0,
           offsetof(Impl_, total_) -
               offsetof(Impl_, zone_id_) +
               sizeof(Impl_::total_));
}
GameConfigInfo::~GameConfigInfo() {
  // @@protoc_insertion_point(destructor:GameConfigInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameConfigInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.access_point_.Destroy();
  _impl_.access_key_.Destroy();
  _impl_.access_secret_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
GameConfigInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_._cached_size_),
              false,
          },
          &GameConfigInfo::MergeImpl,
          &GameConfigInfo::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void GameConfigInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GameConfigInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mq_topics_.Clear();
  _impl_.access_point_.ClearToEmpty();
  _impl_.access_key_.ClearToEmpty();
  _impl_.access_secret_.ClearToEmpty();
  ::memset(&_impl_.zone_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.total_) -
      reinterpret_cast<char*>(&_impl_.zone_id_)) + sizeof(_impl_.total_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GameConfigInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 75, 2> GameConfigInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GameConfigInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameConfigInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 zone_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameConfigInfo, _impl_.zone_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.zone_id_)}},
    // uint32 lobby_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameConfigInfo, _impl_.lobby_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.lobby_id_)}},
    // uint32 loglevel = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameConfigInfo, _impl_.loglevel_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.loglevel_)}},
    // uint32 server_type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameConfigInfo, _impl_.server_type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.server_type_)}},
    // repeated string mq_topics = 5;
    {::_pbi::TcParser::FastUR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.mq_topics_)}},
    // string access_point = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.access_point_)}},
    // uint32 message_body_size = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameConfigInfo, _impl_.message_body_size_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.message_body_size_)}},
    // uint32 total = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameConfigInfo, _impl_.total_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.total_)}},
    // string access_key = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.access_key_)}},
    // string access_secret = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.access_secret_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 zone_id = 1;
    {PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.zone_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 lobby_id = 2;
    {PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.lobby_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 loglevel = 3;
    {PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.loglevel_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 server_type = 4;
    {PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.server_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated string mq_topics = 5;
    {PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.mq_topics_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string access_point = 6;
    {PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.access_point_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 message_body_size = 7;
    {PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.message_body_size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 total = 8;
    {PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.total_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string access_key = 9;
    {PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.access_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string access_secret = 10;
    {PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.access_secret_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\16\0\0\0\0\11\14\0\0\12\15\0\0\0\0\0"
    "GameConfigInfo"
    "mq_topics"
    "access_point"
    "access_key"
    "access_secret"
  }},
};

::uint8_t* GameConfigInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameConfigInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 zone_id = 1;
  if (this->_internal_zone_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_zone_id(), target);
  }

  // uint32 lobby_id = 2;
  if (this->_internal_lobby_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_lobby_id(), target);
  }

  // uint32 loglevel = 3;
  if (this->_internal_loglevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_loglevel(), target);
  }

  // uint32 server_type = 4;
  if (this->_internal_server_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_server_type(), target);
  }

  // repeated string mq_topics = 5;
  for (int i = 0, n = this->_internal_mq_topics_size(); i < n; ++i) {
    const auto& s = this->_internal_mq_topics().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "GameConfigInfo.mq_topics");
    target = stream->WriteString(5, s, target);
  }

  // string access_point = 6;
  if (!this->_internal_access_point().empty()) {
    const std::string& _s = this->_internal_access_point();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "GameConfigInfo.access_point");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // uint32 message_body_size = 7;
  if (this->_internal_message_body_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_message_body_size(), target);
  }

  // uint32 total = 8;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_total(), target);
  }

  // string access_key = 9;
  if (!this->_internal_access_key().empty()) {
    const std::string& _s = this->_internal_access_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "GameConfigInfo.access_key");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // string access_secret = 10;
  if (!this->_internal_access_secret().empty()) {
    const std::string& _s = this->_internal_access_secret();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "GameConfigInfo.access_secret");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameConfigInfo)
  return target;
}

::size_t GameConfigInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameConfigInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string mq_topics = 5;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_mq_topics().size());
  for (int i = 0, n = _internal_mq_topics().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_mq_topics().Get(i));
  }
  // string access_point = 6;
  if (!this->_internal_access_point().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_access_point());
  }

  // string access_key = 9;
  if (!this->_internal_access_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_access_key());
  }

  // string access_secret = 10;
  if (!this->_internal_access_secret().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_access_secret());
  }

  // uint32 zone_id = 1;
  if (this->_internal_zone_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_zone_id());
  }

  // uint32 lobby_id = 2;
  if (this->_internal_lobby_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_lobby_id());
  }

  // uint32 loglevel = 3;
  if (this->_internal_loglevel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_loglevel());
  }

  // uint32 server_type = 4;
  if (this->_internal_server_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_server_type());
  }

  // uint32 message_body_size = 7;
  if (this->_internal_message_body_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_message_body_size());
  }

  // uint32 total = 8;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void GameConfigInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameConfigInfo*>(&to_msg);
  auto& from = static_cast<const GameConfigInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameConfigInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_mq_topics()->MergeFrom(from._internal_mq_topics());
  if (!from._internal_access_point().empty()) {
    _this->_internal_set_access_point(from._internal_access_point());
  }
  if (!from._internal_access_key().empty()) {
    _this->_internal_set_access_key(from._internal_access_key());
  }
  if (!from._internal_access_secret().empty()) {
    _this->_internal_set_access_secret(from._internal_access_secret());
  }
  if (from._internal_zone_id() != 0) {
    _this->_impl_.zone_id_ = from._impl_.zone_id_;
  }
  if (from._internal_lobby_id() != 0) {
    _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
  }
  if (from._internal_loglevel() != 0) {
    _this->_impl_.loglevel_ = from._impl_.loglevel_;
  }
  if (from._internal_server_type() != 0) {
    _this->_impl_.server_type_ = from._impl_.server_type_;
  }
  if (from._internal_message_body_size() != 0) {
    _this->_impl_.message_body_size_ = from._impl_.message_body_size_;
  }
  if (from._internal_total() != 0) {
    _this->_impl_.total_ = from._impl_.total_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameConfigInfo::CopyFrom(const GameConfigInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameConfigInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameConfigInfo::IsInitialized() const {
  return true;
}

void GameConfigInfo::InternalSwap(GameConfigInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mq_topics_.InternalSwap(&other->_impl_.mq_topics_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.access_point_, &other->_impl_.access_point_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.access_key_, &other->_impl_.access_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.access_secret_, &other->_impl_.access_secret_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.total_)
      + sizeof(GameConfigInfo::_impl_.total_)
      - PROTOBUF_FIELD_OFFSET(GameConfigInfo, _impl_.zone_id_)>(
          reinterpret_cast<char*>(&_impl_.zone_id_),
          reinterpret_cast<char*>(&other->_impl_.zone_id_));
}

::google::protobuf::Metadata GameConfigInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_proto_2fcommon_2fdeploy_5fconfig_2eproto_getter,
                                   &descriptor_table_proto_2fcommon_2fdeploy_5fconfig_2eproto_once,
                                   file_level_metadata_proto_2fcommon_2fdeploy_5fconfig_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_proto_2fcommon_2fdeploy_5fconfig_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
