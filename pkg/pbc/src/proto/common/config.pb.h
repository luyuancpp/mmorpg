// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/common/config.proto
// Protobuf C++ Version: 5.29.0

#ifndef proto_2fcommon_2fconfig_2eproto_2epb_2eh
#define proto_2fcommon_2fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fcommon_2fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fcommon_2fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proto_2fcommon_2fconfig_2eproto;
class BaseDeployConfig;
struct BaseDeployConfigDefaultTypeInternal;
extern BaseDeployConfigDefaultTypeInternal _BaseDeployConfig_default_instance_;
class GameConfig;
struct GameConfigDefaultTypeInternal;
extern GameConfigDefaultTypeInternal _GameConfig_default_instance_;
class ServiceConfig;
struct ServiceConfigDefaultTypeInternal;
extern ServiceConfigDefaultTypeInternal _ServiceConfig_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class ServiceConfig final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ServiceConfig) */ {
 public:
  inline ServiceConfig() : ServiceConfig(nullptr) {}
  ~ServiceConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ServiceConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ServiceConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServiceConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline ServiceConfig(const ServiceConfig& from) : ServiceConfig(nullptr, from) {}
  inline ServiceConfig(ServiceConfig&& from) noexcept
      : ServiceConfig(nullptr, std::move(from)) {}
  inline ServiceConfig& operator=(const ServiceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceConfig& operator=(ServiceConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceConfig* internal_default_instance() {
    return reinterpret_cast<const ServiceConfig*>(
        &_ServiceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ServiceConfig& a, ServiceConfig& b) { a.Swap(&b); }
  inline void Swap(ServiceConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ServiceConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServiceConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ServiceConfig& from) { ServiceConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ServiceConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ServiceConfig"; }

 protected:
  explicit ServiceConfig(::google::protobuf::Arena* arena);
  ServiceConfig(::google::protobuf::Arena* arena, const ServiceConfig& from);
  ServiceConfig(::google::protobuf::Arena* arena, ServiceConfig&& from) noexcept
      : ServiceConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kUrlFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string url = 2;
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* value);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // @@protoc_insertion_point(class_scope:ServiceConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      29, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ServiceConfig& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr url_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class GameConfig final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:GameConfig) */ {
 public:
  inline GameConfig() : GameConfig(nullptr) {}
  ~GameConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GameConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GameConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameConfig(const GameConfig& from) : GameConfig(nullptr, from) {}
  inline GameConfig(GameConfig&& from) noexcept
      : GameConfig(nullptr, std::move(from)) {}
  inline GameConfig& operator=(const GameConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameConfig& operator=(GameConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameConfig* internal_default_instance() {
    return reinterpret_cast<const GameConfig*>(
        &_GameConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(GameConfig& a, GameConfig& b) { a.Swap(&b); }
  inline void Swap(GameConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GameConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameConfig& from) { GameConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GameConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "GameConfig"; }

 protected:
  explicit GameConfig(::google::protobuf::Arena* arena);
  GameConfig(::google::protobuf::Arena* arena, const GameConfig& from);
  GameConfig(::google::protobuf::Arena* arena, GameConfig&& from) noexcept
      : GameConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSceneNodeTypeFieldNumber = 1,
    kZoneIdFieldNumber = 2,
  };
  // uint32 scene_node_type = 1;
  void clear_scene_node_type() ;
  ::uint32_t scene_node_type() const;
  void set_scene_node_type(::uint32_t value);

  private:
  ::uint32_t _internal_scene_node_type() const;
  void _internal_set_scene_node_type(::uint32_t value);

  public:
  // uint32 zone_id = 2;
  void clear_zone_id() ;
  ::uint32_t zone_id() const;
  void set_zone_id(::uint32_t value);

  private:
  ::uint32_t _internal_zone_id() const;
  void _internal_set_zone_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:GameConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameConfig& from_msg);
    ::uint32_t scene_node_type_;
    ::uint32_t zone_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class BaseDeployConfig final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:BaseDeployConfig) */ {
 public:
  inline BaseDeployConfig() : BaseDeployConfig(nullptr) {}
  ~BaseDeployConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(BaseDeployConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(BaseDeployConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BaseDeployConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline BaseDeployConfig(const BaseDeployConfig& from) : BaseDeployConfig(nullptr, from) {}
  inline BaseDeployConfig(BaseDeployConfig&& from) noexcept
      : BaseDeployConfig(nullptr, std::move(from)) {}
  inline BaseDeployConfig& operator=(const BaseDeployConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseDeployConfig& operator=(BaseDeployConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseDeployConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseDeployConfig* internal_default_instance() {
    return reinterpret_cast<const BaseDeployConfig*>(
        &_BaseDeployConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(BaseDeployConfig& a, BaseDeployConfig& b) { a.Swap(&b); }
  inline void Swap(BaseDeployConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseDeployConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseDeployConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<BaseDeployConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BaseDeployConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BaseDeployConfig& from) { BaseDeployConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(BaseDeployConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "BaseDeployConfig"; }

 protected:
  explicit BaseDeployConfig(::google::protobuf::Arena* arena);
  BaseDeployConfig(::google::protobuf::Arena* arena, const BaseDeployConfig& from);
  BaseDeployConfig(::google::protobuf::Arena* arena, BaseDeployConfig&& from) noexcept
      : BaseDeployConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEtcdHostsFieldNumber = 1,
    kServicesFieldNumber = 3,
    kLogLevelFieldNumber = 2,
  };
  // repeated string etcd_hosts = 1;
  int etcd_hosts_size() const;
  private:
  int _internal_etcd_hosts_size() const;

  public:
  void clear_etcd_hosts() ;
  const std::string& etcd_hosts(int index) const;
  std::string* mutable_etcd_hosts(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_etcd_hosts(int index, Arg_&& value, Args_... args);
  std::string* add_etcd_hosts();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_etcd_hosts(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& etcd_hosts() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_etcd_hosts();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_etcd_hosts() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_etcd_hosts();

  public:
  // repeated .ServiceConfig services = 3;
  int services_size() const;
  private:
  int _internal_services_size() const;

  public:
  void clear_services() ;
  ::ServiceConfig* mutable_services(int index);
  ::google::protobuf::RepeatedPtrField<::ServiceConfig>* mutable_services();

  private:
  const ::google::protobuf::RepeatedPtrField<::ServiceConfig>& _internal_services() const;
  ::google::protobuf::RepeatedPtrField<::ServiceConfig>* _internal_mutable_services();
  public:
  const ::ServiceConfig& services(int index) const;
  ::ServiceConfig* add_services();
  const ::google::protobuf::RepeatedPtrField<::ServiceConfig>& services() const;
  // uint32 log_level = 2;
  void clear_log_level() ;
  ::uint32_t log_level() const;
  void set_log_level(::uint32_t value);

  private:
  ::uint32_t _internal_log_level() const;
  void _internal_set_log_level(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:BaseDeployConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      35, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BaseDeployConfig& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> etcd_hosts_;
    ::google::protobuf::RepeatedPtrField< ::ServiceConfig > services_;
    ::uint32_t log_level_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcommon_2fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ServiceConfig

// string name = 1;
inline void ServiceConfig::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ServiceConfig::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ServiceConfig.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServiceConfig::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ServiceConfig.name)
}
inline std::string* ServiceConfig::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ServiceConfig.name)
  return _s;
}
inline const std::string& ServiceConfig::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void ServiceConfig::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ServiceConfig::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ServiceConfig::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ServiceConfig.name)
  return _impl_.name_.Release();
}
inline void ServiceConfig::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ServiceConfig.name)
}

// string url = 2;
inline void ServiceConfig::clear_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.ClearToEmpty();
}
inline const std::string& ServiceConfig::url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ServiceConfig.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServiceConfig::set_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ServiceConfig.url)
}
inline std::string* ServiceConfig::mutable_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:ServiceConfig.url)
  return _s;
}
inline const std::string& ServiceConfig::_internal_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.url_.Get();
}
inline void ServiceConfig::_internal_set_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.Set(value, GetArena());
}
inline std::string* ServiceConfig::_internal_mutable_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.url_.Mutable( GetArena());
}
inline std::string* ServiceConfig::release_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ServiceConfig.url)
  return _impl_.url_.Release();
}
inline void ServiceConfig::set_allocated_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ServiceConfig.url)
}

// -------------------------------------------------------------------

// BaseDeployConfig

// repeated string etcd_hosts = 1;
inline int BaseDeployConfig::_internal_etcd_hosts_size() const {
  return _internal_etcd_hosts().size();
}
inline int BaseDeployConfig::etcd_hosts_size() const {
  return _internal_etcd_hosts_size();
}
inline void BaseDeployConfig::clear_etcd_hosts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.etcd_hosts_.Clear();
}
inline std::string* BaseDeployConfig::add_etcd_hosts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_etcd_hosts()->Add();
  // @@protoc_insertion_point(field_add_mutable:BaseDeployConfig.etcd_hosts)
  return _s;
}
inline const std::string& BaseDeployConfig::etcd_hosts(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BaseDeployConfig.etcd_hosts)
  return _internal_etcd_hosts().Get(index);
}
inline std::string* BaseDeployConfig::mutable_etcd_hosts(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:BaseDeployConfig.etcd_hosts)
  return _internal_mutable_etcd_hosts()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void BaseDeployConfig::set_etcd_hosts(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_etcd_hosts()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:BaseDeployConfig.etcd_hosts)
}
template <typename Arg_, typename... Args_>
inline void BaseDeployConfig::add_etcd_hosts(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_etcd_hosts(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:BaseDeployConfig.etcd_hosts)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
BaseDeployConfig::etcd_hosts() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:BaseDeployConfig.etcd_hosts)
  return _internal_etcd_hosts();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
BaseDeployConfig::mutable_etcd_hosts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:BaseDeployConfig.etcd_hosts)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_etcd_hosts();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
BaseDeployConfig::_internal_etcd_hosts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.etcd_hosts_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
BaseDeployConfig::_internal_mutable_etcd_hosts() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.etcd_hosts_;
}

// uint32 log_level = 2;
inline void BaseDeployConfig::clear_log_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_level_ = 0u;
}
inline ::uint32_t BaseDeployConfig::log_level() const {
  // @@protoc_insertion_point(field_get:BaseDeployConfig.log_level)
  return _internal_log_level();
}
inline void BaseDeployConfig::set_log_level(::uint32_t value) {
  _internal_set_log_level(value);
  // @@protoc_insertion_point(field_set:BaseDeployConfig.log_level)
}
inline ::uint32_t BaseDeployConfig::_internal_log_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.log_level_;
}
inline void BaseDeployConfig::_internal_set_log_level(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.log_level_ = value;
}

// repeated .ServiceConfig services = 3;
inline int BaseDeployConfig::_internal_services_size() const {
  return _internal_services().size();
}
inline int BaseDeployConfig::services_size() const {
  return _internal_services_size();
}
inline void BaseDeployConfig::clear_services() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.services_.Clear();
}
inline ::ServiceConfig* BaseDeployConfig::mutable_services(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:BaseDeployConfig.services)
  return _internal_mutable_services()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ServiceConfig>* BaseDeployConfig::mutable_services()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:BaseDeployConfig.services)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_services();
}
inline const ::ServiceConfig& BaseDeployConfig::services(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:BaseDeployConfig.services)
  return _internal_services().Get(index);
}
inline ::ServiceConfig* BaseDeployConfig::add_services() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ServiceConfig* _add = _internal_mutable_services()->Add();
  // @@protoc_insertion_point(field_add:BaseDeployConfig.services)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ServiceConfig>& BaseDeployConfig::services() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:BaseDeployConfig.services)
  return _internal_services();
}
inline const ::google::protobuf::RepeatedPtrField<::ServiceConfig>&
BaseDeployConfig::_internal_services() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.services_;
}
inline ::google::protobuf::RepeatedPtrField<::ServiceConfig>*
BaseDeployConfig::_internal_mutable_services() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.services_;
}

// -------------------------------------------------------------------

// GameConfig

// uint32 scene_node_type = 1;
inline void GameConfig::clear_scene_node_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scene_node_type_ = 0u;
}
inline ::uint32_t GameConfig::scene_node_type() const {
  // @@protoc_insertion_point(field_get:GameConfig.scene_node_type)
  return _internal_scene_node_type();
}
inline void GameConfig::set_scene_node_type(::uint32_t value) {
  _internal_set_scene_node_type(value);
  // @@protoc_insertion_point(field_set:GameConfig.scene_node_type)
}
inline ::uint32_t GameConfig::_internal_scene_node_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scene_node_type_;
}
inline void GameConfig::_internal_set_scene_node_type(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scene_node_type_ = value;
}

// uint32 zone_id = 2;
inline void GameConfig::clear_zone_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zone_id_ = 0u;
}
inline ::uint32_t GameConfig::zone_id() const {
  // @@protoc_insertion_point(field_get:GameConfig.zone_id)
  return _internal_zone_id();
}
inline void GameConfig::set_zone_id(::uint32_t value) {
  _internal_set_zone_id(value);
  // @@protoc_insertion_point(field_set:GameConfig.zone_id)
}
inline ::uint32_t GameConfig::_internal_zone_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.zone_id_;
}
inline void GameConfig::_internal_set_zone_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zone_id_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // proto_2fcommon_2fconfig_2eproto_2epb_2eh
