// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/common/db_service.proto
#ifndef GRPC_proto_2fcommon_2fdb_5fservice_2eproto__INCLUDED
#define GRPC_proto_2fcommon_2fdb_5fservice_2eproto__INCLUDED

#include "proto/common/db_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

class AccountDBService final {
 public:
  static constexpr char const* service_full_name() {
    return "AccountDBService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Load2Redis(::grpc::ClientContext* context, const ::LoadAccountRequest& request, ::LoadAccountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LoadAccountResponse>> AsyncLoad2Redis(::grpc::ClientContext* context, const ::LoadAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LoadAccountResponse>>(AsyncLoad2RedisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LoadAccountResponse>> PrepareAsyncLoad2Redis(::grpc::ClientContext* context, const ::LoadAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LoadAccountResponse>>(PrepareAsyncLoad2RedisRaw(context, request, cq));
    }
    virtual ::grpc::Status Save2Redis(::grpc::ClientContext* context, const ::SaveAccountRequest& request, ::SaveAccountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SaveAccountResponse>> AsyncSave2Redis(::grpc::ClientContext* context, const ::SaveAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SaveAccountResponse>>(AsyncSave2RedisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SaveAccountResponse>> PrepareAsyncSave2Redis(::grpc::ClientContext* context, const ::SaveAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SaveAccountResponse>>(PrepareAsyncSave2RedisRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Load2Redis(::grpc::ClientContext* context, const ::LoadAccountRequest* request, ::LoadAccountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Load2Redis(::grpc::ClientContext* context, const ::LoadAccountRequest* request, ::LoadAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Save2Redis(::grpc::ClientContext* context, const ::SaveAccountRequest* request, ::SaveAccountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Save2Redis(::grpc::ClientContext* context, const ::SaveAccountRequest* request, ::SaveAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LoadAccountResponse>* AsyncLoad2RedisRaw(::grpc::ClientContext* context, const ::LoadAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LoadAccountResponse>* PrepareAsyncLoad2RedisRaw(::grpc::ClientContext* context, const ::LoadAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SaveAccountResponse>* AsyncSave2RedisRaw(::grpc::ClientContext* context, const ::SaveAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SaveAccountResponse>* PrepareAsyncSave2RedisRaw(::grpc::ClientContext* context, const ::SaveAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Load2Redis(::grpc::ClientContext* context, const ::LoadAccountRequest& request, ::LoadAccountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LoadAccountResponse>> AsyncLoad2Redis(::grpc::ClientContext* context, const ::LoadAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LoadAccountResponse>>(AsyncLoad2RedisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LoadAccountResponse>> PrepareAsyncLoad2Redis(::grpc::ClientContext* context, const ::LoadAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LoadAccountResponse>>(PrepareAsyncLoad2RedisRaw(context, request, cq));
    }
    ::grpc::Status Save2Redis(::grpc::ClientContext* context, const ::SaveAccountRequest& request, ::SaveAccountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SaveAccountResponse>> AsyncSave2Redis(::grpc::ClientContext* context, const ::SaveAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SaveAccountResponse>>(AsyncSave2RedisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SaveAccountResponse>> PrepareAsyncSave2Redis(::grpc::ClientContext* context, const ::SaveAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SaveAccountResponse>>(PrepareAsyncSave2RedisRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Load2Redis(::grpc::ClientContext* context, const ::LoadAccountRequest* request, ::LoadAccountResponse* response, std::function<void(::grpc::Status)>) override;
      void Load2Redis(::grpc::ClientContext* context, const ::LoadAccountRequest* request, ::LoadAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Save2Redis(::grpc::ClientContext* context, const ::SaveAccountRequest* request, ::SaveAccountResponse* response, std::function<void(::grpc::Status)>) override;
      void Save2Redis(::grpc::ClientContext* context, const ::SaveAccountRequest* request, ::SaveAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::LoadAccountResponse>* AsyncLoad2RedisRaw(::grpc::ClientContext* context, const ::LoadAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::LoadAccountResponse>* PrepareAsyncLoad2RedisRaw(::grpc::ClientContext* context, const ::LoadAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SaveAccountResponse>* AsyncSave2RedisRaw(::grpc::ClientContext* context, const ::SaveAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SaveAccountResponse>* PrepareAsyncSave2RedisRaw(::grpc::ClientContext* context, const ::SaveAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Load2Redis_;
    const ::grpc::internal::RpcMethod rpcmethod_Save2Redis_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Load2Redis(::grpc::ServerContext* context, const ::LoadAccountRequest* request, ::LoadAccountResponse* response);
    virtual ::grpc::Status Save2Redis(::grpc::ServerContext* context, const ::SaveAccountRequest* request, ::SaveAccountResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Load2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Load2Redis() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Load2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Load2Redis(::grpc::ServerContext* /*context*/, const ::LoadAccountRequest* /*request*/, ::LoadAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoad2Redis(::grpc::ServerContext* context, ::LoadAccountRequest* request, ::grpc::ServerAsyncResponseWriter< ::LoadAccountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Save2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Save2Redis() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Save2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Save2Redis(::grpc::ServerContext* /*context*/, const ::SaveAccountRequest* /*request*/, ::SaveAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSave2Redis(::grpc::ServerContext* context, ::SaveAccountRequest* request, ::grpc::ServerAsyncResponseWriter< ::SaveAccountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Load2Redis<WithAsyncMethod_Save2Redis<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Load2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Load2Redis() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::LoadAccountRequest, ::LoadAccountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::LoadAccountRequest* request, ::LoadAccountResponse* response) { return this->Load2Redis(context, request, response); }));}
    void SetMessageAllocatorFor_Load2Redis(
        ::grpc::MessageAllocator< ::LoadAccountRequest, ::LoadAccountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::LoadAccountRequest, ::LoadAccountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Load2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Load2Redis(::grpc::ServerContext* /*context*/, const ::LoadAccountRequest* /*request*/, ::LoadAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Load2Redis(
      ::grpc::CallbackServerContext* /*context*/, const ::LoadAccountRequest* /*request*/, ::LoadAccountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Save2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Save2Redis() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::SaveAccountRequest, ::SaveAccountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::SaveAccountRequest* request, ::SaveAccountResponse* response) { return this->Save2Redis(context, request, response); }));}
    void SetMessageAllocatorFor_Save2Redis(
        ::grpc::MessageAllocator< ::SaveAccountRequest, ::SaveAccountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SaveAccountRequest, ::SaveAccountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Save2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Save2Redis(::grpc::ServerContext* /*context*/, const ::SaveAccountRequest* /*request*/, ::SaveAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Save2Redis(
      ::grpc::CallbackServerContext* /*context*/, const ::SaveAccountRequest* /*request*/, ::SaveAccountResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Load2Redis<WithCallbackMethod_Save2Redis<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Load2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Load2Redis() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Load2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Load2Redis(::grpc::ServerContext* /*context*/, const ::LoadAccountRequest* /*request*/, ::LoadAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Save2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Save2Redis() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Save2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Save2Redis(::grpc::ServerContext* /*context*/, const ::SaveAccountRequest* /*request*/, ::SaveAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Load2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Load2Redis() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Load2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Load2Redis(::grpc::ServerContext* /*context*/, const ::LoadAccountRequest* /*request*/, ::LoadAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoad2Redis(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Save2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Save2Redis() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Save2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Save2Redis(::grpc::ServerContext* /*context*/, const ::SaveAccountRequest* /*request*/, ::SaveAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSave2Redis(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Load2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Load2Redis() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Load2Redis(context, request, response); }));
    }
    ~WithRawCallbackMethod_Load2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Load2Redis(::grpc::ServerContext* /*context*/, const ::LoadAccountRequest* /*request*/, ::LoadAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Load2Redis(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Save2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Save2Redis() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Save2Redis(context, request, response); }));
    }
    ~WithRawCallbackMethod_Save2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Save2Redis(::grpc::ServerContext* /*context*/, const ::SaveAccountRequest* /*request*/, ::SaveAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Save2Redis(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Load2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Load2Redis() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::LoadAccountRequest, ::LoadAccountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::LoadAccountRequest, ::LoadAccountResponse>* streamer) {
                       return this->StreamedLoad2Redis(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Load2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Load2Redis(::grpc::ServerContext* /*context*/, const ::LoadAccountRequest* /*request*/, ::LoadAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoad2Redis(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::LoadAccountRequest,::LoadAccountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Save2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Save2Redis() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SaveAccountRequest, ::SaveAccountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::SaveAccountRequest, ::SaveAccountResponse>* streamer) {
                       return this->StreamedSave2Redis(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Save2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Save2Redis(::grpc::ServerContext* /*context*/, const ::SaveAccountRequest* /*request*/, ::SaveAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSave2Redis(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SaveAccountRequest,::SaveAccountResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Load2Redis<WithStreamedUnaryMethod_Save2Redis<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Load2Redis<WithStreamedUnaryMethod_Save2Redis<Service > > StreamedService;
};

class PlayerDBService final {
 public:
  static constexpr char const* service_full_name() {
    return "PlayerDBService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Load2Redis(::grpc::ClientContext* context, const ::LoadPlayerRequest& request, ::LoadPlayerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LoadPlayerResponse>> AsyncLoad2Redis(::grpc::ClientContext* context, const ::LoadPlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LoadPlayerResponse>>(AsyncLoad2RedisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LoadPlayerResponse>> PrepareAsyncLoad2Redis(::grpc::ClientContext* context, const ::LoadPlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::LoadPlayerResponse>>(PrepareAsyncLoad2RedisRaw(context, request, cq));
    }
    virtual ::grpc::Status Save2Redis(::grpc::ClientContext* context, const ::SavePlayerRequest& request, ::SavePlayerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SavePlayerResponse>> AsyncSave2Redis(::grpc::ClientContext* context, const ::SavePlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SavePlayerResponse>>(AsyncSave2RedisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SavePlayerResponse>> PrepareAsyncSave2Redis(::grpc::ClientContext* context, const ::SavePlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SavePlayerResponse>>(PrepareAsyncSave2RedisRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Load2Redis(::grpc::ClientContext* context, const ::LoadPlayerRequest* request, ::LoadPlayerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Load2Redis(::grpc::ClientContext* context, const ::LoadPlayerRequest* request, ::LoadPlayerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Save2Redis(::grpc::ClientContext* context, const ::SavePlayerRequest* request, ::SavePlayerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Save2Redis(::grpc::ClientContext* context, const ::SavePlayerRequest* request, ::SavePlayerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LoadPlayerResponse>* AsyncLoad2RedisRaw(::grpc::ClientContext* context, const ::LoadPlayerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::LoadPlayerResponse>* PrepareAsyncLoad2RedisRaw(::grpc::ClientContext* context, const ::LoadPlayerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SavePlayerResponse>* AsyncSave2RedisRaw(::grpc::ClientContext* context, const ::SavePlayerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SavePlayerResponse>* PrepareAsyncSave2RedisRaw(::grpc::ClientContext* context, const ::SavePlayerRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Load2Redis(::grpc::ClientContext* context, const ::LoadPlayerRequest& request, ::LoadPlayerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LoadPlayerResponse>> AsyncLoad2Redis(::grpc::ClientContext* context, const ::LoadPlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LoadPlayerResponse>>(AsyncLoad2RedisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LoadPlayerResponse>> PrepareAsyncLoad2Redis(::grpc::ClientContext* context, const ::LoadPlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::LoadPlayerResponse>>(PrepareAsyncLoad2RedisRaw(context, request, cq));
    }
    ::grpc::Status Save2Redis(::grpc::ClientContext* context, const ::SavePlayerRequest& request, ::SavePlayerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SavePlayerResponse>> AsyncSave2Redis(::grpc::ClientContext* context, const ::SavePlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SavePlayerResponse>>(AsyncSave2RedisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SavePlayerResponse>> PrepareAsyncSave2Redis(::grpc::ClientContext* context, const ::SavePlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SavePlayerResponse>>(PrepareAsyncSave2RedisRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Load2Redis(::grpc::ClientContext* context, const ::LoadPlayerRequest* request, ::LoadPlayerResponse* response, std::function<void(::grpc::Status)>) override;
      void Load2Redis(::grpc::ClientContext* context, const ::LoadPlayerRequest* request, ::LoadPlayerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Save2Redis(::grpc::ClientContext* context, const ::SavePlayerRequest* request, ::SavePlayerResponse* response, std::function<void(::grpc::Status)>) override;
      void Save2Redis(::grpc::ClientContext* context, const ::SavePlayerRequest* request, ::SavePlayerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::LoadPlayerResponse>* AsyncLoad2RedisRaw(::grpc::ClientContext* context, const ::LoadPlayerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::LoadPlayerResponse>* PrepareAsyncLoad2RedisRaw(::grpc::ClientContext* context, const ::LoadPlayerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SavePlayerResponse>* AsyncSave2RedisRaw(::grpc::ClientContext* context, const ::SavePlayerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SavePlayerResponse>* PrepareAsyncSave2RedisRaw(::grpc::ClientContext* context, const ::SavePlayerRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Load2Redis_;
    const ::grpc::internal::RpcMethod rpcmethod_Save2Redis_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Load2Redis(::grpc::ServerContext* context, const ::LoadPlayerRequest* request, ::LoadPlayerResponse* response);
    virtual ::grpc::Status Save2Redis(::grpc::ServerContext* context, const ::SavePlayerRequest* request, ::SavePlayerResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Load2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Load2Redis() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Load2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Load2Redis(::grpc::ServerContext* /*context*/, const ::LoadPlayerRequest* /*request*/, ::LoadPlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoad2Redis(::grpc::ServerContext* context, ::LoadPlayerRequest* request, ::grpc::ServerAsyncResponseWriter< ::LoadPlayerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Save2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Save2Redis() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Save2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Save2Redis(::grpc::ServerContext* /*context*/, const ::SavePlayerRequest* /*request*/, ::SavePlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSave2Redis(::grpc::ServerContext* context, ::SavePlayerRequest* request, ::grpc::ServerAsyncResponseWriter< ::SavePlayerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Load2Redis<WithAsyncMethod_Save2Redis<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Load2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Load2Redis() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::LoadPlayerRequest, ::LoadPlayerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::LoadPlayerRequest* request, ::LoadPlayerResponse* response) { return this->Load2Redis(context, request, response); }));}
    void SetMessageAllocatorFor_Load2Redis(
        ::grpc::MessageAllocator< ::LoadPlayerRequest, ::LoadPlayerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::LoadPlayerRequest, ::LoadPlayerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Load2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Load2Redis(::grpc::ServerContext* /*context*/, const ::LoadPlayerRequest* /*request*/, ::LoadPlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Load2Redis(
      ::grpc::CallbackServerContext* /*context*/, const ::LoadPlayerRequest* /*request*/, ::LoadPlayerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Save2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Save2Redis() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::SavePlayerRequest, ::SavePlayerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::SavePlayerRequest* request, ::SavePlayerResponse* response) { return this->Save2Redis(context, request, response); }));}
    void SetMessageAllocatorFor_Save2Redis(
        ::grpc::MessageAllocator< ::SavePlayerRequest, ::SavePlayerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SavePlayerRequest, ::SavePlayerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Save2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Save2Redis(::grpc::ServerContext* /*context*/, const ::SavePlayerRequest* /*request*/, ::SavePlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Save2Redis(
      ::grpc::CallbackServerContext* /*context*/, const ::SavePlayerRequest* /*request*/, ::SavePlayerResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Load2Redis<WithCallbackMethod_Save2Redis<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Load2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Load2Redis() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Load2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Load2Redis(::grpc::ServerContext* /*context*/, const ::LoadPlayerRequest* /*request*/, ::LoadPlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Save2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Save2Redis() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Save2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Save2Redis(::grpc::ServerContext* /*context*/, const ::SavePlayerRequest* /*request*/, ::SavePlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Load2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Load2Redis() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Load2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Load2Redis(::grpc::ServerContext* /*context*/, const ::LoadPlayerRequest* /*request*/, ::LoadPlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoad2Redis(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Save2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Save2Redis() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Save2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Save2Redis(::grpc::ServerContext* /*context*/, const ::SavePlayerRequest* /*request*/, ::SavePlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSave2Redis(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Load2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Load2Redis() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Load2Redis(context, request, response); }));
    }
    ~WithRawCallbackMethod_Load2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Load2Redis(::grpc::ServerContext* /*context*/, const ::LoadPlayerRequest* /*request*/, ::LoadPlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Load2Redis(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Save2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Save2Redis() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Save2Redis(context, request, response); }));
    }
    ~WithRawCallbackMethod_Save2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Save2Redis(::grpc::ServerContext* /*context*/, const ::SavePlayerRequest* /*request*/, ::SavePlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Save2Redis(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Load2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Load2Redis() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::LoadPlayerRequest, ::LoadPlayerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::LoadPlayerRequest, ::LoadPlayerResponse>* streamer) {
                       return this->StreamedLoad2Redis(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Load2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Load2Redis(::grpc::ServerContext* /*context*/, const ::LoadPlayerRequest* /*request*/, ::LoadPlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoad2Redis(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::LoadPlayerRequest,::LoadPlayerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Save2Redis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Save2Redis() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SavePlayerRequest, ::SavePlayerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::SavePlayerRequest, ::SavePlayerResponse>* streamer) {
                       return this->StreamedSave2Redis(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Save2Redis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Save2Redis(::grpc::ServerContext* /*context*/, const ::SavePlayerRequest* /*request*/, ::SavePlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSave2Redis(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SavePlayerRequest,::SavePlayerResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Load2Redis<WithStreamedUnaryMethod_Save2Redis<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Load2Redis<WithStreamedUnaryMethod_Save2Redis<Service > > StreamedService;
};


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_proto_2fcommon_2fdb_5fservice_2eproto__INCLUDED
