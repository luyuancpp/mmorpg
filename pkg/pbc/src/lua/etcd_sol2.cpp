#include "etcd/etcd.pb.h"
#include <sol/sol.hpp>
#include "thread_local/storage_lua.h"
void Pb2sol2etcd()
{
tls_lua_state.new_usertype<ResponseHeader>("ResponseHeader",
"(versionpb.etcd_version_msg)",
[](ResponseHeader& pb) ->decltype(auto){ return pb.(versionpb.etcd_version_msg)();},
"mutable_(versionpb.etcd_version_msg)",
[](ResponseHeader& pb) ->decltype(auto){ return pb.mutable_(versionpb.etcd_version_msg)();},
"cluster_id",
[](ResponseHeader& pb) ->decltype(auto){ return pb.cluster_id();},
"mutable_cluster_id",
[](ResponseHeader& pb) ->decltype(auto){ return pb.mutable_cluster_id();},
"cluster_id",
sol::property(&ResponseHeader::cluster_id, &ResponseHeader::set_cluster_id),
"member_id",
[](ResponseHeader& pb) ->decltype(auto){ return pb.member_id();},
"mutable_member_id",
[](ResponseHeader& pb) ->decltype(auto){ return pb.mutable_member_id();},
"member_id",
sol::property(&ResponseHeader::member_id, &ResponseHeader::set_member_id),
"revision",
[](ResponseHeader& pb) ->decltype(auto){ return pb.revision();},
"mutable_revision",
[](ResponseHeader& pb) ->decltype(auto){ return pb.mutable_revision();},
"unset",
[](ResponseHeader& pb) ->decltype(auto){ return pb.unset();},
"mutable_unset",
[](ResponseHeader& pb) ->decltype(auto){ return pb.mutable_unset();},
"For",
[](ResponseHeader& pb) ->decltype(auto){ return pb.For();},
"mutable_For",
[](ResponseHeader& pb) ->decltype(auto){ return pb.mutable_For();},
"received",
[](ResponseHeader& pb) ->decltype(auto){ return pb.received();},
"mutable_received",
[](ResponseHeader& pb) ->decltype(auto){ return pb.mutable_received();},
"header.revision",
[](ResponseHeader& pb) ->decltype(auto){ return pb.header.revision();},
"mutable_header.revision",
[](ResponseHeader& pb) ->decltype(auto){ return pb.mutable_header.revision();},
"revision",
sol::property(&ResponseHeader::revision, &ResponseHeader::set_revision),
"raft_term",
[](ResponseHeader& pb) ->decltype(auto){ return pb.raft_term();},
"mutable_raft_term",
[](ResponseHeader& pb) ->decltype(auto){ return pb.mutable_raft_term();},
"raft_term",
sol::property(&ResponseHeader::raft_term, &ResponseHeader::set_raft_term),
"DebugString",
&ResponseHeader::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<RangeRequest>("RangeRequest",
"(versionpb.etcd_version_msg)",
[](RangeRequest& pb) ->decltype(auto){ return pb.(versionpb.etcd_version_msg)();},
"mutable_(versionpb.etcd_version_msg)",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_(versionpb.etcd_version_msg)();},
"key",
[](RangeRequest& pb) ->decltype(auto){ return pb.key();},
"mutable_key",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_key();},
"key",
[](RangeRequest& pb) ->decltype(auto){ return pb.key();},
"mutable_key",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_key();},
"range_end",
[](RangeRequest& pb) ->decltype(auto){ return pb.range_end();},
"mutable_range_end",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_range_end();},
"If",
[](RangeRequest& pb) ->decltype(auto){ return pb.If();},
"mutable_If",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_If();},
"If",
[](RangeRequest& pb) ->decltype(auto){ return pb.If();},
"mutable_If",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_If();},
"then",
[](RangeRequest& pb) ->decltype(auto){ return pb.then();},
"mutable_then",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_then();},
"If",
[](RangeRequest& pb) ->decltype(auto){ return pb.If();},
"mutable_If",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_If();},
"range_end",
[](RangeRequest& pb) ->decltype(auto){ return pb.range_end();},
"mutable_range_end",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_range_end();},
"limit",
[](RangeRequest& pb) ->decltype(auto){ return pb.limit();},
"mutable_limit",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_limit();},
"it",
[](RangeRequest& pb) ->decltype(auto){ return pb.it();},
"mutable_it",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_it();},
"limit",
sol::property(&RangeRequest::limit, &RangeRequest::set_limit),
"revision",
[](RangeRequest& pb) ->decltype(auto){ return pb.revision();},
"mutable_revision",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_revision();},
"If",
[](RangeRequest& pb) ->decltype(auto){ return pb.If();},
"mutable_If",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_If();},
"If",
[](RangeRequest& pb) ->decltype(auto){ return pb.If();},
"mutable_If",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_If();},
"revision",
sol::property(&RangeRequest::revision, &RangeRequest::set_revision),
"sort_order",
[](RangeRequest& pb) ->decltype(auto){ return pb.sort_order();},
"mutable_sort_order",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_sort_order();},
"sort_order",
[](RangeRequest& pb) ->decltype(auto){ return pb.sort_order();},
"mutable_sort_order",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_sort_order();},
"sort_target",
[](RangeRequest& pb) ->decltype(auto){ return pb.sort_target();},
"mutable_sort_target",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_sort_target();},
"sort_target",
[](RangeRequest& pb) ->decltype(auto){ return pb.sort_target();},
"mutable_sort_target",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_sort_target();},
"serializable",
[](RangeRequest& pb) ->decltype(auto){ return pb.serializable();},
"mutable_serializable",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_serializable();},
"Range",
[](RangeRequest& pb) ->decltype(auto){ return pb.Range();},
"mutable_Range",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_Range();},
"latency",
[](RangeRequest& pb) ->decltype(auto){ return pb.latency();},
"mutable_latency",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_latency();},
"consensus",
[](RangeRequest& pb) ->decltype(auto){ return pb.consensus();},
"mutable_consensus",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_consensus();},
"a",
[](RangeRequest& pb) ->decltype(auto){ return pb.a();},
"mutable_a",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_a();},
"with",
[](RangeRequest& pb) ->decltype(auto){ return pb.with();},
"mutable_with",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_with();},
"serializable",
sol::property(&RangeRequest::serializable, &RangeRequest::set_serializable),
"keys_only",
[](RangeRequest& pb) ->decltype(auto){ return pb.keys_only();},
"mutable_keys_only",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_keys_only();},
"keys_only",
sol::property(&RangeRequest::keys_only, &RangeRequest::set_keys_only),
"count_only",
[](RangeRequest& pb) ->decltype(auto){ return pb.count_only();},
"mutable_count_only",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_count_only();},
"count_only",
sol::property(&RangeRequest::count_only, &RangeRequest::set_count_only),
"min_mod_revision",
[](RangeRequest& pb) ->decltype(auto){ return pb.min_mod_revision();},
"mutable_min_mod_revision",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_min_mod_revision();},
"lesser",
[](RangeRequest& pb) ->decltype(auto){ return pb.lesser();},
"mutable_lesser",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_lesser();},
"min_mod_revision",
sol::property(&RangeRequest::min_mod_revision, &RangeRequest::set_min_mod_revision),
"max_mod_revision",
[](RangeRequest& pb) ->decltype(auto){ return pb.max_mod_revision();},
"mutable_max_mod_revision",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_max_mod_revision();},
"greater",
[](RangeRequest& pb) ->decltype(auto){ return pb.greater();},
"mutable_greater",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_greater();},
"max_mod_revision",
sol::property(&RangeRequest::max_mod_revision, &RangeRequest::set_max_mod_revision),
"min_create_revision",
[](RangeRequest& pb) ->decltype(auto){ return pb.min_create_revision();},
"mutable_min_create_revision",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_min_create_revision();},
"lesser",
[](RangeRequest& pb) ->decltype(auto){ return pb.lesser();},
"mutable_lesser",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_lesser();},
"min_create_revision",
sol::property(&RangeRequest::min_create_revision, &RangeRequest::set_min_create_revision),
"max_create_revision",
[](RangeRequest& pb) ->decltype(auto){ return pb.max_create_revision();},
"mutable_max_create_revision",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_max_create_revision();},
"greater",
[](RangeRequest& pb) ->decltype(auto){ return pb.greater();},
"mutable_greater",
[](RangeRequest& pb) ->decltype(auto){ return pb.mutable_greater();},
"max_create_revision",
sol::property(&RangeRequest::max_create_revision, &RangeRequest::set_max_create_revision),
"DebugString",
&RangeRequest::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<RangeResponse>("RangeResponse",
"(versionpb.etcd_version_msg)",
[](RangeResponse& pb) ->decltype(auto){ return pb.(versionpb.etcd_version_msg)();},
"mutable_(versionpb.etcd_version_msg)",
[](RangeResponse& pb) ->decltype(auto){ return pb.mutable_(versionpb.etcd_version_msg)();},
"header",
[](RangeResponse& pb) ->decltype(auto){ return pb.header();},
"mutable_header",
[](RangeResponse& pb) ->decltype(auto){ return pb.mutable_header();},
"kvs",
[](RangeResponse& pb) ->decltype(auto){ return pb.kvs();},
"mutable_kvs",
[](RangeResponse& pb) ->decltype(auto){ return pb.mutable_kvs();},
"kvs",
[](RangeResponse& pb) ->decltype(auto){ return pb.kvs();},
"mutable_kvs",
[](RangeResponse& pb) ->decltype(auto){ return pb.mutable_kvs();},
"add_kvs",
&RangeResponse::add_kvs,
"kvs",
[](const RangeResponse& pb, int index) ->decltype(auto){ return pb.kvs(index);},
"mutable_kvs",
[](RangeResponse& pb, int index) ->decltype(auto){ return pb.mutable_kvs(index);},
"kvs_size",
&RangeResponse::kvs_size,
"clear_kvs",
&RangeResponse::clear_kvs,
"more",
[](RangeResponse& pb) ->decltype(auto){ return pb.more();},
"mutable_more",
[](RangeResponse& pb) ->decltype(auto){ return pb.mutable_more();},
"more",
sol::property(&RangeResponse::more, &RangeResponse::set_more),
"count",
[](RangeResponse& pb) ->decltype(auto){ return pb.count();},
"mutable_count",
[](RangeResponse& pb) ->decltype(auto){ return pb.mutable_count();},
"count",
sol::property(&RangeResponse::count, &RangeResponse::set_count),
"DebugString",
&RangeResponse::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<PutRequest>("PutRequest",
"(versionpb.etcd_version_msg)",
[](PutRequest& pb) ->decltype(auto){ return pb.(versionpb.etcd_version_msg)();},
"mutable_(versionpb.etcd_version_msg)",
[](PutRequest& pb) ->decltype(auto){ return pb.mutable_(versionpb.etcd_version_msg)();},
"key",
[](PutRequest& pb) ->decltype(auto){ return pb.key();},
"mutable_key",
[](PutRequest& pb) ->decltype(auto){ return pb.mutable_key();},
"key",
[](PutRequest& pb) ->decltype(auto){ return pb.key();},
"mutable_key",
[](PutRequest& pb) ->decltype(auto){ return pb.mutable_key();},
"value",
[](PutRequest& pb) ->decltype(auto){ return pb.value();},
"mutable_value",
[](PutRequest& pb) ->decltype(auto){ return pb.mutable_value();},
"value",
[](PutRequest& pb) ->decltype(auto){ return pb.value();},
"mutable_value",
[](PutRequest& pb) ->decltype(auto){ return pb.mutable_value();},
"lease",
[](PutRequest& pb) ->decltype(auto){ return pb.lease();},
"mutable_lease",
[](PutRequest& pb) ->decltype(auto){ return pb.mutable_lease();},
"value",
[](PutRequest& pb) ->decltype(auto){ return pb.value();},
"mutable_value",
[](PutRequest& pb) ->decltype(auto){ return pb.mutable_value();},
"lease",
sol::property(&PutRequest::lease, &PutRequest::set_lease),
"If",
[](PutRequest& pb) ->decltype(auto){ return pb.If();},
"mutable_If",
[](PutRequest& pb) ->decltype(auto){ return pb.mutable_If();},
"The",
[](PutRequest& pb) ->decltype(auto){ return pb.The();},
"mutable_The",
[](PutRequest& pb) ->decltype(auto){ return pb.mutable_The();},
"prev_kv",
sol::property(&PutRequest::prev_kv, &PutRequest::set_prev_kv),
"If",
[](PutRequest& pb) ->decltype(auto){ return pb.If();},
"mutable_If",
[](PutRequest& pb) ->decltype(auto){ return pb.mutable_If();},
"Returns",
[](PutRequest& pb) ->decltype(auto){ return pb.Returns();},
"mutable_Returns",
[](PutRequest& pb) ->decltype(auto){ return pb.mutable_Returns();},
"ignore_value",
sol::property(&PutRequest::ignore_value, &PutRequest::set_ignore_value),
"If",
[](PutRequest& pb) ->decltype(auto){ return pb.If();},
"mutable_If",
[](PutRequest& pb) ->decltype(auto){ return pb.mutable_If();},
"Returns",
[](PutRequest& pb) ->decltype(auto){ return pb.Returns();},
"mutable_Returns",
[](PutRequest& pb) ->decltype(auto){ return pb.mutable_Returns();},
"ignore_lease",
sol::property(&PutRequest::ignore_lease, &PutRequest::set_ignore_lease),
"DebugString",
&PutRequest::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<PutResponse>("PutResponse",
"(versionpb.etcd_version_msg)",
[](PutResponse& pb) ->decltype(auto){ return pb.(versionpb.etcd_version_msg)();},
"mutable_(versionpb.etcd_version_msg)",
[](PutResponse& pb) ->decltype(auto){ return pb.mutable_(versionpb.etcd_version_msg)();},
"header",
[](PutResponse& pb) ->decltype(auto){ return pb.header();},
"mutable_header",
[](PutResponse& pb) ->decltype(auto){ return pb.mutable_header();},
"if",
[](PutResponse& pb) ->decltype(auto){ return pb.if();},
"mutable_if",
[](PutResponse& pb) ->decltype(auto){ return pb.mutable_if();},
"prev_kv",
[](PutResponse& pb) ->decltype(auto){ return pb.prev_kv();},
"mutable_prev_kv",
[](PutResponse& pb) ->decltype(auto){ return pb.mutable_prev_kv();},
"DebugString",
&PutResponse::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<DeleteRangeRequest>("DeleteRangeRequest",
"(versionpb.etcd_version_msg)",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.(versionpb.etcd_version_msg)();},
"mutable_(versionpb.etcd_version_msg)",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.mutable_(versionpb.etcd_version_msg)();},
"key",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.key();},
"mutable_key",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.mutable_key();},
"key",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.key();},
"mutable_key",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.mutable_key();},
"range_end",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.range_end();},
"mutable_range_end",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.mutable_range_end();},
"If",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.If();},
"mutable_If",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.mutable_If();},
"If",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.If();},
"mutable_If",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.mutable_If();},
"with",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.with();},
"mutable_with",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.mutable_with();},
"If",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.If();},
"mutable_If",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.mutable_If();},
"range_end",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.range_end();},
"mutable_range_end",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.mutable_range_end();},
"If",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.If();},
"mutable_If",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.mutable_If();},
"The",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.The();},
"mutable_The",
[](DeleteRangeRequest& pb) ->decltype(auto){ return pb.mutable_The();},
"prev_kv",
sol::property(&DeleteRangeRequest::prev_kv, &DeleteRangeRequest::set_prev_kv),
"DebugString",
&DeleteRangeRequest::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<DeleteRangeResponse>("DeleteRangeResponse",
"(versionpb.etcd_version_msg)",
[](DeleteRangeResponse& pb) ->decltype(auto){ return pb.(versionpb.etcd_version_msg)();},
"mutable_(versionpb.etcd_version_msg)",
[](DeleteRangeResponse& pb) ->decltype(auto){ return pb.mutable_(versionpb.etcd_version_msg)();},
"header",
[](DeleteRangeResponse& pb) ->decltype(auto){ return pb.header();},
"mutable_header",
[](DeleteRangeResponse& pb) ->decltype(auto){ return pb.mutable_header();},
"deleted",
[](DeleteRangeResponse& pb) ->decltype(auto){ return pb.deleted();},
"mutable_deleted",
[](DeleteRangeResponse& pb) ->decltype(auto){ return pb.mutable_deleted();},
"deleted",
sol::property(&DeleteRangeResponse::deleted, &DeleteRangeResponse::set_deleted),
"if",
[](DeleteRangeResponse& pb) ->decltype(auto){ return pb.if();},
"mutable_if",
[](DeleteRangeResponse& pb) ->decltype(auto){ return pb.mutable_if();},
"add_prev_kvs",
&DeleteRangeResponse::add_prev_kvs,
"prev_kvs",
[](const DeleteRangeResponse& pb, int index) ->decltype(auto){ return pb.prev_kvs(index);},
"mutable_prev_kvs",
[](DeleteRangeResponse& pb, int index) ->decltype(auto){ return pb.mutable_prev_kvs(index);},
"prev_kvs_size",
&DeleteRangeResponse::prev_kvs_size,
"clear_prev_kvs",
&DeleteRangeResponse::clear_prev_kvs,
"DebugString",
&DeleteRangeResponse::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<RequestOp>("RequestOp",
"(versionpb.etcd_version_msg)",
[](RequestOp& pb) ->decltype(auto){ return pb.(versionpb.etcd_version_msg)();},
"mutable_(versionpb.etcd_version_msg)",
[](RequestOp& pb) ->decltype(auto){ return pb.mutable_(versionpb.etcd_version_msg)();},
"request",
[](RequestOp& pb) ->decltype(auto){ return pb.request();},
"mutable_request",
[](RequestOp& pb) ->decltype(auto){ return pb.mutable_request();},
"request_range",
[](RequestOp& pb) ->decltype(auto){ return pb.request_range();},
"mutable_request_range",
[](RequestOp& pb) ->decltype(auto){ return pb.mutable_request_range();},
"request_put",
[](RequestOp& pb) ->decltype(auto){ return pb.request_put();},
"mutable_request_put",
[](RequestOp& pb) ->decltype(auto){ return pb.mutable_request_put();},
"request_delete_range",
[](RequestOp& pb) ->decltype(auto){ return pb.request_delete_range();},
"mutable_request_delete_range",
[](RequestOp& pb) ->decltype(auto){ return pb.mutable_request_delete_range();},
"request_txn",
[](RequestOp& pb) ->decltype(auto){ return pb.request_txn();},
"mutable_request_txn",
[](RequestOp& pb) ->decltype(auto){ return pb.mutable_request_txn();},
"DebugString",
&RequestOp::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<ResponseOp>("ResponseOp",
"(versionpb.etcd_version_msg)",
[](ResponseOp& pb) ->decltype(auto){ return pb.(versionpb.etcd_version_msg)();},
"mutable_(versionpb.etcd_version_msg)",
[](ResponseOp& pb) ->decltype(auto){ return pb.mutable_(versionpb.etcd_version_msg)();},
"response",
[](ResponseOp& pb) ->decltype(auto){ return pb.response();},
"mutable_response",
[](ResponseOp& pb) ->decltype(auto){ return pb.mutable_response();},
"response_range",
[](ResponseOp& pb) ->decltype(auto){ return pb.response_range();},
"mutable_response_range",
[](ResponseOp& pb) ->decltype(auto){ return pb.mutable_response_range();},
"response_put",
[](ResponseOp& pb) ->decltype(auto){ return pb.response_put();},
"mutable_response_put",
[](ResponseOp& pb) ->decltype(auto){ return pb.mutable_response_put();},
"response_delete_range",
[](ResponseOp& pb) ->decltype(auto){ return pb.response_delete_range();},
"mutable_response_delete_range",
[](ResponseOp& pb) ->decltype(auto){ return pb.mutable_response_delete_range();},
"response_txn",
[](ResponseOp& pb) ->decltype(auto){ return pb.response_txn();},
"mutable_response_txn",
[](ResponseOp& pb) ->decltype(auto){ return pb.mutable_response_txn();},
"DebugString",
&ResponseOp::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<Compare>("Compare",
"(versionpb.etcd_version_msg)",
[](Compare& pb) ->decltype(auto){ return pb.(versionpb.etcd_version_msg)();},
"mutable_(versionpb.etcd_version_msg)",
[](Compare& pb) ->decltype(auto){ return pb.mutable_(versionpb.etcd_version_msg)();},
"result",
[](Compare& pb) ->decltype(auto){ return pb.result();},
"mutable_result",
[](Compare& pb) ->decltype(auto){ return pb.mutable_result();},
"result",
[](Compare& pb) ->decltype(auto){ return pb.result();},
"mutable_result",
[](Compare& pb) ->decltype(auto){ return pb.mutable_result();},
"target",
[](Compare& pb) ->decltype(auto){ return pb.target();},
"mutable_target",
[](Compare& pb) ->decltype(auto){ return pb.mutable_target();},
"target",
[](Compare& pb) ->decltype(auto){ return pb.target();},
"mutable_target",
[](Compare& pb) ->decltype(auto){ return pb.mutable_target();},
"key",
[](Compare& pb) ->decltype(auto){ return pb.key();},
"mutable_key",
[](Compare& pb) ->decltype(auto){ return pb.mutable_key();},
"key",
[](Compare& pb) ->decltype(auto){ return pb.key();},
"mutable_key",
[](Compare& pb) ->decltype(auto){ return pb.mutable_key();},
"version",
[](Compare& pb) ->decltype(auto){ return pb.version();},
"mutable_version",
[](Compare& pb) ->decltype(auto){ return pb.mutable_version();},
"version",
sol::property(&Compare::version, &Compare::set_version),
"create_revision",
[](Compare& pb) ->decltype(auto){ return pb.create_revision();},
"mutable_create_revision",
[](Compare& pb) ->decltype(auto){ return pb.mutable_create_revision();},
"create_revision",
sol::property(&Compare::create_revision, &Compare::set_create_revision),
"mod_revision",
[](Compare& pb) ->decltype(auto){ return pb.mod_revision();},
"mutable_mod_revision",
[](Compare& pb) ->decltype(auto){ return pb.mutable_mod_revision();},
"mod_revision",
sol::property(&Compare::mod_revision, &Compare::set_mod_revision),
"value",
[](Compare& pb) ->decltype(auto){ return pb.value();},
"mutable_value",
[](Compare& pb) ->decltype(auto){ return pb.mutable_value();},
"value",
[](Compare& pb) ->decltype(auto){ return pb.value();},
"mutable_value",
[](Compare& pb) ->decltype(auto){ return pb.mutable_value();},
"lease",
[](Compare& pb) ->decltype(auto){ return pb.lease();},
"mutable_lease",
[](Compare& pb) ->decltype(auto){ return pb.mutable_lease();},
"lease",
sol::property(&Compare::lease, &Compare::set_lease),
"leave",
[](Compare& pb) ->decltype(auto){ return pb.leave();},
"mutable_leave",
[](Compare& pb) ->decltype(auto){ return pb.mutable_leave();},
"DebugString",
&Compare::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<TxnRequest>("TxnRequest",
"(versionpb.etcd_version_msg)",
[](TxnRequest& pb) ->decltype(auto){ return pb.(versionpb.etcd_version_msg)();},
"mutable_(versionpb.etcd_version_msg)",
[](TxnRequest& pb) ->decltype(auto){ return pb.mutable_(versionpb.etcd_version_msg)();},
"compare",
[](TxnRequest& pb) ->decltype(auto){ return pb.compare();},
"mutable_compare",
[](TxnRequest& pb) ->decltype(auto){ return pb.mutable_compare();},
"If",
[](TxnRequest& pb) ->decltype(auto){ return pb.If();},
"mutable_If",
[](TxnRequest& pb) ->decltype(auto){ return pb.mutable_If();},
"and",
[](TxnRequest& pb) ->decltype(auto){ return pb.and();},
"mutable_and",
[](TxnRequest& pb) ->decltype(auto){ return pb.mutable_and();},
"If",
[](TxnRequest& pb) ->decltype(auto){ return pb.If();},
"mutable_If",
[](TxnRequest& pb) ->decltype(auto){ return pb.mutable_If();},
"and",
[](TxnRequest& pb) ->decltype(auto){ return pb.and();},
"mutable_and",
[](TxnRequest& pb) ->decltype(auto){ return pb.mutable_and();},
"add_compare",
&TxnRequest::add_compare,
"compare",
[](const TxnRequest& pb, int index) ->decltype(auto){ return pb.compare(index);},
"mutable_compare",
[](TxnRequest& pb, int index) ->decltype(auto){ return pb.mutable_compare(index);},
"compare_size",
&TxnRequest::compare_size,
"clear_compare",
&TxnRequest::clear_compare,
"success",
[](TxnRequest& pb) ->decltype(auto){ return pb.success();},
"mutable_success",
[](TxnRequest& pb) ->decltype(auto){ return pb.mutable_success();},
"add_success",
&TxnRequest::add_success,
"success",
[](const TxnRequest& pb, int index) ->decltype(auto){ return pb.success(index);},
"mutable_success",
[](TxnRequest& pb, int index) ->decltype(auto){ return pb.mutable_success(index);},
"success_size",
&TxnRequest::success_size,
"clear_success",
&TxnRequest::clear_success,
"failure",
[](TxnRequest& pb) ->decltype(auto){ return pb.failure();},
"mutable_failure",
[](TxnRequest& pb) ->decltype(auto){ return pb.mutable_failure();},
"add_failure",
&TxnRequest::add_failure,
"failure",
[](const TxnRequest& pb, int index) ->decltype(auto){ return pb.failure(index);},
"mutable_failure",
[](TxnRequest& pb, int index) ->decltype(auto){ return pb.mutable_failure(index);},
"failure_size",
&TxnRequest::failure_size,
"clear_failure",
&TxnRequest::clear_failure,
"DebugString",
&TxnRequest::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<TxnResponse>("TxnResponse",
"(versionpb.etcd_version_msg)",
[](TxnResponse& pb) ->decltype(auto){ return pb.(versionpb.etcd_version_msg)();},
"mutable_(versionpb.etcd_version_msg)",
[](TxnResponse& pb) ->decltype(auto){ return pb.mutable_(versionpb.etcd_version_msg)();},
"header",
[](TxnResponse& pb) ->decltype(auto){ return pb.header();},
"mutable_header",
[](TxnResponse& pb) ->decltype(auto){ return pb.mutable_header();},
"succeeded",
[](TxnResponse& pb) ->decltype(auto){ return pb.succeeded();},
"mutable_succeeded",
[](TxnResponse& pb) ->decltype(auto){ return pb.mutable_succeeded();},
"succeeded",
sol::property(&TxnResponse::succeeded, &TxnResponse::set_succeeded),
"responses",
[](TxnResponse& pb) ->decltype(auto){ return pb.responses();},
"mutable_responses",
[](TxnResponse& pb) ->decltype(auto){ return pb.mutable_responses();},
"success",
[](TxnResponse& pb) ->decltype(auto){ return pb.success();},
"mutable_success",
[](TxnResponse& pb) ->decltype(auto){ return pb.mutable_success();},
"add_responses",
&TxnResponse::add_responses,
"responses",
[](const TxnResponse& pb, int index) ->decltype(auto){ return pb.responses(index);},
"mutable_responses",
[](TxnResponse& pb, int index) ->decltype(auto){ return pb.mutable_responses(index);},
"responses_size",
&TxnResponse::responses_size,
"clear_responses",
&TxnResponse::clear_responses,
"DebugString",
&TxnResponse::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<CompactionRequest>("CompactionRequest",
"(versionpb.etcd_version_msg)",
[](CompactionRequest& pb) ->decltype(auto){ return pb.(versionpb.etcd_version_msg)();},
"mutable_(versionpb.etcd_version_msg)",
[](CompactionRequest& pb) ->decltype(auto){ return pb.mutable_(versionpb.etcd_version_msg)();},
"revision",
[](CompactionRequest& pb) ->decltype(auto){ return pb.revision();},
"mutable_revision",
[](CompactionRequest& pb) ->decltype(auto){ return pb.mutable_revision();},
"revision",
sol::property(&CompactionRequest::revision, &CompactionRequest::set_revision),
"physical",
[](CompactionRequest& pb) ->decltype(auto){ return pb.physical();},
"mutable_physical",
[](CompactionRequest& pb) ->decltype(auto){ return pb.mutable_physical();},
"applied",
[](CompactionRequest& pb) ->decltype(auto){ return pb.applied();},
"mutable_applied",
[](CompactionRequest& pb) ->decltype(auto){ return pb.mutable_applied();},
"removed",
[](CompactionRequest& pb) ->decltype(auto){ return pb.removed();},
"mutable_removed",
[](CompactionRequest& pb) ->decltype(auto){ return pb.mutable_removed();},
"physical",
sol::property(&CompactionRequest::physical, &CompactionRequest::set_physical),
"DebugString",
&CompactionRequest::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<CompactionResponse>("CompactionResponse",
"(versionpb.etcd_version_msg)",
[](CompactionResponse& pb) ->decltype(auto){ return pb.(versionpb.etcd_version_msg)();},
"mutable_(versionpb.etcd_version_msg)",
[](CompactionResponse& pb) ->decltype(auto){ return pb.mutable_(versionpb.etcd_version_msg)();},
"header",
[](CompactionResponse& pb) ->decltype(auto){ return pb.header();},
"mutable_header",
[](CompactionResponse& pb) ->decltype(auto){ return pb.mutable_header();},
"DebugString",
&CompactionResponse::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

}
