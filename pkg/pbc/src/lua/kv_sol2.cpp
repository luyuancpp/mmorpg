#include "etcd/kv.pb.h"
#include <sol/sol.hpp>
#include "thread_local/storage_lua.h"
void Pb2sol2kv()
{
tls_lua_state.new_usertype<KeyValue>("KeyValue",
"key",
[](KeyValue& pb) ->decltype(auto){ return pb.key();},
"mutable_key",
[](KeyValue& pb) ->decltype(auto){ return pb.mutable_key();},
"key",
[](KeyValue& pb) ->decltype(auto){ return pb.key();},
"mutable_key",
[](KeyValue& pb) ->decltype(auto){ return pb.mutable_key();},
"create_revision",
[](KeyValue& pb) ->decltype(auto){ return pb.create_revision();},
"mutable_create_revision",
[](KeyValue& pb) ->decltype(auto){ return pb.mutable_create_revision();},
"create_revision",
sol::property(&KeyValue::create_revision, &KeyValue::set_create_revision),
"mod_revision",
[](KeyValue& pb) ->decltype(auto){ return pb.mod_revision();},
"mutable_mod_revision",
[](KeyValue& pb) ->decltype(auto){ return pb.mutable_mod_revision();},
"mod_revision",
sol::property(&KeyValue::mod_revision, &KeyValue::set_mod_revision),
"version",
[](KeyValue& pb) ->decltype(auto){ return pb.version();},
"mutable_version",
[](KeyValue& pb) ->decltype(auto){ return pb.mutable_version();},
"the",
[](KeyValue& pb) ->decltype(auto){ return pb.the();},
"mutable_the",
[](KeyValue& pb) ->decltype(auto){ return pb.mutable_the();},
"increases",
[](KeyValue& pb) ->decltype(auto){ return pb.increases();},
"mutable_increases",
[](KeyValue& pb) ->decltype(auto){ return pb.mutable_increases();},
"version",
sol::property(&KeyValue::version, &KeyValue::set_version),
"value",
[](KeyValue& pb) ->decltype(auto){ return pb.value();},
"mutable_value",
[](KeyValue& pb) ->decltype(auto){ return pb.mutable_value();},
"value",
[](KeyValue& pb) ->decltype(auto){ return pb.value();},
"mutable_value",
[](KeyValue& pb) ->decltype(auto){ return pb.mutable_value();},
"lease",
[](KeyValue& pb) ->decltype(auto){ return pb.lease();},
"mutable_lease",
[](KeyValue& pb) ->decltype(auto){ return pb.mutable_lease();},
"When",
[](KeyValue& pb) ->decltype(auto){ return pb.When();},
"mutable_When",
[](KeyValue& pb) ->decltype(auto){ return pb.mutable_When();},
"If",
[](KeyValue& pb) ->decltype(auto){ return pb.If();},
"mutable_If",
[](KeyValue& pb) ->decltype(auto){ return pb.mutable_If();},
"lease",
sol::property(&KeyValue::lease, &KeyValue::set_lease),
"DebugString",
&KeyValue::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

tls_lua_state.new_usertype<Event>("Event",
"type",
[](Event& pb) ->decltype(auto){ return pb.type();},
"mutable_type",
[](Event& pb) ->decltype(auto){ return pb.mutable_type();},
"new",
[](Event& pb) ->decltype(auto){ return pb.new();},
"mutable_new",
[](Event& pb) ->decltype(auto){ return pb.mutable_new();},
"it",
[](Event& pb) ->decltype(auto){ return pb.it();},
"mutable_it",
[](Event& pb) ->decltype(auto){ return pb.mutable_it();},
"type",
[](Event& pb) ->decltype(auto){ return pb.type();},
"mutable_type",
[](Event& pb) ->decltype(auto){ return pb.mutable_type();},
"kv",
[](Event& pb) ->decltype(auto){ return pb.kv();},
"mutable_kv",
[](Event& pb) ->decltype(auto){ return pb.mutable_kv();},
"A",
[](Event& pb) ->decltype(auto){ return pb.A();},
"mutable_A",
[](Event& pb) ->decltype(auto){ return pb.mutable_A();},
"A",
[](Event& pb) ->decltype(auto){ return pb.A();},
"mutable_A",
[](Event& pb) ->decltype(auto){ return pb.mutable_A();},
"A",
[](Event& pb) ->decltype(auto){ return pb.A();},
"mutable_A",
[](Event& pb) ->decltype(auto){ return pb.mutable_A();},
"its",
[](Event& pb) ->decltype(auto){ return pb.its();},
"mutable_its",
[](Event& pb) ->decltype(auto){ return pb.mutable_its();},
"kv",
[](Event& pb) ->decltype(auto){ return pb.kv();},
"mutable_kv",
[](Event& pb) ->decltype(auto){ return pb.mutable_kv();},
"prev_kv",
[](Event& pb) ->decltype(auto){ return pb.prev_kv();},
"mutable_prev_kv",
[](Event& pb) ->decltype(auto){ return pb.mutable_prev_kv();},
"prev_kv",
[](Event& pb) ->decltype(auto){ return pb.prev_kv();},
"mutable_prev_kv",
[](Event& pb) ->decltype(auto){ return pb.mutable_prev_kv();},
"DebugString",
&Event::DebugString,
sol::base_classes, sol::bases<::google::protobuf::Message>());

}
