// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_config.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_5fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_test_5fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_test_5fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_test_5fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_test_5fconfig_2eproto;
class TestTable;
struct TestTableDefaultTypeInternal;
extern TestTableDefaultTypeInternal _TestTable_default_instance_;
class TestTable_ImmunetagEntry_DoNotUse;
struct TestTable_ImmunetagEntry_DoNotUseDefaultTypeInternal;
extern TestTable_ImmunetagEntry_DoNotUseDefaultTypeInternal _TestTable_ImmunetagEntry_DoNotUse_default_instance_;
class TestTable_TagEntry_DoNotUse;
struct TestTable_TagEntry_DoNotUseDefaultTypeInternal;
extern TestTable_TagEntry_DoNotUseDefaultTypeInternal _TestTable_TagEntry_DoNotUse_default_instance_;
class TestTabledData;
struct TestTabledDataDefaultTypeInternal;
extern TestTabledDataDefaultTypeInternal _TestTabledData_default_instance_;
class immunetag;
struct immunetagDefaultTypeInternal;
extern immunetagDefaultTypeInternal _immunetag_default_instance_;
class tag;
struct tagDefaultTypeInternal;
extern tagDefaultTypeInternal _tag_default_instance_;
class testobj;
struct testobjDefaultTypeInternal;
extern testobjDefaultTypeInternal _testobj_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class testobj final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:testobj) */ {
 public:
  inline testobj() : testobj(nullptr) {}
  ~testobj() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR testobj(
      ::google::protobuf::internal::ConstantInitialized);

  inline testobj(const testobj& from) : testobj(nullptr, from) {}
  inline testobj(testobj&& from) noexcept
      : testobj(nullptr, std::move(from)) {}
  inline testobj& operator=(const testobj& from) {
    CopyFrom(from);
    return *this;
  }
  inline testobj& operator=(testobj&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const testobj& default_instance() {
    return *internal_default_instance();
  }
  static inline const testobj* internal_default_instance() {
    return reinterpret_cast<const testobj*>(
        &_testobj_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(testobj& a, testobj& b) { a.Swap(&b); }
  inline void Swap(testobj* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(testobj* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  testobj* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<testobj>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const testobj& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const testobj& from) { testobj::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(testobj* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "testobj"; }

 protected:
  explicit testobj(::google::protobuf::Arena* arena);
  testobj(::google::protobuf::Arena* arena, const testobj& from);
  testobj(::google::protobuf::Arena* arena, testobj&& from) noexcept
      : testobj(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTestobjKeyFieldNumber = 1,
    kTestobjValueFieldNumber = 2,
  };
  // uint32 testobj_key = 1;
  void clear_testobj_key() ;
  ::uint32_t testobj_key() const;
  void set_testobj_key(::uint32_t value);

  private:
  ::uint32_t _internal_testobj_key() const;
  void _internal_set_testobj_key(::uint32_t value);

  public:
  // uint32 testobj_value = 2;
  void clear_testobj_value() ;
  ::uint32_t testobj_value() const;
  void set_testobj_value(::uint32_t value);

  private:
  ::uint32_t _internal_testobj_value() const;
  void _internal_set_testobj_value(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:testobj)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t testobj_key_;
    ::uint32_t testobj_value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class tag final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tag) */ {
 public:
  inline tag() : tag(nullptr) {}
  ~tag() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR tag(
      ::google::protobuf::internal::ConstantInitialized);

  inline tag(const tag& from) : tag(nullptr, from) {}
  inline tag(tag&& from) noexcept
      : tag(nullptr, std::move(from)) {}
  inline tag& operator=(const tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline tag& operator=(tag&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const tag& default_instance() {
    return *internal_default_instance();
  }
  static inline const tag* internal_default_instance() {
    return reinterpret_cast<const tag*>(
        &_tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(tag& a, tag& b) { a.Swap(&b); }
  inline void Swap(tag* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tag* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  tag* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<tag>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const tag& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const tag& from) { tag::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(tag* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tag"; }

 protected:
  explicit tag(::google::protobuf::Arena* arena);
  tag(::google::protobuf::Arena* arena, const tag& from);
  tag(::google::protobuf::Arena* arena, tag&& from) noexcept
      : tag(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTagKeyFieldNumber = 1,
    kTagValueFieldNumber = 2,
  };
  // string tag_key = 1;
  void clear_tag_key() ;
  const std::string& tag_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag_key(Arg_&& arg, Args_... args);
  std::string* mutable_tag_key();
  PROTOBUF_NODISCARD std::string* release_tag_key();
  void set_allocated_tag_key(std::string* value);

  private:
  const std::string& _internal_tag_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag_key(
      const std::string& value);
  std::string* _internal_mutable_tag_key();

  public:
  // string tag_value = 2;
  void clear_tag_value() ;
  const std::string& tag_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag_value(Arg_&& arg, Args_... args);
  std::string* mutable_tag_value();
  PROTOBUF_NODISCARD std::string* release_tag_value();
  void set_allocated_tag_value(std::string* value);

  private:
  const std::string& _internal_tag_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag_value(
      const std::string& value);
  std::string* _internal_mutable_tag_value();

  public:
  // @@protoc_insertion_point(class_scope:tag)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      28, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr tag_key_;
    ::google::protobuf::internal::ArenaStringPtr tag_value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class immunetag final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:immunetag) */ {
 public:
  inline immunetag() : immunetag(nullptr) {}
  ~immunetag() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR immunetag(
      ::google::protobuf::internal::ConstantInitialized);

  inline immunetag(const immunetag& from) : immunetag(nullptr, from) {}
  inline immunetag(immunetag&& from) noexcept
      : immunetag(nullptr, std::move(from)) {}
  inline immunetag& operator=(const immunetag& from) {
    CopyFrom(from);
    return *this;
  }
  inline immunetag& operator=(immunetag&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const immunetag& default_instance() {
    return *internal_default_instance();
  }
  static inline const immunetag* internal_default_instance() {
    return reinterpret_cast<const immunetag*>(
        &_immunetag_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(immunetag& a, immunetag& b) { a.Swap(&b); }
  inline void Swap(immunetag* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(immunetag* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  immunetag* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<immunetag>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const immunetag& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const immunetag& from) { immunetag::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(immunetag* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "immunetag"; }

 protected:
  explicit immunetag(::google::protobuf::Arena* arena);
  immunetag(::google::protobuf::Arena* arena, const immunetag& from);
  immunetag(::google::protobuf::Arena* arena, immunetag&& from) noexcept
      : immunetag(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kImmunetagKeyFieldNumber = 1,
    kImmunetagValueFieldNumber = 2,
  };
  // string immunetag_key = 1;
  void clear_immunetag_key() ;
  const std::string& immunetag_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_immunetag_key(Arg_&& arg, Args_... args);
  std::string* mutable_immunetag_key();
  PROTOBUF_NODISCARD std::string* release_immunetag_key();
  void set_allocated_immunetag_key(std::string* value);

  private:
  const std::string& _internal_immunetag_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_immunetag_key(
      const std::string& value);
  std::string* _internal_mutable_immunetag_key();

  public:
  // string immunetag_value = 2;
  void clear_immunetag_value() ;
  const std::string& immunetag_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_immunetag_value(Arg_&& arg, Args_... args);
  std::string* mutable_immunetag_value();
  PROTOBUF_NODISCARD std::string* release_immunetag_value();
  void set_allocated_immunetag_value(std::string* value);

  private:
  const std::string& _internal_immunetag_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_immunetag_value(
      const std::string& value);
  std::string* _internal_mutable_immunetag_value();

  public:
  // @@protoc_insertion_point(class_scope:immunetag)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr immunetag_key_;
    ::google::protobuf::internal::ArenaStringPtr immunetag_value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TestTable_TagEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          TestTable_TagEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      TestTable_TagEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  TestTable_TagEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestTable_TagEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit TestTable_TagEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const TestTable_TagEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const TestTable_TagEntry_DoNotUse*>(
        &_TestTable_TagEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "TestTable.TagEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "TestTable.TagEntry.value");
 }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_test_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TestTable_ImmunetagEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          TestTable_ImmunetagEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      TestTable_ImmunetagEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  TestTable_ImmunetagEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestTable_ImmunetagEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit TestTable_ImmunetagEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const TestTable_ImmunetagEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const TestTable_ImmunetagEntry_DoNotUse*>(
        &_TestTable_ImmunetagEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "TestTable.ImmunetagEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "TestTable.ImmunetagEntry.value");
 }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_test_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TestTable final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TestTable) */ {
 public:
  inline TestTable() : TestTable(nullptr) {}
  ~TestTable() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestTable(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestTable(const TestTable& from) : TestTable(nullptr, from) {}
  inline TestTable(TestTable&& from) noexcept
      : TestTable(nullptr, std::move(from)) {}
  inline TestTable& operator=(const TestTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestTable& operator=(TestTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestTable* internal_default_instance() {
    return reinterpret_cast<const TestTable*>(
        &_TestTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(TestTable& a, TestTable& b) { a.Swap(&b); }
  inline void Swap(TestTable* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestTable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestTable* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TestTable>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestTable& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestTable& from) { TestTable::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TestTable* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "TestTable"; }

 protected:
  explicit TestTable(::google::protobuf::Arena* arena);
  TestTable(::google::protobuf::Arena* arena, const TestTable& from);
  TestTable(::google::protobuf::Arena* arena, TestTable&& from) noexcept
      : TestTable(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTagFieldNumber = 2,
    kImmunetagFieldNumber = 3,
    kTestobjFieldNumber = 5,
    kEffectFieldNumber = 6,
    kIdFieldNumber = 1,
    kLevelFieldNumber = 4,
  };
  // map<string, string> tag = 2;
  int tag_size() const;
  private:
  int _internal_tag_size() const;

  public:
  void clear_tag() ;
  const ::google::protobuf::Map<std::string, std::string>& tag() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_tag();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_tag() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_tag();

  public:
  // map<string, string> immunetag = 3;
  int immunetag_size() const;
  private:
  int _internal_immunetag_size() const;

  public:
  void clear_immunetag() ;
  const ::google::protobuf::Map<std::string, std::string>& immunetag() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_immunetag();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_immunetag() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_immunetag();

  public:
  // repeated .testobj testobj = 5;
  int testobj_size() const;
  private:
  int _internal_testobj_size() const;

  public:
  void clear_testobj() ;
  ::testobj* mutable_testobj(int index);
  ::google::protobuf::RepeatedPtrField<::testobj>* mutable_testobj();

  private:
  const ::google::protobuf::RepeatedPtrField<::testobj>& _internal_testobj() const;
  ::google::protobuf::RepeatedPtrField<::testobj>* _internal_mutable_testobj();
  public:
  const ::testobj& testobj(int index) const;
  ::testobj* add_testobj();
  const ::google::protobuf::RepeatedPtrField<::testobj>& testobj() const;
  // repeated uint32 effect = 6;
  int effect_size() const;
  private:
  int _internal_effect_size() const;

  public:
  void clear_effect() ;
  ::uint32_t effect(int index) const;
  void set_effect(int index, ::uint32_t value);
  void add_effect(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& effect() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_effect();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_effect() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_effect();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // uint32 level = 4;
  void clear_level() ;
  ::uint32_t level() const;
  void set_level(::uint32_t value);

  private:
  ::uint32_t _internal_level() const;
  void _internal_set_level(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TestTable)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 3,
      30, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::MapField<TestTable_TagEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        tag_;
    ::google::protobuf::internal::MapField<TestTable_ImmunetagEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        immunetag_;
    ::google::protobuf::RepeatedPtrField< ::testobj > testobj_;
    ::google::protobuf::RepeatedField<::uint32_t> effect_;
    mutable ::google::protobuf::internal::CachedSize _effect_cached_byte_size_;
    ::uint32_t id_;
    ::uint32_t level_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TestTabledData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TestTabledData) */ {
 public:
  inline TestTabledData() : TestTabledData(nullptr) {}
  ~TestTabledData() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestTabledData(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestTabledData(const TestTabledData& from) : TestTabledData(nullptr, from) {}
  inline TestTabledData(TestTabledData&& from) noexcept
      : TestTabledData(nullptr, std::move(from)) {}
  inline TestTabledData& operator=(const TestTabledData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestTabledData& operator=(TestTabledData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestTabledData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestTabledData* internal_default_instance() {
    return reinterpret_cast<const TestTabledData*>(
        &_TestTabledData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(TestTabledData& a, TestTabledData& b) { a.Swap(&b); }
  inline void Swap(TestTabledData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestTabledData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestTabledData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TestTabledData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestTabledData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestTabledData& from) { TestTabledData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TestTabledData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "TestTabledData"; }

 protected:
  explicit TestTabledData(::google::protobuf::Arena* arena);
  TestTabledData(::google::protobuf::Arena* arena, const TestTabledData& from);
  TestTabledData(::google::protobuf::Arena* arena, TestTabledData&& from) noexcept
      : TestTabledData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .TestTable data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  ::TestTable* mutable_data(int index);
  ::google::protobuf::RepeatedPtrField<::TestTable>* mutable_data();

  private:
  const ::google::protobuf::RepeatedPtrField<::TestTable>& _internal_data() const;
  ::google::protobuf::RepeatedPtrField<::TestTable>* _internal_mutable_data();
  public:
  const ::TestTable& data(int index) const;
  ::TestTable* add_data();
  const ::google::protobuf::RepeatedPtrField<::TestTable>& data() const;
  // @@protoc_insertion_point(class_scope:TestTabledData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::TestTable > data_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// tag

// string tag_key = 1;
inline void tag::clear_tag_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tag_key_.ClearToEmpty();
}
inline const std::string& tag::tag_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tag.tag_key)
  return _internal_tag_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void tag::set_tag_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tag_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tag.tag_key)
}
inline std::string* tag::mutable_tag_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tag_key();
  // @@protoc_insertion_point(field_mutable:tag.tag_key)
  return _s;
}
inline const std::string& tag::_internal_tag_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tag_key_.Get();
}
inline void tag::_internal_set_tag_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tag_key_.Set(value, GetArena());
}
inline std::string* tag::_internal_mutable_tag_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.tag_key_.Mutable( GetArena());
}
inline std::string* tag::release_tag_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tag.tag_key)
  return _impl_.tag_key_.Release();
}
inline void tag::set_allocated_tag_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tag_key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tag_key_.IsDefault()) {
          _impl_.tag_key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tag.tag_key)
}

// string tag_value = 2;
inline void tag::clear_tag_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tag_value_.ClearToEmpty();
}
inline const std::string& tag::tag_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tag.tag_value)
  return _internal_tag_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void tag::set_tag_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tag_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tag.tag_value)
}
inline std::string* tag::mutable_tag_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tag_value();
  // @@protoc_insertion_point(field_mutable:tag.tag_value)
  return _s;
}
inline const std::string& tag::_internal_tag_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tag_value_.Get();
}
inline void tag::_internal_set_tag_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tag_value_.Set(value, GetArena());
}
inline std::string* tag::_internal_mutable_tag_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.tag_value_.Mutable( GetArena());
}
inline std::string* tag::release_tag_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tag.tag_value)
  return _impl_.tag_value_.Release();
}
inline void tag::set_allocated_tag_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tag_value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tag_value_.IsDefault()) {
          _impl_.tag_value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tag.tag_value)
}

// -------------------------------------------------------------------

// immunetag

// string immunetag_key = 1;
inline void immunetag::clear_immunetag_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.immunetag_key_.ClearToEmpty();
}
inline const std::string& immunetag::immunetag_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:immunetag.immunetag_key)
  return _internal_immunetag_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void immunetag::set_immunetag_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.immunetag_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:immunetag.immunetag_key)
}
inline std::string* immunetag::mutable_immunetag_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_immunetag_key();
  // @@protoc_insertion_point(field_mutable:immunetag.immunetag_key)
  return _s;
}
inline const std::string& immunetag::_internal_immunetag_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.immunetag_key_.Get();
}
inline void immunetag::_internal_set_immunetag_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.immunetag_key_.Set(value, GetArena());
}
inline std::string* immunetag::_internal_mutable_immunetag_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.immunetag_key_.Mutable( GetArena());
}
inline std::string* immunetag::release_immunetag_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:immunetag.immunetag_key)
  return _impl_.immunetag_key_.Release();
}
inline void immunetag::set_allocated_immunetag_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.immunetag_key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.immunetag_key_.IsDefault()) {
          _impl_.immunetag_key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:immunetag.immunetag_key)
}

// string immunetag_value = 2;
inline void immunetag::clear_immunetag_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.immunetag_value_.ClearToEmpty();
}
inline const std::string& immunetag::immunetag_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:immunetag.immunetag_value)
  return _internal_immunetag_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void immunetag::set_immunetag_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.immunetag_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:immunetag.immunetag_value)
}
inline std::string* immunetag::mutable_immunetag_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_immunetag_value();
  // @@protoc_insertion_point(field_mutable:immunetag.immunetag_value)
  return _s;
}
inline const std::string& immunetag::_internal_immunetag_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.immunetag_value_.Get();
}
inline void immunetag::_internal_set_immunetag_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.immunetag_value_.Set(value, GetArena());
}
inline std::string* immunetag::_internal_mutable_immunetag_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.immunetag_value_.Mutable( GetArena());
}
inline std::string* immunetag::release_immunetag_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:immunetag.immunetag_value)
  return _impl_.immunetag_value_.Release();
}
inline void immunetag::set_allocated_immunetag_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.immunetag_value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.immunetag_value_.IsDefault()) {
          _impl_.immunetag_value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:immunetag.immunetag_value)
}

// -------------------------------------------------------------------

// testobj

// uint32 testobj_key = 1;
inline void testobj::clear_testobj_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.testobj_key_ = 0u;
}
inline ::uint32_t testobj::testobj_key() const {
  // @@protoc_insertion_point(field_get:testobj.testobj_key)
  return _internal_testobj_key();
}
inline void testobj::set_testobj_key(::uint32_t value) {
  _internal_set_testobj_key(value);
  // @@protoc_insertion_point(field_set:testobj.testobj_key)
}
inline ::uint32_t testobj::_internal_testobj_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.testobj_key_;
}
inline void testobj::_internal_set_testobj_key(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.testobj_key_ = value;
}

// uint32 testobj_value = 2;
inline void testobj::clear_testobj_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.testobj_value_ = 0u;
}
inline ::uint32_t testobj::testobj_value() const {
  // @@protoc_insertion_point(field_get:testobj.testobj_value)
  return _internal_testobj_value();
}
inline void testobj::set_testobj_value(::uint32_t value) {
  _internal_set_testobj_value(value);
  // @@protoc_insertion_point(field_set:testobj.testobj_value)
}
inline ::uint32_t testobj::_internal_testobj_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.testobj_value_;
}
inline void testobj::_internal_set_testobj_value(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.testobj_value_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TestTable

// uint32 id = 1;
inline void TestTable::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0u;
}
inline ::uint32_t TestTable::id() const {
  // @@protoc_insertion_point(field_get:TestTable.id)
  return _internal_id();
}
inline void TestTable::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:TestTable.id)
}
inline ::uint32_t TestTable::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void TestTable::_internal_set_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = value;
}

// map<string, string> tag = 2;
inline int TestTable::_internal_tag_size() const {
  return _internal_tag().size();
}
inline int TestTable::tag_size() const {
  return _internal_tag_size();
}
inline void TestTable::clear_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tag_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& TestTable::_internal_tag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tag_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& TestTable::tag() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:TestTable.tag)
  return _internal_tag();
}
inline ::google::protobuf::Map<std::string, std::string>* TestTable::_internal_mutable_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.tag_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* TestTable::mutable_tag() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:TestTable.tag)
  return _internal_mutable_tag();
}

// map<string, string> immunetag = 3;
inline int TestTable::_internal_immunetag_size() const {
  return _internal_immunetag().size();
}
inline int TestTable::immunetag_size() const {
  return _internal_immunetag_size();
}
inline void TestTable::clear_immunetag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.immunetag_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& TestTable::_internal_immunetag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.immunetag_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& TestTable::immunetag() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:TestTable.immunetag)
  return _internal_immunetag();
}
inline ::google::protobuf::Map<std::string, std::string>* TestTable::_internal_mutable_immunetag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.immunetag_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* TestTable::mutable_immunetag() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:TestTable.immunetag)
  return _internal_mutable_immunetag();
}

// uint32 level = 4;
inline void TestTable::clear_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.level_ = 0u;
}
inline ::uint32_t TestTable::level() const {
  // @@protoc_insertion_point(field_get:TestTable.level)
  return _internal_level();
}
inline void TestTable::set_level(::uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:TestTable.level)
}
inline ::uint32_t TestTable::_internal_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.level_;
}
inline void TestTable::_internal_set_level(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.level_ = value;
}

// repeated .testobj testobj = 5;
inline int TestTable::_internal_testobj_size() const {
  return _internal_testobj().size();
}
inline int TestTable::testobj_size() const {
  return _internal_testobj_size();
}
inline void TestTable::clear_testobj() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.testobj_.Clear();
}
inline ::testobj* TestTable::mutable_testobj(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TestTable.testobj)
  return _internal_mutable_testobj()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::testobj>* TestTable::mutable_testobj()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TestTable.testobj)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_testobj();
}
inline const ::testobj& TestTable::testobj(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TestTable.testobj)
  return _internal_testobj().Get(index);
}
inline ::testobj* TestTable::add_testobj() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::testobj* _add = _internal_mutable_testobj()->Add();
  // @@protoc_insertion_point(field_add:TestTable.testobj)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::testobj>& TestTable::testobj() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TestTable.testobj)
  return _internal_testobj();
}
inline const ::google::protobuf::RepeatedPtrField<::testobj>&
TestTable::_internal_testobj() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.testobj_;
}
inline ::google::protobuf::RepeatedPtrField<::testobj>*
TestTable::_internal_mutable_testobj() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.testobj_;
}

// repeated uint32 effect = 6;
inline int TestTable::_internal_effect_size() const {
  return _internal_effect().size();
}
inline int TestTable::effect_size() const {
  return _internal_effect_size();
}
inline void TestTable::clear_effect() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.effect_.Clear();
}
inline ::uint32_t TestTable::effect(int index) const {
  // @@protoc_insertion_point(field_get:TestTable.effect)
  return _internal_effect().Get(index);
}
inline void TestTable::set_effect(int index, ::uint32_t value) {
  _internal_mutable_effect()->Set(index, value);
  // @@protoc_insertion_point(field_set:TestTable.effect)
}
inline void TestTable::add_effect(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_effect()->Add(value);
  // @@protoc_insertion_point(field_add:TestTable.effect)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& TestTable::effect() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TestTable.effect)
  return _internal_effect();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* TestTable::mutable_effect()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TestTable.effect)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_effect();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
TestTable::_internal_effect() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.effect_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* TestTable::_internal_mutable_effect() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.effect_;
}

// -------------------------------------------------------------------

// TestTabledData

// repeated .TestTable data = 1;
inline int TestTabledData::_internal_data_size() const {
  return _internal_data().size();
}
inline int TestTabledData::data_size() const {
  return _internal_data_size();
}
inline void TestTabledData::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.Clear();
}
inline ::TestTable* TestTabledData::mutable_data(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TestTabledData.data)
  return _internal_mutable_data()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::TestTable>* TestTabledData::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TestTabledData.data)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_data();
}
inline const ::TestTable& TestTabledData::data(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TestTabledData.data)
  return _internal_data().Get(index);
}
inline ::TestTable* TestTabledData::add_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::TestTable* _add = _internal_mutable_data()->Add();
  // @@protoc_insertion_point(field_add:TestTabledData.data)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::TestTable>& TestTabledData::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TestTabledData.data)
  return _internal_data();
}
inline const ::google::protobuf::RepeatedPtrField<::TestTable>&
TestTabledData::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedPtrField<::TestTable>*
TestTabledData::_internal_mutable_data() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.data_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_test_5fconfig_2eproto_2epb_2eh
