// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/service/cpp/rpc/centre/centre_service.proto

package login_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "login/proto/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Centre_GatePlayerService_FullMethodName          = "/Centre/GatePlayerService"
	Centre_GateSessionDisconnect_FullMethodName      = "/Centre/GateSessionDisconnect"
	Centre_LoginNodeAccountLogin_FullMethodName      = "/Centre/LoginNodeAccountLogin"
	Centre_LoginNodeEnterGame_FullMethodName         = "/Centre/LoginNodeEnterGame"
	Centre_LoginNodeLeaveGame_FullMethodName         = "/Centre/LoginNodeLeaveGame"
	Centre_LoginNodeSessionDisconnect_FullMethodName = "/Centre/LoginNodeSessionDisconnect"
	Centre_PlayerService_FullMethodName              = "/Centre/PlayerService"
	Centre_EnterGsSucceed_FullMethodName             = "/Centre/EnterGsSucceed"
	Centre_RouteNodeStringMsg_FullMethodName         = "/Centre/RouteNodeStringMsg"
	Centre_RoutePlayerStringMsg_FullMethodName       = "/Centre/RoutePlayerStringMsg"
	Centre_InitSceneNode_FullMethodName              = "/Centre/InitSceneNode"
	Centre_NodeHandshake_FullMethodName              = "/Centre/NodeHandshake"
)

// CentreClient is the client API for Centre service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CentreClient interface {
	GatePlayerService(ctx context.Context, in *GateClientMessageRequest, opts ...grpc.CallOption) (*common.Empty, error)
	GateSessionDisconnect(ctx context.Context, in *common.GateSessionDisconnectRequest, opts ...grpc.CallOption) (*common.Empty, error)
	LoginNodeAccountLogin(ctx context.Context, in *CentreLoginRequest, opts ...grpc.CallOption) (*CentreLoginResponse, error)
	LoginNodeEnterGame(ctx context.Context, in *CentrePlayerGameNodeEntryRequest, opts ...grpc.CallOption) (*common.Empty, error)
	LoginNodeLeaveGame(ctx context.Context, in *LoginNodeLeaveGameRequest, opts ...grpc.CallOption) (*common.Empty, error)
	LoginNodeSessionDisconnect(ctx context.Context, in *common.GateSessionDisconnectRequest, opts ...grpc.CallOption) (*common.Empty, error)
	PlayerService(ctx context.Context, in *common.NodeRouteMessageRequest, opts ...grpc.CallOption) (*common.NodeRouteMessageResponse, error)
	EnterGsSucceed(ctx context.Context, in *EnterGameNodeSuccessRequest, opts ...grpc.CallOption) (*common.Empty, error)
	RouteNodeStringMsg(ctx context.Context, in *common.RouteMessageRequest, opts ...grpc.CallOption) (*common.RouteMessageResponse, error)
	RoutePlayerStringMsg(ctx context.Context, in *common.RoutePlayerMessageRequest, opts ...grpc.CallOption) (*common.RoutePlayerMessageResponse, error)
	InitSceneNode(ctx context.Context, in *InitSceneNodeRequest, opts ...grpc.CallOption) (*common.Empty, error)
	NodeHandshake(ctx context.Context, in *common.NodeHandshakeRequest, opts ...grpc.CallOption) (*common.NodeHandshakeResponse, error)
}

type centreClient struct {
	cc grpc.ClientConnInterface
}

func NewCentreClient(cc grpc.ClientConnInterface) CentreClient {
	return &centreClient{cc}
}

func (c *centreClient) GatePlayerService(ctx context.Context, in *GateClientMessageRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, Centre_GatePlayerService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centreClient) GateSessionDisconnect(ctx context.Context, in *common.GateSessionDisconnectRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, Centre_GateSessionDisconnect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centreClient) LoginNodeAccountLogin(ctx context.Context, in *CentreLoginRequest, opts ...grpc.CallOption) (*CentreLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CentreLoginResponse)
	err := c.cc.Invoke(ctx, Centre_LoginNodeAccountLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centreClient) LoginNodeEnterGame(ctx context.Context, in *CentrePlayerGameNodeEntryRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, Centre_LoginNodeEnterGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centreClient) LoginNodeLeaveGame(ctx context.Context, in *LoginNodeLeaveGameRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, Centre_LoginNodeLeaveGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centreClient) LoginNodeSessionDisconnect(ctx context.Context, in *common.GateSessionDisconnectRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, Centre_LoginNodeSessionDisconnect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centreClient) PlayerService(ctx context.Context, in *common.NodeRouteMessageRequest, opts ...grpc.CallOption) (*common.NodeRouteMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.NodeRouteMessageResponse)
	err := c.cc.Invoke(ctx, Centre_PlayerService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centreClient) EnterGsSucceed(ctx context.Context, in *EnterGameNodeSuccessRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, Centre_EnterGsSucceed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centreClient) RouteNodeStringMsg(ctx context.Context, in *common.RouteMessageRequest, opts ...grpc.CallOption) (*common.RouteMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.RouteMessageResponse)
	err := c.cc.Invoke(ctx, Centre_RouteNodeStringMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centreClient) RoutePlayerStringMsg(ctx context.Context, in *common.RoutePlayerMessageRequest, opts ...grpc.CallOption) (*common.RoutePlayerMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.RoutePlayerMessageResponse)
	err := c.cc.Invoke(ctx, Centre_RoutePlayerStringMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centreClient) InitSceneNode(ctx context.Context, in *InitSceneNodeRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, Centre_InitSceneNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centreClient) NodeHandshake(ctx context.Context, in *common.NodeHandshakeRequest, opts ...grpc.CallOption) (*common.NodeHandshakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.NodeHandshakeResponse)
	err := c.cc.Invoke(ctx, Centre_NodeHandshake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CentreServer is the server API for Centre service.
// All implementations must embed UnimplementedCentreServer
// for forward compatibility.
type CentreServer interface {
	GatePlayerService(context.Context, *GateClientMessageRequest) (*common.Empty, error)
	GateSessionDisconnect(context.Context, *common.GateSessionDisconnectRequest) (*common.Empty, error)
	LoginNodeAccountLogin(context.Context, *CentreLoginRequest) (*CentreLoginResponse, error)
	LoginNodeEnterGame(context.Context, *CentrePlayerGameNodeEntryRequest) (*common.Empty, error)
	LoginNodeLeaveGame(context.Context, *LoginNodeLeaveGameRequest) (*common.Empty, error)
	LoginNodeSessionDisconnect(context.Context, *common.GateSessionDisconnectRequest) (*common.Empty, error)
	PlayerService(context.Context, *common.NodeRouteMessageRequest) (*common.NodeRouteMessageResponse, error)
	EnterGsSucceed(context.Context, *EnterGameNodeSuccessRequest) (*common.Empty, error)
	RouteNodeStringMsg(context.Context, *common.RouteMessageRequest) (*common.RouteMessageResponse, error)
	RoutePlayerStringMsg(context.Context, *common.RoutePlayerMessageRequest) (*common.RoutePlayerMessageResponse, error)
	InitSceneNode(context.Context, *InitSceneNodeRequest) (*common.Empty, error)
	NodeHandshake(context.Context, *common.NodeHandshakeRequest) (*common.NodeHandshakeResponse, error)
	mustEmbedUnimplementedCentreServer()
}

// UnimplementedCentreServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCentreServer struct{}

func (UnimplementedCentreServer) GatePlayerService(context.Context, *GateClientMessageRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatePlayerService not implemented")
}
func (UnimplementedCentreServer) GateSessionDisconnect(context.Context, *common.GateSessionDisconnectRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GateSessionDisconnect not implemented")
}
func (UnimplementedCentreServer) LoginNodeAccountLogin(context.Context, *CentreLoginRequest) (*CentreLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginNodeAccountLogin not implemented")
}
func (UnimplementedCentreServer) LoginNodeEnterGame(context.Context, *CentrePlayerGameNodeEntryRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginNodeEnterGame not implemented")
}
func (UnimplementedCentreServer) LoginNodeLeaveGame(context.Context, *LoginNodeLeaveGameRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginNodeLeaveGame not implemented")
}
func (UnimplementedCentreServer) LoginNodeSessionDisconnect(context.Context, *common.GateSessionDisconnectRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginNodeSessionDisconnect not implemented")
}
func (UnimplementedCentreServer) PlayerService(context.Context, *common.NodeRouteMessageRequest) (*common.NodeRouteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerService not implemented")
}
func (UnimplementedCentreServer) EnterGsSucceed(context.Context, *EnterGameNodeSuccessRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterGsSucceed not implemented")
}
func (UnimplementedCentreServer) RouteNodeStringMsg(context.Context, *common.RouteMessageRequest) (*common.RouteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouteNodeStringMsg not implemented")
}
func (UnimplementedCentreServer) RoutePlayerStringMsg(context.Context, *common.RoutePlayerMessageRequest) (*common.RoutePlayerMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoutePlayerStringMsg not implemented")
}
func (UnimplementedCentreServer) InitSceneNode(context.Context, *InitSceneNodeRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitSceneNode not implemented")
}
func (UnimplementedCentreServer) NodeHandshake(context.Context, *common.NodeHandshakeRequest) (*common.NodeHandshakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeHandshake not implemented")
}
func (UnimplementedCentreServer) mustEmbedUnimplementedCentreServer() {}
func (UnimplementedCentreServer) testEmbeddedByValue()                {}

// UnsafeCentreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CentreServer will
// result in compilation errors.
type UnsafeCentreServer interface {
	mustEmbedUnimplementedCentreServer()
}

func RegisterCentreServer(s grpc.ServiceRegistrar, srv CentreServer) {
	// If the following call pancis, it indicates UnimplementedCentreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Centre_ServiceDesc, srv)
}

func _Centre_GatePlayerService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateClientMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentreServer).GatePlayerService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Centre_GatePlayerService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentreServer).GatePlayerService(ctx, req.(*GateClientMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Centre_GateSessionDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GateSessionDisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentreServer).GateSessionDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Centre_GateSessionDisconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentreServer).GateSessionDisconnect(ctx, req.(*common.GateSessionDisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Centre_LoginNodeAccountLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CentreLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentreServer).LoginNodeAccountLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Centre_LoginNodeAccountLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentreServer).LoginNodeAccountLogin(ctx, req.(*CentreLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Centre_LoginNodeEnterGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CentrePlayerGameNodeEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentreServer).LoginNodeEnterGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Centre_LoginNodeEnterGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentreServer).LoginNodeEnterGame(ctx, req.(*CentrePlayerGameNodeEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Centre_LoginNodeLeaveGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginNodeLeaveGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentreServer).LoginNodeLeaveGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Centre_LoginNodeLeaveGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentreServer).LoginNodeLeaveGame(ctx, req.(*LoginNodeLeaveGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Centre_LoginNodeSessionDisconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GateSessionDisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentreServer).LoginNodeSessionDisconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Centre_LoginNodeSessionDisconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentreServer).LoginNodeSessionDisconnect(ctx, req.(*common.GateSessionDisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Centre_PlayerService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NodeRouteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentreServer).PlayerService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Centre_PlayerService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentreServer).PlayerService(ctx, req.(*common.NodeRouteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Centre_EnterGsSucceed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterGameNodeSuccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentreServer).EnterGsSucceed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Centre_EnterGsSucceed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentreServer).EnterGsSucceed(ctx, req.(*EnterGameNodeSuccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Centre_RouteNodeStringMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RouteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentreServer).RouteNodeStringMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Centre_RouteNodeStringMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentreServer).RouteNodeStringMsg(ctx, req.(*common.RouteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Centre_RoutePlayerStringMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RoutePlayerMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentreServer).RoutePlayerStringMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Centre_RoutePlayerStringMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentreServer).RoutePlayerStringMsg(ctx, req.(*common.RoutePlayerMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Centre_InitSceneNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitSceneNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentreServer).InitSceneNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Centre_InitSceneNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentreServer).InitSceneNode(ctx, req.(*InitSceneNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Centre_NodeHandshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NodeHandshakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentreServer).NodeHandshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Centre_NodeHandshake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentreServer).NodeHandshake(ctx, req.(*common.NodeHandshakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Centre_ServiceDesc is the grpc.ServiceDesc for Centre service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Centre_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Centre",
	HandlerType: (*CentreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GatePlayerService",
			Handler:    _Centre_GatePlayerService_Handler,
		},
		{
			MethodName: "GateSessionDisconnect",
			Handler:    _Centre_GateSessionDisconnect_Handler,
		},
		{
			MethodName: "LoginNodeAccountLogin",
			Handler:    _Centre_LoginNodeAccountLogin_Handler,
		},
		{
			MethodName: "LoginNodeEnterGame",
			Handler:    _Centre_LoginNodeEnterGame_Handler,
		},
		{
			MethodName: "LoginNodeLeaveGame",
			Handler:    _Centre_LoginNodeLeaveGame_Handler,
		},
		{
			MethodName: "LoginNodeSessionDisconnect",
			Handler:    _Centre_LoginNodeSessionDisconnect_Handler,
		},
		{
			MethodName: "PlayerService",
			Handler:    _Centre_PlayerService_Handler,
		},
		{
			MethodName: "EnterGsSucceed",
			Handler:    _Centre_EnterGsSucceed_Handler,
		},
		{
			MethodName: "RouteNodeStringMsg",
			Handler:    _Centre_RouteNodeStringMsg_Handler,
		},
		{
			MethodName: "RoutePlayerStringMsg",
			Handler:    _Centre_RoutePlayerStringMsg_Handler,
		},
		{
			MethodName: "InitSceneNode",
			Handler:    _Centre_InitSceneNode_Handler,
		},
		{
			MethodName: "NodeHandshake",
			Handler:    _Centre_NodeHandshake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/cpp/rpc/centre/centre_service.proto",
}
