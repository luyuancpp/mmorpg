// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/service/cpp/rpc/scene/game_player_scene.proto

package db_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SceneScenePlayer_EnterScene_FullMethodName    = "/SceneScenePlayer/EnterScene"
	SceneScenePlayer_LeaveScene_FullMethodName    = "/SceneScenePlayer/LeaveScene"
	SceneScenePlayer_EnterSceneS2C_FullMethodName = "/SceneScenePlayer/EnterSceneS2C"
)

// SceneScenePlayerClient is the client API for SceneScenePlayer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SceneScenePlayerClient interface {
	EnterScene(ctx context.Context, in *GsEnterSceneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LeaveScene(ctx context.Context, in *GsLeaveSceneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EnterSceneS2C(ctx context.Context, in *EnterSceneS2CRequest, opts ...grpc.CallOption) (*EnterScenerS2CResponse, error)
}

type sceneScenePlayerClient struct {
	cc grpc.ClientConnInterface
}

func NewSceneScenePlayerClient(cc grpc.ClientConnInterface) SceneScenePlayerClient {
	return &sceneScenePlayerClient{cc}
}

func (c *sceneScenePlayerClient) EnterScene(ctx context.Context, in *GsEnterSceneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SceneScenePlayer_EnterScene_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneScenePlayerClient) LeaveScene(ctx context.Context, in *GsLeaveSceneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SceneScenePlayer_LeaveScene_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneScenePlayerClient) EnterSceneS2C(ctx context.Context, in *EnterSceneS2CRequest, opts ...grpc.CallOption) (*EnterScenerS2CResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnterScenerS2CResponse)
	err := c.cc.Invoke(ctx, SceneScenePlayer_EnterSceneS2C_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SceneScenePlayerServer is the server API for SceneScenePlayer service.
// All implementations must embed UnimplementedSceneScenePlayerServer
// for forward compatibility.
type SceneScenePlayerServer interface {
	EnterScene(context.Context, *GsEnterSceneRequest) (*emptypb.Empty, error)
	LeaveScene(context.Context, *GsLeaveSceneRequest) (*emptypb.Empty, error)
	EnterSceneS2C(context.Context, *EnterSceneS2CRequest) (*EnterScenerS2CResponse, error)
	mustEmbedUnimplementedSceneScenePlayerServer()
}

// UnimplementedSceneScenePlayerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSceneScenePlayerServer struct{}

func (UnimplementedSceneScenePlayerServer) EnterScene(context.Context, *GsEnterSceneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterScene not implemented")
}
func (UnimplementedSceneScenePlayerServer) LeaveScene(context.Context, *GsLeaveSceneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveScene not implemented")
}
func (UnimplementedSceneScenePlayerServer) EnterSceneS2C(context.Context, *EnterSceneS2CRequest) (*EnterScenerS2CResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterSceneS2C not implemented")
}
func (UnimplementedSceneScenePlayerServer) mustEmbedUnimplementedSceneScenePlayerServer() {}
func (UnimplementedSceneScenePlayerServer) testEmbeddedByValue()                          {}

// UnsafeSceneScenePlayerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SceneScenePlayerServer will
// result in compilation errors.
type UnsafeSceneScenePlayerServer interface {
	mustEmbedUnimplementedSceneScenePlayerServer()
}

func RegisterSceneScenePlayerServer(s grpc.ServiceRegistrar, srv SceneScenePlayerServer) {
	// If the following call pancis, it indicates UnimplementedSceneScenePlayerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SceneScenePlayer_ServiceDesc, srv)
}

func _SceneScenePlayer_EnterScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GsEnterSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneScenePlayerServer).EnterScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SceneScenePlayer_EnterScene_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneScenePlayerServer).EnterScene(ctx, req.(*GsEnterSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SceneScenePlayer_LeaveScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GsLeaveSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneScenePlayerServer).LeaveScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SceneScenePlayer_LeaveScene_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneScenePlayerServer).LeaveScene(ctx, req.(*GsLeaveSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SceneScenePlayer_EnterSceneS2C_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterSceneS2CRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneScenePlayerServer).EnterSceneS2C(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SceneScenePlayer_EnterSceneS2C_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneScenePlayerServer).EnterSceneS2C(ctx, req.(*EnterSceneS2CRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SceneScenePlayer_ServiceDesc is the grpc.ServiceDesc for SceneScenePlayer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SceneScenePlayer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SceneScenePlayer",
	HandlerType: (*SceneScenePlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnterScene",
			Handler:    _SceneScenePlayer_EnterScene_Handler,
		},
		{
			MethodName: "LeaveScene",
			Handler:    _SceneScenePlayer_LeaveScene_Handler,
		},
		{
			MethodName: "EnterSceneS2C",
			Handler:    _SceneScenePlayer_EnterSceneS2C_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/cpp/rpc/scene/game_player_scene.proto",
}
