// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.31.1
// source: condition_table.proto

package table

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConditionTable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ConditionType uint32                 `protobuf:"varint,2,opt,name=condition_type,json=conditionType,proto3" json:"condition_type,omitempty"`
	Condition1    []uint32               `protobuf:"varint,3,rep,packed,name=condition1,proto3" json:"condition1,omitempty"`
	Condition2    []uint32               `protobuf:"varint,4,rep,packed,name=condition2,proto3" json:"condition2,omitempty"`
	Condition3    []uint32               `protobuf:"varint,5,rep,packed,name=condition3,proto3" json:"condition3,omitempty"`
	Condition4    []uint32               `protobuf:"varint,6,rep,packed,name=condition4,proto3" json:"condition4,omitempty"`
	AmountType    uint32                 `protobuf:"varint,7,opt,name=amount_type,json=amountType,proto3" json:"amount_type,omitempty"`
	Amount        uint32                 `protobuf:"varint,8,opt,name=amount,proto3" json:"amount,omitempty"`
	Comparison    uint32                 `protobuf:"varint,9,opt,name=comparison,proto3" json:"comparison,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConditionTable) Reset() {
	*x = ConditionTable{}
	mi := &file_condition_table_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConditionTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionTable) ProtoMessage() {}

func (x *ConditionTable) ProtoReflect() protoreflect.Message {
	mi := &file_condition_table_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionTable.ProtoReflect.Descriptor instead.
func (*ConditionTable) Descriptor() ([]byte, []int) {
	return file_condition_table_proto_rawDescGZIP(), []int{0}
}

func (x *ConditionTable) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConditionTable) GetConditionType() uint32 {
	if x != nil {
		return x.ConditionType
	}
	return 0
}

func (x *ConditionTable) GetCondition1() []uint32 {
	if x != nil {
		return x.Condition1
	}
	return nil
}

func (x *ConditionTable) GetCondition2() []uint32 {
	if x != nil {
		return x.Condition2
	}
	return nil
}

func (x *ConditionTable) GetCondition3() []uint32 {
	if x != nil {
		return x.Condition3
	}
	return nil
}

func (x *ConditionTable) GetCondition4() []uint32 {
	if x != nil {
		return x.Condition4
	}
	return nil
}

func (x *ConditionTable) GetAmountType() uint32 {
	if x != nil {
		return x.AmountType
	}
	return 0
}

func (x *ConditionTable) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ConditionTable) GetComparison() uint32 {
	if x != nil {
		return x.Comparison
	}
	return 0
}

type ConditionTableData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*ConditionTable      `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConditionTableData) Reset() {
	*x = ConditionTableData{}
	mi := &file_condition_table_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConditionTableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionTableData) ProtoMessage() {}

func (x *ConditionTableData) ProtoReflect() protoreflect.Message {
	mi := &file_condition_table_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionTableData.ProtoReflect.Descriptor instead.
func (*ConditionTableData) Descriptor() ([]byte, []int) {
	return file_condition_table_proto_rawDescGZIP(), []int{1}
}

func (x *ConditionTableData) GetData() []*ConditionTable {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_condition_table_proto protoreflect.FileDescriptor

const file_condition_table_proto_rawDesc = "" +
	"\n" +
	"\x15condition_table.proto\"\xa0\x02\n" +
	"\x0eConditionTable\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12%\n" +
	"\x0econdition_type\x18\x02 \x01(\rR\rconditionType\x12\x1e\n" +
	"\n" +
	"condition1\x18\x03 \x03(\rR\n" +
	"condition1\x12\x1e\n" +
	"\n" +
	"condition2\x18\x04 \x03(\rR\n" +
	"condition2\x12\x1e\n" +
	"\n" +
	"condition3\x18\x05 \x03(\rR\n" +
	"condition3\x12\x1e\n" +
	"\n" +
	"condition4\x18\x06 \x03(\rR\n" +
	"condition4\x12\x1f\n" +
	"\vamount_type\x18\a \x01(\rR\n" +
	"amountType\x12\x16\n" +
	"\x06amount\x18\b \x01(\rR\x06amount\x12\x1e\n" +
	"\n" +
	"comparison\x18\t \x01(\rR\n" +
	"comparison\"9\n" +
	"\x12ConditionTableData\x12#\n" +
	"\x04data\x18\x01 \x03(\v2\x0f.ConditionTableR\x04dataB\x14Z\x12generated/pb/tableb\x06proto3"

var (
	file_condition_table_proto_rawDescOnce sync.Once
	file_condition_table_proto_rawDescData []byte
)

func file_condition_table_proto_rawDescGZIP() []byte {
	file_condition_table_proto_rawDescOnce.Do(func() {
		file_condition_table_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_condition_table_proto_rawDesc), len(file_condition_table_proto_rawDesc)))
	})
	return file_condition_table_proto_rawDescData
}

var file_condition_table_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_condition_table_proto_goTypes = []any{
	(*ConditionTable)(nil),     // 0: ConditionTable
	(*ConditionTableData)(nil), // 1: ConditionTableData
}
var file_condition_table_proto_depIdxs = []int32{
	0, // 0: ConditionTableData.data:type_name -> ConditionTable
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_condition_table_proto_init() }
func file_condition_table_proto_init() {
	if File_condition_table_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_condition_table_proto_rawDesc), len(file_condition_table_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_condition_table_proto_goTypes,
		DependencyIndexes: file_condition_table_proto_depIdxs,
		MessageInfos:      file_condition_table_proto_msgTypes,
	}.Build()
	File_condition_table_proto = out.File
	file_condition_table_proto_goTypes = nil
	file_condition_table_proto_depIdxs = nil
}
