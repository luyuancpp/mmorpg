// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/service/cpp/rpc/centre/centre_player_scene.proto

package player_locator_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CentrePlayerScene_EnterScene_FullMethodName                        = "/CentrePlayerScene/EnterScene"
	CentrePlayerScene_LeaveScene_FullMethodName                        = "/CentrePlayerScene/LeaveScene"
	CentrePlayerScene_LeaveSceneAsyncSavePlayerComplete_FullMethodName = "/CentrePlayerScene/LeaveSceneAsyncSavePlayerComplete"
	CentrePlayerScene_SceneInfoC2S_FullMethodName                      = "/CentrePlayerScene/SceneInfoC2S"
)

// CentrePlayerSceneClient is the client API for CentrePlayerScene service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CentrePlayerSceneClient interface {
	EnterScene(ctx context.Context, in *CentreEnterSceneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LeaveScene(ctx context.Context, in *CentreLeaveSceneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LeaveSceneAsyncSavePlayerComplete(ctx context.Context, in *CentreLeaveSceneAsyncSavePlayerCompleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SceneInfoC2S(ctx context.Context, in *CentreSceneInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type centrePlayerSceneClient struct {
	cc grpc.ClientConnInterface
}

func NewCentrePlayerSceneClient(cc grpc.ClientConnInterface) CentrePlayerSceneClient {
	return &centrePlayerSceneClient{cc}
}

func (c *centrePlayerSceneClient) EnterScene(ctx context.Context, in *CentreEnterSceneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CentrePlayerScene_EnterScene_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centrePlayerSceneClient) LeaveScene(ctx context.Context, in *CentreLeaveSceneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CentrePlayerScene_LeaveScene_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centrePlayerSceneClient) LeaveSceneAsyncSavePlayerComplete(ctx context.Context, in *CentreLeaveSceneAsyncSavePlayerCompleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CentrePlayerScene_LeaveSceneAsyncSavePlayerComplete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centrePlayerSceneClient) SceneInfoC2S(ctx context.Context, in *CentreSceneInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CentrePlayerScene_SceneInfoC2S_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CentrePlayerSceneServer is the server API for CentrePlayerScene service.
// All implementations must embed UnimplementedCentrePlayerSceneServer
// for forward compatibility.
type CentrePlayerSceneServer interface {
	EnterScene(context.Context, *CentreEnterSceneRequest) (*emptypb.Empty, error)
	LeaveScene(context.Context, *CentreLeaveSceneRequest) (*emptypb.Empty, error)
	LeaveSceneAsyncSavePlayerComplete(context.Context, *CentreLeaveSceneAsyncSavePlayerCompleteRequest) (*emptypb.Empty, error)
	SceneInfoC2S(context.Context, *CentreSceneInfoRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCentrePlayerSceneServer()
}

// UnimplementedCentrePlayerSceneServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCentrePlayerSceneServer struct{}

func (UnimplementedCentrePlayerSceneServer) EnterScene(context.Context, *CentreEnterSceneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterScene not implemented")
}
func (UnimplementedCentrePlayerSceneServer) LeaveScene(context.Context, *CentreLeaveSceneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveScene not implemented")
}
func (UnimplementedCentrePlayerSceneServer) LeaveSceneAsyncSavePlayerComplete(context.Context, *CentreLeaveSceneAsyncSavePlayerCompleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveSceneAsyncSavePlayerComplete not implemented")
}
func (UnimplementedCentrePlayerSceneServer) SceneInfoC2S(context.Context, *CentreSceneInfoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SceneInfoC2S not implemented")
}
func (UnimplementedCentrePlayerSceneServer) mustEmbedUnimplementedCentrePlayerSceneServer() {}
func (UnimplementedCentrePlayerSceneServer) testEmbeddedByValue()                           {}

// UnsafeCentrePlayerSceneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CentrePlayerSceneServer will
// result in compilation errors.
type UnsafeCentrePlayerSceneServer interface {
	mustEmbedUnimplementedCentrePlayerSceneServer()
}

func RegisterCentrePlayerSceneServer(s grpc.ServiceRegistrar, srv CentrePlayerSceneServer) {
	// If the following call pancis, it indicates UnimplementedCentrePlayerSceneServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CentrePlayerScene_ServiceDesc, srv)
}

func _CentrePlayerScene_EnterScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CentreEnterSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentrePlayerSceneServer).EnterScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CentrePlayerScene_EnterScene_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentrePlayerSceneServer).EnterScene(ctx, req.(*CentreEnterSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentrePlayerScene_LeaveScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CentreLeaveSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentrePlayerSceneServer).LeaveScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CentrePlayerScene_LeaveScene_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentrePlayerSceneServer).LeaveScene(ctx, req.(*CentreLeaveSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentrePlayerScene_LeaveSceneAsyncSavePlayerComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CentreLeaveSceneAsyncSavePlayerCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentrePlayerSceneServer).LeaveSceneAsyncSavePlayerComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CentrePlayerScene_LeaveSceneAsyncSavePlayerComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentrePlayerSceneServer).LeaveSceneAsyncSavePlayerComplete(ctx, req.(*CentreLeaveSceneAsyncSavePlayerCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentrePlayerScene_SceneInfoC2S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CentreSceneInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentrePlayerSceneServer).SceneInfoC2S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CentrePlayerScene_SceneInfoC2S_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentrePlayerSceneServer).SceneInfoC2S(ctx, req.(*CentreSceneInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CentrePlayerScene_ServiceDesc is the grpc.ServiceDesc for CentrePlayerScene service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CentrePlayerScene_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CentrePlayerScene",
	HandlerType: (*CentrePlayerSceneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnterScene",
			Handler:    _CentrePlayerScene_EnterScene_Handler,
		},
		{
			MethodName: "LeaveScene",
			Handler:    _CentrePlayerScene_LeaveScene_Handler,
		},
		{
			MethodName: "LeaveSceneAsyncSavePlayerComplete",
			Handler:    _CentrePlayerScene_LeaveSceneAsyncSavePlayerComplete_Handler,
		},
		{
			MethodName: "SceneInfoC2S",
			Handler:    _CentrePlayerScene_SceneInfoC2S_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/cpp/rpc/centre/centre_player_scene.proto",
}
