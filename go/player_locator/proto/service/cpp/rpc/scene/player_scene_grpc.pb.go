// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/service/cpp/rpc/scene/player_scene.proto

package player_locator_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "player_locator/proto/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SceneSceneClientPlayer_EnterScene_FullMethodName             = "/SceneSceneClientPlayer/EnterScene"
	SceneSceneClientPlayer_NotifyEnterScene_FullMethodName       = "/SceneSceneClientPlayer/NotifyEnterScene"
	SceneSceneClientPlayer_SceneInfoC2S_FullMethodName           = "/SceneSceneClientPlayer/SceneInfoC2S"
	SceneSceneClientPlayer_NotifySceneInfo_FullMethodName        = "/SceneSceneClientPlayer/NotifySceneInfo"
	SceneSceneClientPlayer_NotifyActorCreate_FullMethodName      = "/SceneSceneClientPlayer/NotifyActorCreate"
	SceneSceneClientPlayer_NotifyActorDestroy_FullMethodName     = "/SceneSceneClientPlayer/NotifyActorDestroy"
	SceneSceneClientPlayer_NotifyActorListCreate_FullMethodName  = "/SceneSceneClientPlayer/NotifyActorListCreate"
	SceneSceneClientPlayer_NotifyActorListDestroy_FullMethodName = "/SceneSceneClientPlayer/NotifyActorListDestroy"
)

// SceneSceneClientPlayerClient is the client API for SceneSceneClientPlayer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SceneSceneClientPlayerClient interface {
	EnterScene(ctx context.Context, in *EnterSceneC2SRequest, opts ...grpc.CallOption) (*EnterSceneC2SResponse, error)
	NotifyEnterScene(ctx context.Context, in *EnterSceneS2C, opts ...grpc.CallOption) (*common.Empty, error)
	SceneInfoC2S(ctx context.Context, in *SceneInfoRequest, opts ...grpc.CallOption) (*common.Empty, error)
	NotifySceneInfo(ctx context.Context, in *SceneInfoS2C, opts ...grpc.CallOption) (*common.Empty, error)
	NotifyActorCreate(ctx context.Context, in *ActorCreateS2C, opts ...grpc.CallOption) (*common.Empty, error)
	NotifyActorDestroy(ctx context.Context, in *ActorDestroyS2C, opts ...grpc.CallOption) (*common.Empty, error)
	NotifyActorListCreate(ctx context.Context, in *ActorListCreateS2C, opts ...grpc.CallOption) (*common.Empty, error)
	NotifyActorListDestroy(ctx context.Context, in *ActorListDestroyS2C, opts ...grpc.CallOption) (*common.Empty, error)
}

type sceneSceneClientPlayerClient struct {
	cc grpc.ClientConnInterface
}

func NewSceneSceneClientPlayerClient(cc grpc.ClientConnInterface) SceneSceneClientPlayerClient {
	return &sceneSceneClientPlayerClient{cc}
}

func (c *sceneSceneClientPlayerClient) EnterScene(ctx context.Context, in *EnterSceneC2SRequest, opts ...grpc.CallOption) (*EnterSceneC2SResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnterSceneC2SResponse)
	err := c.cc.Invoke(ctx, SceneSceneClientPlayer_EnterScene_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneSceneClientPlayerClient) NotifyEnterScene(ctx context.Context, in *EnterSceneS2C, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SceneSceneClientPlayer_NotifyEnterScene_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneSceneClientPlayerClient) SceneInfoC2S(ctx context.Context, in *SceneInfoRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SceneSceneClientPlayer_SceneInfoC2S_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneSceneClientPlayerClient) NotifySceneInfo(ctx context.Context, in *SceneInfoS2C, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SceneSceneClientPlayer_NotifySceneInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneSceneClientPlayerClient) NotifyActorCreate(ctx context.Context, in *ActorCreateS2C, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SceneSceneClientPlayer_NotifyActorCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneSceneClientPlayerClient) NotifyActorDestroy(ctx context.Context, in *ActorDestroyS2C, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SceneSceneClientPlayer_NotifyActorDestroy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneSceneClientPlayerClient) NotifyActorListCreate(ctx context.Context, in *ActorListCreateS2C, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SceneSceneClientPlayer_NotifyActorListCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneSceneClientPlayerClient) NotifyActorListDestroy(ctx context.Context, in *ActorListDestroyS2C, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, SceneSceneClientPlayer_NotifyActorListDestroy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SceneSceneClientPlayerServer is the server API for SceneSceneClientPlayer service.
// All implementations must embed UnimplementedSceneSceneClientPlayerServer
// for forward compatibility.
type SceneSceneClientPlayerServer interface {
	EnterScene(context.Context, *EnterSceneC2SRequest) (*EnterSceneC2SResponse, error)
	NotifyEnterScene(context.Context, *EnterSceneS2C) (*common.Empty, error)
	SceneInfoC2S(context.Context, *SceneInfoRequest) (*common.Empty, error)
	NotifySceneInfo(context.Context, *SceneInfoS2C) (*common.Empty, error)
	NotifyActorCreate(context.Context, *ActorCreateS2C) (*common.Empty, error)
	NotifyActorDestroy(context.Context, *ActorDestroyS2C) (*common.Empty, error)
	NotifyActorListCreate(context.Context, *ActorListCreateS2C) (*common.Empty, error)
	NotifyActorListDestroy(context.Context, *ActorListDestroyS2C) (*common.Empty, error)
	mustEmbedUnimplementedSceneSceneClientPlayerServer()
}

// UnimplementedSceneSceneClientPlayerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSceneSceneClientPlayerServer struct{}

func (UnimplementedSceneSceneClientPlayerServer) EnterScene(context.Context, *EnterSceneC2SRequest) (*EnterSceneC2SResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterScene not implemented")
}
func (UnimplementedSceneSceneClientPlayerServer) NotifyEnterScene(context.Context, *EnterSceneS2C) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyEnterScene not implemented")
}
func (UnimplementedSceneSceneClientPlayerServer) SceneInfoC2S(context.Context, *SceneInfoRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SceneInfoC2S not implemented")
}
func (UnimplementedSceneSceneClientPlayerServer) NotifySceneInfo(context.Context, *SceneInfoS2C) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifySceneInfo not implemented")
}
func (UnimplementedSceneSceneClientPlayerServer) NotifyActorCreate(context.Context, *ActorCreateS2C) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyActorCreate not implemented")
}
func (UnimplementedSceneSceneClientPlayerServer) NotifyActorDestroy(context.Context, *ActorDestroyS2C) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyActorDestroy not implemented")
}
func (UnimplementedSceneSceneClientPlayerServer) NotifyActorListCreate(context.Context, *ActorListCreateS2C) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyActorListCreate not implemented")
}
func (UnimplementedSceneSceneClientPlayerServer) NotifyActorListDestroy(context.Context, *ActorListDestroyS2C) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyActorListDestroy not implemented")
}
func (UnimplementedSceneSceneClientPlayerServer) mustEmbedUnimplementedSceneSceneClientPlayerServer() {
}
func (UnimplementedSceneSceneClientPlayerServer) testEmbeddedByValue() {}

// UnsafeSceneSceneClientPlayerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SceneSceneClientPlayerServer will
// result in compilation errors.
type UnsafeSceneSceneClientPlayerServer interface {
	mustEmbedUnimplementedSceneSceneClientPlayerServer()
}

func RegisterSceneSceneClientPlayerServer(s grpc.ServiceRegistrar, srv SceneSceneClientPlayerServer) {
	// If the following call pancis, it indicates UnimplementedSceneSceneClientPlayerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SceneSceneClientPlayer_ServiceDesc, srv)
}

func _SceneSceneClientPlayer_EnterScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterSceneC2SRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneSceneClientPlayerServer).EnterScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SceneSceneClientPlayer_EnterScene_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneSceneClientPlayerServer).EnterScene(ctx, req.(*EnterSceneC2SRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SceneSceneClientPlayer_NotifyEnterScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterSceneS2C)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneSceneClientPlayerServer).NotifyEnterScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SceneSceneClientPlayer_NotifyEnterScene_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneSceneClientPlayerServer).NotifyEnterScene(ctx, req.(*EnterSceneS2C))
	}
	return interceptor(ctx, in, info, handler)
}

func _SceneSceneClientPlayer_SceneInfoC2S_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SceneInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneSceneClientPlayerServer).SceneInfoC2S(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SceneSceneClientPlayer_SceneInfoC2S_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneSceneClientPlayerServer).SceneInfoC2S(ctx, req.(*SceneInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SceneSceneClientPlayer_NotifySceneInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SceneInfoS2C)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneSceneClientPlayerServer).NotifySceneInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SceneSceneClientPlayer_NotifySceneInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneSceneClientPlayerServer).NotifySceneInfo(ctx, req.(*SceneInfoS2C))
	}
	return interceptor(ctx, in, info, handler)
}

func _SceneSceneClientPlayer_NotifyActorCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActorCreateS2C)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneSceneClientPlayerServer).NotifyActorCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SceneSceneClientPlayer_NotifyActorCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneSceneClientPlayerServer).NotifyActorCreate(ctx, req.(*ActorCreateS2C))
	}
	return interceptor(ctx, in, info, handler)
}

func _SceneSceneClientPlayer_NotifyActorDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActorDestroyS2C)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneSceneClientPlayerServer).NotifyActorDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SceneSceneClientPlayer_NotifyActorDestroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneSceneClientPlayerServer).NotifyActorDestroy(ctx, req.(*ActorDestroyS2C))
	}
	return interceptor(ctx, in, info, handler)
}

func _SceneSceneClientPlayer_NotifyActorListCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActorListCreateS2C)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneSceneClientPlayerServer).NotifyActorListCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SceneSceneClientPlayer_NotifyActorListCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneSceneClientPlayerServer).NotifyActorListCreate(ctx, req.(*ActorListCreateS2C))
	}
	return interceptor(ctx, in, info, handler)
}

func _SceneSceneClientPlayer_NotifyActorListDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActorListDestroyS2C)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneSceneClientPlayerServer).NotifyActorListDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SceneSceneClientPlayer_NotifyActorListDestroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneSceneClientPlayerServer).NotifyActorListDestroy(ctx, req.(*ActorListDestroyS2C))
	}
	return interceptor(ctx, in, info, handler)
}

// SceneSceneClientPlayer_ServiceDesc is the grpc.ServiceDesc for SceneSceneClientPlayer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SceneSceneClientPlayer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SceneSceneClientPlayer",
	HandlerType: (*SceneSceneClientPlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnterScene",
			Handler:    _SceneSceneClientPlayer_EnterScene_Handler,
		},
		{
			MethodName: "NotifyEnterScene",
			Handler:    _SceneSceneClientPlayer_NotifyEnterScene_Handler,
		},
		{
			MethodName: "SceneInfoC2S",
			Handler:    _SceneSceneClientPlayer_SceneInfoC2S_Handler,
		},
		{
			MethodName: "NotifySceneInfo",
			Handler:    _SceneSceneClientPlayer_NotifySceneInfo_Handler,
		},
		{
			MethodName: "NotifyActorCreate",
			Handler:    _SceneSceneClientPlayer_NotifyActorCreate_Handler,
		},
		{
			MethodName: "NotifyActorDestroy",
			Handler:    _SceneSceneClientPlayer_NotifyActorDestroy_Handler,
		},
		{
			MethodName: "NotifyActorListCreate",
			Handler:    _SceneSceneClientPlayer_NotifyActorListCreate_Handler,
		},
		{
			MethodName: "NotifyActorListDestroy",
			Handler:    _SceneSceneClientPlayer_NotifyActorListDestroy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/cpp/rpc/scene/player_scene.proto",
}
