// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/service/cpp/rpc/scene/game_player.proto

package player_locator_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScenePlayer_Centre2GsLogin_FullMethodName = "/ScenePlayer/Centre2GsLogin"
	ScenePlayer_ExitGame_FullMethodName       = "/ScenePlayer/ExitGame"
)

// ScenePlayerClient is the client API for ScenePlayer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScenePlayerClient interface {
	Centre2GsLogin(ctx context.Context, in *Centre2GsLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ExitGame(ctx context.Context, in *GameNodeExitGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type scenePlayerClient struct {
	cc grpc.ClientConnInterface
}

func NewScenePlayerClient(cc grpc.ClientConnInterface) ScenePlayerClient {
	return &scenePlayerClient{cc}
}

func (c *scenePlayerClient) Centre2GsLogin(ctx context.Context, in *Centre2GsLoginRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ScenePlayer_Centre2GsLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenePlayerClient) ExitGame(ctx context.Context, in *GameNodeExitGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ScenePlayer_ExitGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScenePlayerServer is the server API for ScenePlayer service.
// All implementations must embed UnimplementedScenePlayerServer
// for forward compatibility.
type ScenePlayerServer interface {
	Centre2GsLogin(context.Context, *Centre2GsLoginRequest) (*emptypb.Empty, error)
	ExitGame(context.Context, *GameNodeExitGameRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedScenePlayerServer()
}

// UnimplementedScenePlayerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScenePlayerServer struct{}

func (UnimplementedScenePlayerServer) Centre2GsLogin(context.Context, *Centre2GsLoginRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Centre2GsLogin not implemented")
}
func (UnimplementedScenePlayerServer) ExitGame(context.Context, *GameNodeExitGameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitGame not implemented")
}
func (UnimplementedScenePlayerServer) mustEmbedUnimplementedScenePlayerServer() {}
func (UnimplementedScenePlayerServer) testEmbeddedByValue()                     {}

// UnsafeScenePlayerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScenePlayerServer will
// result in compilation errors.
type UnsafeScenePlayerServer interface {
	mustEmbedUnimplementedScenePlayerServer()
}

func RegisterScenePlayerServer(s grpc.ServiceRegistrar, srv ScenePlayerServer) {
	// If the following call pancis, it indicates UnimplementedScenePlayerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScenePlayer_ServiceDesc, srv)
}

func _ScenePlayer_Centre2GsLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Centre2GsLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenePlayerServer).Centre2GsLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenePlayer_Centre2GsLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenePlayerServer).Centre2GsLogin(ctx, req.(*Centre2GsLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScenePlayer_ExitGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameNodeExitGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenePlayerServer).ExitGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenePlayer_ExitGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenePlayerServer).ExitGame(ctx, req.(*GameNodeExitGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScenePlayer_ServiceDesc is the grpc.ServiceDesc for ScenePlayer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScenePlayer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ScenePlayer",
	HandlerType: (*ScenePlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Centre2GsLogin",
			Handler:    _ScenePlayer_Centre2GsLogin_Handler,
		},
		{
			MethodName: "ExitGame",
			Handler:    _ScenePlayer_ExitGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/cpp/rpc/scene/game_player.proto",
}
