// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.0
// Source: player_locator.proto

package playerlocator

import (
	"context"

	"player_locator/game/generated/pb/game"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	PlayerId       = game.PlayerId
	PlayerLocation = game.PlayerLocation

	PlayerLocator interface {
		SetLocation(ctx context.Context, in *PlayerLocation, opts ...grpc.CallOption) (*Empty, error)
		GetLocation(ctx context.Context, in *PlayerId, opts ...grpc.CallOption) (*PlayerLocation, error)
		MarkOffline(ctx context.Context, in *PlayerId, opts ...grpc.CallOption) (*Empty, error)
	}

	defaultPlayerLocator struct {
		cli zrpc.Client
	}
)

func NewPlayerLocator(cli zrpc.Client) PlayerLocator {
	return &defaultPlayerLocator{
		cli: cli,
	}
}

func (m *defaultPlayerLocator) SetLocation(ctx context.Context, in *PlayerLocation, opts ...grpc.CallOption) (*Empty, error) {
	client := game.NewPlayerLocatorClient(m.cli.Conn())
	return client.SetLocation(ctx, in, opts...)
}

func (m *defaultPlayerLocator) GetLocation(ctx context.Context, in *PlayerId, opts ...grpc.CallOption) (*PlayerLocation, error) {
	client := game.NewPlayerLocatorClient(m.cli.Conn())
	return client.GetLocation(ctx, in, opts...)
}

func (m *defaultPlayerLocator) MarkOffline(ctx context.Context, in *PlayerId, opts ...grpc.CallOption) (*Empty, error) {
	client := game.NewPlayerLocatorClient(m.cli.Conn())
	return client.MarkOffline(ctx, in, opts...)
}
