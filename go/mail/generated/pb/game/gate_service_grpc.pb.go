// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/service/cpp/rpc/gate/gate_service.proto

package game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Gate_PlayerEnterGameNode_FullMethodName = "/Gate/PlayerEnterGameNode"
	Gate_SendMessageToPlayer_FullMethodName = "/Gate/SendMessageToPlayer"
	Gate_KickSessionByCentre_FullMethodName = "/Gate/KickSessionByCentre"
	Gate_RouteNodeMessage_FullMethodName    = "/Gate/RouteNodeMessage"
	Gate_RoutePlayerMessage_FullMethodName  = "/Gate/RoutePlayerMessage"
	Gate_BroadcastToPlayers_FullMethodName  = "/Gate/BroadcastToPlayers"
	Gate_NodeHandshake_FullMethodName       = "/Gate/NodeHandshake"
)

// GateClient is the client API for Gate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GateClient interface {
	PlayerEnterGameNode(ctx context.Context, in *RegisterGameNodeSessionRequest, opts ...grpc.CallOption) (*RegisterGameNodeSessionResponse, error)
	SendMessageToPlayer(ctx context.Context, in *NodeRouteMessageRequest, opts ...grpc.CallOption) (*Empty, error)
	KickSessionByCentre(ctx context.Context, in *KickSessionRequest, opts ...grpc.CallOption) (*Empty, error)
	RouteNodeMessage(ctx context.Context, in *RouteMessageRequest, opts ...grpc.CallOption) (*RouteMessageResponse, error)
	RoutePlayerMessage(ctx context.Context, in *RoutePlayerMessageRequest, opts ...grpc.CallOption) (*RoutePlayerMessageResponse, error)
	BroadcastToPlayers(ctx context.Context, in *BroadcastToPlayersRequest, opts ...grpc.CallOption) (*Empty, error)
	NodeHandshake(ctx context.Context, in *NodeHandshakeRequest, opts ...grpc.CallOption) (*NodeHandshakeResponse, error)
}

type gateClient struct {
	cc grpc.ClientConnInterface
}

func NewGateClient(cc grpc.ClientConnInterface) GateClient {
	return &gateClient{cc}
}

func (c *gateClient) PlayerEnterGameNode(ctx context.Context, in *RegisterGameNodeSessionRequest, opts ...grpc.CallOption) (*RegisterGameNodeSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterGameNodeSessionResponse)
	err := c.cc.Invoke(ctx, Gate_PlayerEnterGameNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) SendMessageToPlayer(ctx context.Context, in *NodeRouteMessageRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Gate_SendMessageToPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) KickSessionByCentre(ctx context.Context, in *KickSessionRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Gate_KickSessionByCentre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) RouteNodeMessage(ctx context.Context, in *RouteMessageRequest, opts ...grpc.CallOption) (*RouteMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RouteMessageResponse)
	err := c.cc.Invoke(ctx, Gate_RouteNodeMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) RoutePlayerMessage(ctx context.Context, in *RoutePlayerMessageRequest, opts ...grpc.CallOption) (*RoutePlayerMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoutePlayerMessageResponse)
	err := c.cc.Invoke(ctx, Gate_RoutePlayerMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) BroadcastToPlayers(ctx context.Context, in *BroadcastToPlayersRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Gate_BroadcastToPlayers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateClient) NodeHandshake(ctx context.Context, in *NodeHandshakeRequest, opts ...grpc.CallOption) (*NodeHandshakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeHandshakeResponse)
	err := c.cc.Invoke(ctx, Gate_NodeHandshake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GateServer is the server API for Gate service.
// All implementations must embed UnimplementedGateServer
// for forward compatibility.
type GateServer interface {
	PlayerEnterGameNode(context.Context, *RegisterGameNodeSessionRequest) (*RegisterGameNodeSessionResponse, error)
	SendMessageToPlayer(context.Context, *NodeRouteMessageRequest) (*Empty, error)
	KickSessionByCentre(context.Context, *KickSessionRequest) (*Empty, error)
	RouteNodeMessage(context.Context, *RouteMessageRequest) (*RouteMessageResponse, error)
	RoutePlayerMessage(context.Context, *RoutePlayerMessageRequest) (*RoutePlayerMessageResponse, error)
	BroadcastToPlayers(context.Context, *BroadcastToPlayersRequest) (*Empty, error)
	NodeHandshake(context.Context, *NodeHandshakeRequest) (*NodeHandshakeResponse, error)
	mustEmbedUnimplementedGateServer()
}

// UnimplementedGateServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGateServer struct{}

func (UnimplementedGateServer) PlayerEnterGameNode(context.Context, *RegisterGameNodeSessionRequest) (*RegisterGameNodeSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerEnterGameNode not implemented")
}
func (UnimplementedGateServer) SendMessageToPlayer(context.Context, *NodeRouteMessageRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessageToPlayer not implemented")
}
func (UnimplementedGateServer) KickSessionByCentre(context.Context, *KickSessionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickSessionByCentre not implemented")
}
func (UnimplementedGateServer) RouteNodeMessage(context.Context, *RouteMessageRequest) (*RouteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouteNodeMessage not implemented")
}
func (UnimplementedGateServer) RoutePlayerMessage(context.Context, *RoutePlayerMessageRequest) (*RoutePlayerMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoutePlayerMessage not implemented")
}
func (UnimplementedGateServer) BroadcastToPlayers(context.Context, *BroadcastToPlayersRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastToPlayers not implemented")
}
func (UnimplementedGateServer) NodeHandshake(context.Context, *NodeHandshakeRequest) (*NodeHandshakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeHandshake not implemented")
}
func (UnimplementedGateServer) mustEmbedUnimplementedGateServer() {}
func (UnimplementedGateServer) testEmbeddedByValue()              {}

// UnsafeGateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GateServer will
// result in compilation errors.
type UnsafeGateServer interface {
	mustEmbedUnimplementedGateServer()
}

func RegisterGateServer(s grpc.ServiceRegistrar, srv GateServer) {
	// If the following call pancis, it indicates UnimplementedGateServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Gate_ServiceDesc, srv)
}

func _Gate_PlayerEnterGameNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterGameNodeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).PlayerEnterGameNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_PlayerEnterGameNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).PlayerEnterGameNode(ctx, req.(*RegisterGameNodeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_SendMessageToPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRouteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).SendMessageToPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_SendMessageToPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).SendMessageToPlayer(ctx, req.(*NodeRouteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_KickSessionByCentre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).KickSessionByCentre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_KickSessionByCentre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).KickSessionByCentre(ctx, req.(*KickSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_RouteNodeMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).RouteNodeMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_RouteNodeMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).RouteNodeMessage(ctx, req.(*RouteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_RoutePlayerMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutePlayerMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).RoutePlayerMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_RoutePlayerMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).RoutePlayerMessage(ctx, req.(*RoutePlayerMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_BroadcastToPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastToPlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).BroadcastToPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_BroadcastToPlayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).BroadcastToPlayers(ctx, req.(*BroadcastToPlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gate_NodeHandshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeHandshakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateServer).NodeHandshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gate_NodeHandshake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateServer).NodeHandshake(ctx, req.(*NodeHandshakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gate_ServiceDesc is the grpc.ServiceDesc for Gate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Gate",
	HandlerType: (*GateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlayerEnterGameNode",
			Handler:    _Gate_PlayerEnterGameNode_Handler,
		},
		{
			MethodName: "SendMessageToPlayer",
			Handler:    _Gate_SendMessageToPlayer_Handler,
		},
		{
			MethodName: "KickSessionByCentre",
			Handler:    _Gate_KickSessionByCentre_Handler,
		},
		{
			MethodName: "RouteNodeMessage",
			Handler:    _Gate_RouteNodeMessage_Handler,
		},
		{
			MethodName: "RoutePlayerMessage",
			Handler:    _Gate_RoutePlayerMessage_Handler,
		},
		{
			MethodName: "BroadcastToPlayers",
			Handler:    _Gate_BroadcastToPlayers_Handler,
		},
		{
			MethodName: "NodeHandshake",
			Handler:    _Gate_NodeHandshake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/cpp/rpc/gate/gate_service.proto",
}
