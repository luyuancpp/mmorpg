// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/service/cpp/rpc/centre/centre_scene.proto

package game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CentreScene_RegisterScene_FullMethodName   = "/CentreScene/RegisterScene"
	CentreScene_UnRegisterScene_FullMethodName = "/CentreScene/UnRegisterScene"
)

// CentreSceneClient is the client API for CentreScene service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 正常或者顶号进入场景
// 断线重连进入场景,断线重连分时间
type CentreSceneClient interface {
	RegisterScene(ctx context.Context, in *RegisterSceneRequest, opts ...grpc.CallOption) (*RegisterSceneResponse, error)
	UnRegisterScene(ctx context.Context, in *UnRegisterSceneRequest, opts ...grpc.CallOption) (*Empty, error)
}

type centreSceneClient struct {
	cc grpc.ClientConnInterface
}

func NewCentreSceneClient(cc grpc.ClientConnInterface) CentreSceneClient {
	return &centreSceneClient{cc}
}

func (c *centreSceneClient) RegisterScene(ctx context.Context, in *RegisterSceneRequest, opts ...grpc.CallOption) (*RegisterSceneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterSceneResponse)
	err := c.cc.Invoke(ctx, CentreScene_RegisterScene_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centreSceneClient) UnRegisterScene(ctx context.Context, in *UnRegisterSceneRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CentreScene_UnRegisterScene_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CentreSceneServer is the server API for CentreScene service.
// All implementations must embed UnimplementedCentreSceneServer
// for forward compatibility.
//
// 正常或者顶号进入场景
// 断线重连进入场景,断线重连分时间
type CentreSceneServer interface {
	RegisterScene(context.Context, *RegisterSceneRequest) (*RegisterSceneResponse, error)
	UnRegisterScene(context.Context, *UnRegisterSceneRequest) (*Empty, error)
	mustEmbedUnimplementedCentreSceneServer()
}

// UnimplementedCentreSceneServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCentreSceneServer struct{}

func (UnimplementedCentreSceneServer) RegisterScene(context.Context, *RegisterSceneRequest) (*RegisterSceneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterScene not implemented")
}
func (UnimplementedCentreSceneServer) UnRegisterScene(context.Context, *UnRegisterSceneRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnRegisterScene not implemented")
}
func (UnimplementedCentreSceneServer) mustEmbedUnimplementedCentreSceneServer() {}
func (UnimplementedCentreSceneServer) testEmbeddedByValue()                     {}

// UnsafeCentreSceneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CentreSceneServer will
// result in compilation errors.
type UnsafeCentreSceneServer interface {
	mustEmbedUnimplementedCentreSceneServer()
}

func RegisterCentreSceneServer(s grpc.ServiceRegistrar, srv CentreSceneServer) {
	// If the following call pancis, it indicates UnimplementedCentreSceneServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CentreScene_ServiceDesc, srv)
}

func _CentreScene_RegisterScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentreSceneServer).RegisterScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CentreScene_RegisterScene_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentreSceneServer).RegisterScene(ctx, req.(*RegisterSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentreScene_UnRegisterScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnRegisterSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentreSceneServer).UnRegisterScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CentreScene_UnRegisterScene_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentreSceneServer).UnRegisterScene(ctx, req.(*UnRegisterSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CentreScene_ServiceDesc is the grpc.ServiceDesc for CentreScene service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CentreScene_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CentreScene",
	HandlerType: (*CentreSceneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterScene",
			Handler:    _CentreScene_RegisterScene_Handler,
		},
		{
			MethodName: "UnRegisterScene",
			Handler:    _CentreScene_UnRegisterScene_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/cpp/rpc/centre/centre_scene.proto",
}
