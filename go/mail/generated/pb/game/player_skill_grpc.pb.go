// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/service/cpp/rpc/scene/player_skill.proto

package game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SceneSkillClientPlayer_ReleaseSkill_FullMethodName           = "/SceneSkillClientPlayer/ReleaseSkill"
	SceneSkillClientPlayer_NotifySkillUsed_FullMethodName        = "/SceneSkillClientPlayer/NotifySkillUsed"
	SceneSkillClientPlayer_NotifySkillInterrupted_FullMethodName = "/SceneSkillClientPlayer/NotifySkillInterrupted"
	SceneSkillClientPlayer_GetSkillList_FullMethodName           = "/SceneSkillClientPlayer/GetSkillList"
)

// SceneSkillClientPlayerClient is the client API for SceneSkillClientPlayer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SceneSkillClientPlayerClient interface {
	ReleaseSkill(ctx context.Context, in *ReleaseSkillSkillRequest, opts ...grpc.CallOption) (*ReleaseSkillSkillResponse, error)
	NotifySkillUsed(ctx context.Context, in *SkillUsedS2C, opts ...grpc.CallOption) (*Empty, error)
	NotifySkillInterrupted(ctx context.Context, in *SkillInterruptedS2C, opts ...grpc.CallOption) (*Empty, error)
	GetSkillList(ctx context.Context, in *GetSkillListRequest, opts ...grpc.CallOption) (*GetSkillListResponse, error)
}

type sceneSkillClientPlayerClient struct {
	cc grpc.ClientConnInterface
}

func NewSceneSkillClientPlayerClient(cc grpc.ClientConnInterface) SceneSkillClientPlayerClient {
	return &sceneSkillClientPlayerClient{cc}
}

func (c *sceneSkillClientPlayerClient) ReleaseSkill(ctx context.Context, in *ReleaseSkillSkillRequest, opts ...grpc.CallOption) (*ReleaseSkillSkillResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseSkillSkillResponse)
	err := c.cc.Invoke(ctx, SceneSkillClientPlayer_ReleaseSkill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneSkillClientPlayerClient) NotifySkillUsed(ctx context.Context, in *SkillUsedS2C, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SceneSkillClientPlayer_NotifySkillUsed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneSkillClientPlayerClient) NotifySkillInterrupted(ctx context.Context, in *SkillInterruptedS2C, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SceneSkillClientPlayer_NotifySkillInterrupted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneSkillClientPlayerClient) GetSkillList(ctx context.Context, in *GetSkillListRequest, opts ...grpc.CallOption) (*GetSkillListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSkillListResponse)
	err := c.cc.Invoke(ctx, SceneSkillClientPlayer_GetSkillList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SceneSkillClientPlayerServer is the server API for SceneSkillClientPlayer service.
// All implementations must embed UnimplementedSceneSkillClientPlayerServer
// for forward compatibility.
type SceneSkillClientPlayerServer interface {
	ReleaseSkill(context.Context, *ReleaseSkillSkillRequest) (*ReleaseSkillSkillResponse, error)
	NotifySkillUsed(context.Context, *SkillUsedS2C) (*Empty, error)
	NotifySkillInterrupted(context.Context, *SkillInterruptedS2C) (*Empty, error)
	GetSkillList(context.Context, *GetSkillListRequest) (*GetSkillListResponse, error)
	mustEmbedUnimplementedSceneSkillClientPlayerServer()
}

// UnimplementedSceneSkillClientPlayerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSceneSkillClientPlayerServer struct{}

func (UnimplementedSceneSkillClientPlayerServer) ReleaseSkill(context.Context, *ReleaseSkillSkillRequest) (*ReleaseSkillSkillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseSkill not implemented")
}
func (UnimplementedSceneSkillClientPlayerServer) NotifySkillUsed(context.Context, *SkillUsedS2C) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifySkillUsed not implemented")
}
func (UnimplementedSceneSkillClientPlayerServer) NotifySkillInterrupted(context.Context, *SkillInterruptedS2C) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifySkillInterrupted not implemented")
}
func (UnimplementedSceneSkillClientPlayerServer) GetSkillList(context.Context, *GetSkillListRequest) (*GetSkillListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkillList not implemented")
}
func (UnimplementedSceneSkillClientPlayerServer) mustEmbedUnimplementedSceneSkillClientPlayerServer() {
}
func (UnimplementedSceneSkillClientPlayerServer) testEmbeddedByValue() {}

// UnsafeSceneSkillClientPlayerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SceneSkillClientPlayerServer will
// result in compilation errors.
type UnsafeSceneSkillClientPlayerServer interface {
	mustEmbedUnimplementedSceneSkillClientPlayerServer()
}

func RegisterSceneSkillClientPlayerServer(s grpc.ServiceRegistrar, srv SceneSkillClientPlayerServer) {
	// If the following call pancis, it indicates UnimplementedSceneSkillClientPlayerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SceneSkillClientPlayer_ServiceDesc, srv)
}

func _SceneSkillClientPlayer_ReleaseSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseSkillSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneSkillClientPlayerServer).ReleaseSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SceneSkillClientPlayer_ReleaseSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneSkillClientPlayerServer).ReleaseSkill(ctx, req.(*ReleaseSkillSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SceneSkillClientPlayer_NotifySkillUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkillUsedS2C)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneSkillClientPlayerServer).NotifySkillUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SceneSkillClientPlayer_NotifySkillUsed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneSkillClientPlayerServer).NotifySkillUsed(ctx, req.(*SkillUsedS2C))
	}
	return interceptor(ctx, in, info, handler)
}

func _SceneSkillClientPlayer_NotifySkillInterrupted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkillInterruptedS2C)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneSkillClientPlayerServer).NotifySkillInterrupted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SceneSkillClientPlayer_NotifySkillInterrupted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneSkillClientPlayerServer).NotifySkillInterrupted(ctx, req.(*SkillInterruptedS2C))
	}
	return interceptor(ctx, in, info, handler)
}

func _SceneSkillClientPlayer_GetSkillList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkillListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneSkillClientPlayerServer).GetSkillList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SceneSkillClientPlayer_GetSkillList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneSkillClientPlayerServer).GetSkillList(ctx, req.(*GetSkillListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SceneSkillClientPlayer_ServiceDesc is the grpc.ServiceDesc for SceneSkillClientPlayer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SceneSkillClientPlayer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SceneSkillClientPlayer",
	HandlerType: (*SceneSkillClientPlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReleaseSkill",
			Handler:    _SceneSkillClientPlayer_ReleaseSkill_Handler,
		},
		{
			MethodName: "NotifySkillUsed",
			Handler:    _SceneSkillClientPlayer_NotifySkillUsed_Handler,
		},
		{
			MethodName: "NotifySkillInterrupted",
			Handler:    _SceneSkillClientPlayer_NotifySkillInterrupted_Handler,
		},
		{
			MethodName: "GetSkillList",
			Handler:    _SceneSkillClientPlayer_GetSkillList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/cpp/rpc/scene/player_skill.proto",
}
