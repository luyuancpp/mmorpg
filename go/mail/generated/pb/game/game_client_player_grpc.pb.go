// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/service/rpc/scene/game_client_player.proto

package game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SceneClientPlayerCommon_SendTipToClient_FullMethodName = "/SceneClientPlayerCommon/SendTipToClient"
	SceneClientPlayerCommon_KickPlayer_FullMethodName      = "/SceneClientPlayerCommon/KickPlayer"
)

// SceneClientPlayerCommonClient is the client API for SceneClientPlayerCommon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SceneClientPlayerCommonClient interface {
	SendTipToClient(ctx context.Context, in *TipInfoMessage, opts ...grpc.CallOption) (*Empty, error)
	KickPlayer(ctx context.Context, in *GameKickPlayerRequest, opts ...grpc.CallOption) (*Empty, error)
}

type sceneClientPlayerCommonClient struct {
	cc grpc.ClientConnInterface
}

func NewSceneClientPlayerCommonClient(cc grpc.ClientConnInterface) SceneClientPlayerCommonClient {
	return &sceneClientPlayerCommonClient{cc}
}

func (c *sceneClientPlayerCommonClient) SendTipToClient(ctx context.Context, in *TipInfoMessage, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SceneClientPlayerCommon_SendTipToClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneClientPlayerCommonClient) KickPlayer(ctx context.Context, in *GameKickPlayerRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SceneClientPlayerCommon_KickPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SceneClientPlayerCommonServer is the server API for SceneClientPlayerCommon service.
// All implementations must embed UnimplementedSceneClientPlayerCommonServer
// for forward compatibility.
type SceneClientPlayerCommonServer interface {
	SendTipToClient(context.Context, *TipInfoMessage) (*Empty, error)
	KickPlayer(context.Context, *GameKickPlayerRequest) (*Empty, error)
	mustEmbedUnimplementedSceneClientPlayerCommonServer()
}

// UnimplementedSceneClientPlayerCommonServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSceneClientPlayerCommonServer struct{}

func (UnimplementedSceneClientPlayerCommonServer) SendTipToClient(context.Context, *TipInfoMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTipToClient not implemented")
}
func (UnimplementedSceneClientPlayerCommonServer) KickPlayer(context.Context, *GameKickPlayerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickPlayer not implemented")
}
func (UnimplementedSceneClientPlayerCommonServer) mustEmbedUnimplementedSceneClientPlayerCommonServer() {
}
func (UnimplementedSceneClientPlayerCommonServer) testEmbeddedByValue() {}

// UnsafeSceneClientPlayerCommonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SceneClientPlayerCommonServer will
// result in compilation errors.
type UnsafeSceneClientPlayerCommonServer interface {
	mustEmbedUnimplementedSceneClientPlayerCommonServer()
}

func RegisterSceneClientPlayerCommonServer(s grpc.ServiceRegistrar, srv SceneClientPlayerCommonServer) {
	// If the following call pancis, it indicates UnimplementedSceneClientPlayerCommonServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SceneClientPlayerCommon_ServiceDesc, srv)
}

func _SceneClientPlayerCommon_SendTipToClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TipInfoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneClientPlayerCommonServer).SendTipToClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SceneClientPlayerCommon_SendTipToClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneClientPlayerCommonServer).SendTipToClient(ctx, req.(*TipInfoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SceneClientPlayerCommon_KickPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameKickPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneClientPlayerCommonServer).KickPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SceneClientPlayerCommon_KickPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneClientPlayerCommonServer).KickPlayer(ctx, req.(*GameKickPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SceneClientPlayerCommon_ServiceDesc is the grpc.ServiceDesc for SceneClientPlayerCommon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SceneClientPlayerCommon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SceneClientPlayerCommon",
	HandlerType: (*SceneClientPlayerCommonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTipToClient",
			Handler:    _SceneClientPlayerCommon_SendTipToClient_Handler,
		},
		{
			MethodName: "KickPlayer",
			Handler:    _SceneClientPlayerCommon_KickPlayer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/rpc/scene/game_client_player.proto",
}
