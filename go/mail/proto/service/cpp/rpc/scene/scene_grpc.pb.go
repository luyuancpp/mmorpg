// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/service/cpp/rpc/scene/scene.proto

package mail_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "mail/proto/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Scene_PlayerEnterGameNode_FullMethodName           = "/Scene/PlayerEnterGameNode"
	Scene_SendMessageToPlayer_FullMethodName           = "/Scene/SendMessageToPlayer"
	Scene_ClientSendMessageToPlayer_FullMethodName     = "/Scene/ClientSendMessageToPlayer"
	Scene_CentreSendToPlayerViaGameNode_FullMethodName = "/Scene/CentreSendToPlayerViaGameNode"
	Scene_InvokePlayerService_FullMethodName           = "/Scene/InvokePlayerService"
	Scene_RouteNodeStringMsg_FullMethodName            = "/Scene/RouteNodeStringMsg"
	Scene_RoutePlayerStringMsg_FullMethodName          = "/Scene/RoutePlayerStringMsg"
	Scene_UpdateSessionDetail_FullMethodName           = "/Scene/UpdateSessionDetail"
	Scene_EnterScene_FullMethodName                    = "/Scene/EnterScene"
	Scene_CreateScene_FullMethodName                   = "/Scene/CreateScene"
	Scene_NodeHandshake_FullMethodName                 = "/Scene/NodeHandshake"
)

// SceneClient is the client API for Scene service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SceneClient interface {
	PlayerEnterGameNode(ctx context.Context, in *PlayerEnterGameNodeRequest, opts ...grpc.CallOption) (*common.Empty, error)
	SendMessageToPlayer(ctx context.Context, in *common.NodeRouteMessageRequest, opts ...grpc.CallOption) (*common.NodeRouteMessageResponse, error)
	ClientSendMessageToPlayer(ctx context.Context, in *ClientSendMessageToPlayerRequest, opts ...grpc.CallOption) (*ClientSendMessageToPlayerResponse, error)
	CentreSendToPlayerViaGameNode(ctx context.Context, in *common.NodeRouteMessageRequest, opts ...grpc.CallOption) (*common.Empty, error)
	InvokePlayerService(ctx context.Context, in *common.NodeRouteMessageRequest, opts ...grpc.CallOption) (*common.NodeRouteMessageResponse, error)
	RouteNodeStringMsg(ctx context.Context, in *common.RouteMessageRequest, opts ...grpc.CallOption) (*common.RouteMessageResponse, error)
	RoutePlayerStringMsg(ctx context.Context, in *common.RoutePlayerMessageRequest, opts ...grpc.CallOption) (*common.RoutePlayerMessageResponse, error)
	UpdateSessionDetail(ctx context.Context, in *RegisterPlayerSessionRequest, opts ...grpc.CallOption) (*common.Empty, error)
	EnterScene(ctx context.Context, in *Centre2GsEnterSceneRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreateScene(ctx context.Context, in *CreateSceneRequest, opts ...grpc.CallOption) (*CreateSceneResponse, error)
	NodeHandshake(ctx context.Context, in *common.NodeHandshakeRequest, opts ...grpc.CallOption) (*common.NodeHandshakeResponse, error)
}

type sceneClient struct {
	cc grpc.ClientConnInterface
}

func NewSceneClient(cc grpc.ClientConnInterface) SceneClient {
	return &sceneClient{cc}
}

func (c *sceneClient) PlayerEnterGameNode(ctx context.Context, in *PlayerEnterGameNodeRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, Scene_PlayerEnterGameNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneClient) SendMessageToPlayer(ctx context.Context, in *common.NodeRouteMessageRequest, opts ...grpc.CallOption) (*common.NodeRouteMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.NodeRouteMessageResponse)
	err := c.cc.Invoke(ctx, Scene_SendMessageToPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneClient) ClientSendMessageToPlayer(ctx context.Context, in *ClientSendMessageToPlayerRequest, opts ...grpc.CallOption) (*ClientSendMessageToPlayerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientSendMessageToPlayerResponse)
	err := c.cc.Invoke(ctx, Scene_ClientSendMessageToPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneClient) CentreSendToPlayerViaGameNode(ctx context.Context, in *common.NodeRouteMessageRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, Scene_CentreSendToPlayerViaGameNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneClient) InvokePlayerService(ctx context.Context, in *common.NodeRouteMessageRequest, opts ...grpc.CallOption) (*common.NodeRouteMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.NodeRouteMessageResponse)
	err := c.cc.Invoke(ctx, Scene_InvokePlayerService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneClient) RouteNodeStringMsg(ctx context.Context, in *common.RouteMessageRequest, opts ...grpc.CallOption) (*common.RouteMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.RouteMessageResponse)
	err := c.cc.Invoke(ctx, Scene_RouteNodeStringMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneClient) RoutePlayerStringMsg(ctx context.Context, in *common.RoutePlayerMessageRequest, opts ...grpc.CallOption) (*common.RoutePlayerMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.RoutePlayerMessageResponse)
	err := c.cc.Invoke(ctx, Scene_RoutePlayerStringMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneClient) UpdateSessionDetail(ctx context.Context, in *RegisterPlayerSessionRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, Scene_UpdateSessionDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneClient) EnterScene(ctx context.Context, in *Centre2GsEnterSceneRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, Scene_EnterScene_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneClient) CreateScene(ctx context.Context, in *CreateSceneRequest, opts ...grpc.CallOption) (*CreateSceneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSceneResponse)
	err := c.cc.Invoke(ctx, Scene_CreateScene_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneClient) NodeHandshake(ctx context.Context, in *common.NodeHandshakeRequest, opts ...grpc.CallOption) (*common.NodeHandshakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.NodeHandshakeResponse)
	err := c.cc.Invoke(ctx, Scene_NodeHandshake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SceneServer is the server API for Scene service.
// All implementations must embed UnimplementedSceneServer
// for forward compatibility.
type SceneServer interface {
	PlayerEnterGameNode(context.Context, *PlayerEnterGameNodeRequest) (*common.Empty, error)
	SendMessageToPlayer(context.Context, *common.NodeRouteMessageRequest) (*common.NodeRouteMessageResponse, error)
	ClientSendMessageToPlayer(context.Context, *ClientSendMessageToPlayerRequest) (*ClientSendMessageToPlayerResponse, error)
	CentreSendToPlayerViaGameNode(context.Context, *common.NodeRouteMessageRequest) (*common.Empty, error)
	InvokePlayerService(context.Context, *common.NodeRouteMessageRequest) (*common.NodeRouteMessageResponse, error)
	RouteNodeStringMsg(context.Context, *common.RouteMessageRequest) (*common.RouteMessageResponse, error)
	RoutePlayerStringMsg(context.Context, *common.RoutePlayerMessageRequest) (*common.RoutePlayerMessageResponse, error)
	UpdateSessionDetail(context.Context, *RegisterPlayerSessionRequest) (*common.Empty, error)
	EnterScene(context.Context, *Centre2GsEnterSceneRequest) (*common.Empty, error)
	CreateScene(context.Context, *CreateSceneRequest) (*CreateSceneResponse, error)
	NodeHandshake(context.Context, *common.NodeHandshakeRequest) (*common.NodeHandshakeResponse, error)
	mustEmbedUnimplementedSceneServer()
}

// UnimplementedSceneServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSceneServer struct{}

func (UnimplementedSceneServer) PlayerEnterGameNode(context.Context, *PlayerEnterGameNodeRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerEnterGameNode not implemented")
}
func (UnimplementedSceneServer) SendMessageToPlayer(context.Context, *common.NodeRouteMessageRequest) (*common.NodeRouteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessageToPlayer not implemented")
}
func (UnimplementedSceneServer) ClientSendMessageToPlayer(context.Context, *ClientSendMessageToPlayerRequest) (*ClientSendMessageToPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientSendMessageToPlayer not implemented")
}
func (UnimplementedSceneServer) CentreSendToPlayerViaGameNode(context.Context, *common.NodeRouteMessageRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CentreSendToPlayerViaGameNode not implemented")
}
func (UnimplementedSceneServer) InvokePlayerService(context.Context, *common.NodeRouteMessageRequest) (*common.NodeRouteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokePlayerService not implemented")
}
func (UnimplementedSceneServer) RouteNodeStringMsg(context.Context, *common.RouteMessageRequest) (*common.RouteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouteNodeStringMsg not implemented")
}
func (UnimplementedSceneServer) RoutePlayerStringMsg(context.Context, *common.RoutePlayerMessageRequest) (*common.RoutePlayerMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoutePlayerStringMsg not implemented")
}
func (UnimplementedSceneServer) UpdateSessionDetail(context.Context, *RegisterPlayerSessionRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSessionDetail not implemented")
}
func (UnimplementedSceneServer) EnterScene(context.Context, *Centre2GsEnterSceneRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterScene not implemented")
}
func (UnimplementedSceneServer) CreateScene(context.Context, *CreateSceneRequest) (*CreateSceneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScene not implemented")
}
func (UnimplementedSceneServer) NodeHandshake(context.Context, *common.NodeHandshakeRequest) (*common.NodeHandshakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeHandshake not implemented")
}
func (UnimplementedSceneServer) mustEmbedUnimplementedSceneServer() {}
func (UnimplementedSceneServer) testEmbeddedByValue()               {}

// UnsafeSceneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SceneServer will
// result in compilation errors.
type UnsafeSceneServer interface {
	mustEmbedUnimplementedSceneServer()
}

func RegisterSceneServer(s grpc.ServiceRegistrar, srv SceneServer) {
	// If the following call pancis, it indicates UnimplementedSceneServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Scene_ServiceDesc, srv)
}

func _Scene_PlayerEnterGameNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerEnterGameNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneServer).PlayerEnterGameNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scene_PlayerEnterGameNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneServer).PlayerEnterGameNode(ctx, req.(*PlayerEnterGameNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scene_SendMessageToPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NodeRouteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneServer).SendMessageToPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scene_SendMessageToPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneServer).SendMessageToPlayer(ctx, req.(*common.NodeRouteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scene_ClientSendMessageToPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientSendMessageToPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneServer).ClientSendMessageToPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scene_ClientSendMessageToPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneServer).ClientSendMessageToPlayer(ctx, req.(*ClientSendMessageToPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scene_CentreSendToPlayerViaGameNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NodeRouteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneServer).CentreSendToPlayerViaGameNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scene_CentreSendToPlayerViaGameNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneServer).CentreSendToPlayerViaGameNode(ctx, req.(*common.NodeRouteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scene_InvokePlayerService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NodeRouteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneServer).InvokePlayerService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scene_InvokePlayerService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneServer).InvokePlayerService(ctx, req.(*common.NodeRouteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scene_RouteNodeStringMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RouteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneServer).RouteNodeStringMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scene_RouteNodeStringMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneServer).RouteNodeStringMsg(ctx, req.(*common.RouteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scene_RoutePlayerStringMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RoutePlayerMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneServer).RoutePlayerStringMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scene_RoutePlayerStringMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneServer).RoutePlayerStringMsg(ctx, req.(*common.RoutePlayerMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scene_UpdateSessionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPlayerSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneServer).UpdateSessionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scene_UpdateSessionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneServer).UpdateSessionDetail(ctx, req.(*RegisterPlayerSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scene_EnterScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Centre2GsEnterSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneServer).EnterScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scene_EnterScene_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneServer).EnterScene(ctx, req.(*Centre2GsEnterSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scene_CreateScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneServer).CreateScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scene_CreateScene_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneServer).CreateScene(ctx, req.(*CreateSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scene_NodeHandshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.NodeHandshakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SceneServer).NodeHandshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scene_NodeHandshake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SceneServer).NodeHandshake(ctx, req.(*common.NodeHandshakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Scene_ServiceDesc is the grpc.ServiceDesc for Scene service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scene_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Scene",
	HandlerType: (*SceneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlayerEnterGameNode",
			Handler:    _Scene_PlayerEnterGameNode_Handler,
		},
		{
			MethodName: "SendMessageToPlayer",
			Handler:    _Scene_SendMessageToPlayer_Handler,
		},
		{
			MethodName: "ClientSendMessageToPlayer",
			Handler:    _Scene_ClientSendMessageToPlayer_Handler,
		},
		{
			MethodName: "CentreSendToPlayerViaGameNode",
			Handler:    _Scene_CentreSendToPlayerViaGameNode_Handler,
		},
		{
			MethodName: "InvokePlayerService",
			Handler:    _Scene_InvokePlayerService_Handler,
		},
		{
			MethodName: "RouteNodeStringMsg",
			Handler:    _Scene_RouteNodeStringMsg_Handler,
		},
		{
			MethodName: "RoutePlayerStringMsg",
			Handler:    _Scene_RoutePlayerStringMsg_Handler,
		},
		{
			MethodName: "UpdateSessionDetail",
			Handler:    _Scene_UpdateSessionDetail_Handler,
		},
		{
			MethodName: "EnterScene",
			Handler:    _Scene_EnterScene_Handler,
		},
		{
			MethodName: "CreateScene",
			Handler:    _Scene_CreateScene_Handler,
		},
		{
			MethodName: "NodeHandshake",
			Handler:    _Scene_NodeHandshake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/cpp/rpc/scene/scene.proto",
}
