// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.31.1
// source: testmultikey_table.proto

package table

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestMultiKeytag1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tag1Key       string                 `protobuf:"bytes,1,opt,name=tag1_key,json=tag1Key,proto3" json:"tag1_key,omitempty"`
	Tag1Value     string                 `protobuf:"bytes,2,opt,name=tag1_value,json=tag1Value,proto3" json:"tag1_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestMultiKeytag1) Reset() {
	*x = TestMultiKeytag1{}
	mi := &file_testmultikey_table_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestMultiKeytag1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMultiKeytag1) ProtoMessage() {}

func (x *TestMultiKeytag1) ProtoReflect() protoreflect.Message {
	mi := &file_testmultikey_table_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMultiKeytag1.ProtoReflect.Descriptor instead.
func (*TestMultiKeytag1) Descriptor() ([]byte, []int) {
	return file_testmultikey_table_proto_rawDescGZIP(), []int{0}
}

func (x *TestMultiKeytag1) GetTag1Key() string {
	if x != nil {
		return x.Tag1Key
	}
	return ""
}

func (x *TestMultiKeytag1) GetTag1Value() string {
	if x != nil {
		return x.Tag1Value
	}
	return ""
}

type TestMultiKeyimmunetag1 struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Immunetag1Key   string                 `protobuf:"bytes,1,opt,name=immunetag1_key,json=immunetag1Key,proto3" json:"immunetag1_key,omitempty"`
	Immunetag1Value string                 `protobuf:"bytes,2,opt,name=immunetag1_value,json=immunetag1Value,proto3" json:"immunetag1_value,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TestMultiKeyimmunetag1) Reset() {
	*x = TestMultiKeyimmunetag1{}
	mi := &file_testmultikey_table_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestMultiKeyimmunetag1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMultiKeyimmunetag1) ProtoMessage() {}

func (x *TestMultiKeyimmunetag1) ProtoReflect() protoreflect.Message {
	mi := &file_testmultikey_table_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMultiKeyimmunetag1.ProtoReflect.Descriptor instead.
func (*TestMultiKeyimmunetag1) Descriptor() ([]byte, []int) {
	return file_testmultikey_table_proto_rawDescGZIP(), []int{1}
}

func (x *TestMultiKeyimmunetag1) GetImmunetag1Key() string {
	if x != nil {
		return x.Immunetag1Key
	}
	return ""
}

func (x *TestMultiKeyimmunetag1) GetImmunetag1Value() string {
	if x != nil {
		return x.Immunetag1Value
	}
	return ""
}

type TestMultiKeytestobj1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Testobj1Key   uint32                 `protobuf:"varint,1,opt,name=testobj1_key,json=testobj1Key,proto3" json:"testobj1_key,omitempty"`
	Testobj1Value uint32                 `protobuf:"varint,2,opt,name=testobj1_value,json=testobj1Value,proto3" json:"testobj1_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestMultiKeytestobj1) Reset() {
	*x = TestMultiKeytestobj1{}
	mi := &file_testmultikey_table_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestMultiKeytestobj1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMultiKeytestobj1) ProtoMessage() {}

func (x *TestMultiKeytestobj1) ProtoReflect() protoreflect.Message {
	mi := &file_testmultikey_table_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMultiKeytestobj1.ProtoReflect.Descriptor instead.
func (*TestMultiKeytestobj1) Descriptor() ([]byte, []int) {
	return file_testmultikey_table_proto_rawDescGZIP(), []int{2}
}

func (x *TestMultiKeytestobj1) GetTestobj1Key() uint32 {
	if x != nil {
		return x.Testobj1Key
	}
	return 0
}

func (x *TestMultiKeytestobj1) GetTestobj1Value() uint32 {
	if x != nil {
		return x.Testobj1Value
	}
	return 0
}

type TestMultiKeyTable struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Id            uint32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Tag1          map[string]string       `protobuf:"bytes,2,rep,name=tag1,proto3" json:"tag1,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Immunetag1    map[string]string       `protobuf:"bytes,3,rep,name=immunetag1,proto3" json:"immunetag1,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Level         uint32                  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Testobj1      []*TestMultiKeytestobj1 `protobuf:"bytes,5,rep,name=testobj1,proto3" json:"testobj1,omitempty"`
	Effect        []uint32                `protobuf:"varint,6,rep,packed,name=effect,proto3" json:"effect,omitempty"`
	Stringkey     string                  `protobuf:"bytes,7,opt,name=stringkey,proto3" json:"stringkey,omitempty"`
	Uint32Key     uint32                  `protobuf:"varint,8,opt,name=uint32key,proto3" json:"uint32key,omitempty"`
	In32Key       int32                   `protobuf:"varint,9,opt,name=in32key,proto3" json:"in32key,omitempty"`
	Mstringkey    string                  `protobuf:"bytes,10,opt,name=mstringkey,proto3" json:"mstringkey,omitempty"`
	Muint32Key    uint32                  `protobuf:"varint,11,opt,name=muint32key,proto3" json:"muint32key,omitempty"`
	Min32Key      int32                   `protobuf:"varint,12,opt,name=min32key,proto3" json:"min32key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestMultiKeyTable) Reset() {
	*x = TestMultiKeyTable{}
	mi := &file_testmultikey_table_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestMultiKeyTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMultiKeyTable) ProtoMessage() {}

func (x *TestMultiKeyTable) ProtoReflect() protoreflect.Message {
	mi := &file_testmultikey_table_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMultiKeyTable.ProtoReflect.Descriptor instead.
func (*TestMultiKeyTable) Descriptor() ([]byte, []int) {
	return file_testmultikey_table_proto_rawDescGZIP(), []int{3}
}

func (x *TestMultiKeyTable) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TestMultiKeyTable) GetTag1() map[string]string {
	if x != nil {
		return x.Tag1
	}
	return nil
}

func (x *TestMultiKeyTable) GetImmunetag1() map[string]string {
	if x != nil {
		return x.Immunetag1
	}
	return nil
}

func (x *TestMultiKeyTable) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *TestMultiKeyTable) GetTestobj1() []*TestMultiKeytestobj1 {
	if x != nil {
		return x.Testobj1
	}
	return nil
}

func (x *TestMultiKeyTable) GetEffect() []uint32 {
	if x != nil {
		return x.Effect
	}
	return nil
}

func (x *TestMultiKeyTable) GetStringkey() string {
	if x != nil {
		return x.Stringkey
	}
	return ""
}

func (x *TestMultiKeyTable) GetUint32Key() uint32 {
	if x != nil {
		return x.Uint32Key
	}
	return 0
}

func (x *TestMultiKeyTable) GetIn32Key() int32 {
	if x != nil {
		return x.In32Key
	}
	return 0
}

func (x *TestMultiKeyTable) GetMstringkey() string {
	if x != nil {
		return x.Mstringkey
	}
	return ""
}

func (x *TestMultiKeyTable) GetMuint32Key() uint32 {
	if x != nil {
		return x.Muint32Key
	}
	return 0
}

func (x *TestMultiKeyTable) GetMin32Key() int32 {
	if x != nil {
		return x.Min32Key
	}
	return 0
}

type TestMultiKeyTableData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*TestMultiKeyTable   `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestMultiKeyTableData) Reset() {
	*x = TestMultiKeyTableData{}
	mi := &file_testmultikey_table_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestMultiKeyTableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMultiKeyTableData) ProtoMessage() {}

func (x *TestMultiKeyTableData) ProtoReflect() protoreflect.Message {
	mi := &file_testmultikey_table_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMultiKeyTableData.ProtoReflect.Descriptor instead.
func (*TestMultiKeyTableData) Descriptor() ([]byte, []int) {
	return file_testmultikey_table_proto_rawDescGZIP(), []int{4}
}

func (x *TestMultiKeyTableData) GetData() []*TestMultiKeyTable {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_testmultikey_table_proto protoreflect.FileDescriptor

const file_testmultikey_table_proto_rawDesc = "" +
	"\n" +
	"\x18testmultikey_table.proto\"L\n" +
	"\x10TestMultiKeytag1\x12\x19\n" +
	"\btag1_key\x18\x01 \x01(\tR\atag1Key\x12\x1d\n" +
	"\n" +
	"tag1_value\x18\x02 \x01(\tR\ttag1Value\"j\n" +
	"\x16TestMultiKeyimmunetag1\x12%\n" +
	"\x0eimmunetag1_key\x18\x01 \x01(\tR\rimmunetag1Key\x12)\n" +
	"\x10immunetag1_value\x18\x02 \x01(\tR\x0fimmunetag1Value\"`\n" +
	"\x14TestMultiKeytestobj1\x12!\n" +
	"\ftestobj1_key\x18\x01 \x01(\rR\vtestobj1Key\x12%\n" +
	"\x0etestobj1_value\x18\x02 \x01(\rR\rtestobj1Value\"\xa4\x04\n" +
	"\x11TestMultiKeyTable\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x120\n" +
	"\x04tag1\x18\x02 \x03(\v2\x1c.TestMultiKeyTable.Tag1EntryR\x04tag1\x12B\n" +
	"\n" +
	"immunetag1\x18\x03 \x03(\v2\".TestMultiKeyTable.Immunetag1EntryR\n" +
	"immunetag1\x12\x14\n" +
	"\x05level\x18\x04 \x01(\rR\x05level\x121\n" +
	"\btestobj1\x18\x05 \x03(\v2\x15.TestMultiKeytestobj1R\btestobj1\x12\x16\n" +
	"\x06effect\x18\x06 \x03(\rR\x06effect\x12\x1c\n" +
	"\tstringkey\x18\a \x01(\tR\tstringkey\x12\x1c\n" +
	"\tuint32key\x18\b \x01(\rR\tuint32key\x12\x18\n" +
	"\ain32key\x18\t \x01(\x05R\ain32key\x12\x1e\n" +
	"\n" +
	"mstringkey\x18\n" +
	" \x01(\tR\n" +
	"mstringkey\x12\x1e\n" +
	"\n" +
	"muint32key\x18\v \x01(\rR\n" +
	"muint32key\x12\x1a\n" +
	"\bmin32key\x18\f \x01(\x05R\bmin32key\x1a7\n" +
	"\tTag1Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a=\n" +
	"\x0fImmunetag1Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"?\n" +
	"\x15TestMultiKeyTableData\x12&\n" +
	"\x04data\x18\x01 \x03(\v2\x12.TestMultiKeyTableR\x04dataB\x14Z\x12generated/pb/tableb\x06proto3"

var (
	file_testmultikey_table_proto_rawDescOnce sync.Once
	file_testmultikey_table_proto_rawDescData []byte
)

func file_testmultikey_table_proto_rawDescGZIP() []byte {
	file_testmultikey_table_proto_rawDescOnce.Do(func() {
		file_testmultikey_table_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_testmultikey_table_proto_rawDesc), len(file_testmultikey_table_proto_rawDesc)))
	})
	return file_testmultikey_table_proto_rawDescData
}

var file_testmultikey_table_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_testmultikey_table_proto_goTypes = []any{
	(*TestMultiKeytag1)(nil),       // 0: TestMultiKeytag1
	(*TestMultiKeyimmunetag1)(nil), // 1: TestMultiKeyimmunetag1
	(*TestMultiKeytestobj1)(nil),   // 2: TestMultiKeytestobj1
	(*TestMultiKeyTable)(nil),      // 3: TestMultiKeyTable
	(*TestMultiKeyTableData)(nil),  // 4: TestMultiKeyTableData
	nil,                            // 5: TestMultiKeyTable.Tag1Entry
	nil,                            // 6: TestMultiKeyTable.Immunetag1Entry
}
var file_testmultikey_table_proto_depIdxs = []int32{
	5, // 0: TestMultiKeyTable.tag1:type_name -> TestMultiKeyTable.Tag1Entry
	6, // 1: TestMultiKeyTable.immunetag1:type_name -> TestMultiKeyTable.Immunetag1Entry
	2, // 2: TestMultiKeyTable.testobj1:type_name -> TestMultiKeytestobj1
	3, // 3: TestMultiKeyTableData.data:type_name -> TestMultiKeyTable
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_testmultikey_table_proto_init() }
func file_testmultikey_table_proto_init() {
	if File_testmultikey_table_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_testmultikey_table_proto_rawDesc), len(file_testmultikey_table_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_testmultikey_table_proto_goTypes,
		DependencyIndexes: file_testmultikey_table_proto_depIdxs,
		MessageInfos:      file_testmultikey_table_proto_msgTypes,
	}.Build()
	File_testmultikey_table_proto = out.File
	file_testmultikey_table_proto_goTypes = nil
	file_testmultikey_table_proto_depIdxs = nil
}
