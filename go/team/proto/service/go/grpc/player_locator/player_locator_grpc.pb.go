// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/service/go/grpc/player_locator/player_locator.proto

package team_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "team/proto/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlayerLocator_SetLocation_FullMethodName = "/playerlocator.PlayerLocator/SetLocation"
	PlayerLocator_GetLocation_FullMethodName = "/playerlocator.PlayerLocator/GetLocation"
	PlayerLocator_MarkOffline_FullMethodName = "/playerlocator.PlayerLocator/MarkOffline"
)

// PlayerLocatorClient is the client API for PlayerLocator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerLocatorClient interface {
	SetLocation(ctx context.Context, in *PlayerLocation, opts ...grpc.CallOption) (*common.Empty, error)
	GetLocation(ctx context.Context, in *PlayerId, opts ...grpc.CallOption) (*PlayerLocation, error)
	MarkOffline(ctx context.Context, in *PlayerId, opts ...grpc.CallOption) (*common.Empty, error)
}

type playerLocatorClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerLocatorClient(cc grpc.ClientConnInterface) PlayerLocatorClient {
	return &playerLocatorClient{cc}
}

func (c *playerLocatorClient) SetLocation(ctx context.Context, in *PlayerLocation, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, PlayerLocator_SetLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerLocatorClient) GetLocation(ctx context.Context, in *PlayerId, opts ...grpc.CallOption) (*PlayerLocation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerLocation)
	err := c.cc.Invoke(ctx, PlayerLocator_GetLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerLocatorClient) MarkOffline(ctx context.Context, in *PlayerId, opts ...grpc.CallOption) (*common.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, PlayerLocator_MarkOffline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerLocatorServer is the server API for PlayerLocator service.
// All implementations must embed UnimplementedPlayerLocatorServer
// for forward compatibility.
type PlayerLocatorServer interface {
	SetLocation(context.Context, *PlayerLocation) (*common.Empty, error)
	GetLocation(context.Context, *PlayerId) (*PlayerLocation, error)
	MarkOffline(context.Context, *PlayerId) (*common.Empty, error)
	mustEmbedUnimplementedPlayerLocatorServer()
}

// UnimplementedPlayerLocatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlayerLocatorServer struct{}

func (UnimplementedPlayerLocatorServer) SetLocation(context.Context, *PlayerLocation) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLocation not implemented")
}
func (UnimplementedPlayerLocatorServer) GetLocation(context.Context, *PlayerId) (*PlayerLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocation not implemented")
}
func (UnimplementedPlayerLocatorServer) MarkOffline(context.Context, *PlayerId) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkOffline not implemented")
}
func (UnimplementedPlayerLocatorServer) mustEmbedUnimplementedPlayerLocatorServer() {}
func (UnimplementedPlayerLocatorServer) testEmbeddedByValue()                       {}

// UnsafePlayerLocatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerLocatorServer will
// result in compilation errors.
type UnsafePlayerLocatorServer interface {
	mustEmbedUnimplementedPlayerLocatorServer()
}

func RegisterPlayerLocatorServer(s grpc.ServiceRegistrar, srv PlayerLocatorServer) {
	// If the following call pancis, it indicates UnimplementedPlayerLocatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlayerLocator_ServiceDesc, srv)
}

func _PlayerLocator_SetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerLocatorServer).SetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerLocator_SetLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerLocatorServer).SetLocation(ctx, req.(*PlayerLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerLocator_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerLocatorServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerLocator_GetLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerLocatorServer).GetLocation(ctx, req.(*PlayerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerLocator_MarkOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerLocatorServer).MarkOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerLocator_MarkOffline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerLocatorServer).MarkOffline(ctx, req.(*PlayerId))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayerLocator_ServiceDesc is the grpc.ServiceDesc for PlayerLocator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayerLocator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playerlocator.PlayerLocator",
	HandlerType: (*PlayerLocatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLocation",
			Handler:    _PlayerLocator_SetLocation_Handler,
		},
		{
			MethodName: "GetLocation",
			Handler:    _PlayerLocator_GetLocation_Handler,
		},
		{
			MethodName: "MarkOffline",
			Handler:    _PlayerLocator_MarkOffline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service/go/grpc/player_locator/player_locator.proto",
}
