#pragma once
#include <cstdint>
#include <unordered_map>
#include "table_expression.h"
#include "muduo/base/Logging.h"
#include "table/proto/{{ sheetname | lower }}_table.pb.h"

class {{ sheetname }}TableManager {
public:
    using KeyValueDataType = std::unordered_map{{ container_type }}<uint32_t, const {{ sheetname }}Table*>;

    // Callback type definition
    using LoadSuccessCallback = std::function<void()>;

    static {{ sheetname }}TableManager& Instance() {
        static {{ sheetname }}TableManager instance;
        return instance;
    }

    const {{ sheetname }}TableData& All() const { return data_; }

    std::pair<const {{ sheetname }}Table*, uint32_t> GetTable(uint32_t tableId);
    std::pair<const {{ sheetname }}Table*, uint32_t> GetTableWithoutErrorLogging(uint32_t tableId);
    const KeyValueDataType& KeyValueData() const { return kv_data_; }

    void Load();

    // Setter for the success callback
    void SetLoadSuccessCallback(const LoadSuccessCallback& callback) {
        loadSuccessCallback_ = callback;//multi thread
    }

    void LoadSuccess(){if (loadSuccessCallback_){loadSuccessCallback_();}}

    {% for data in datastring if data %}
        {%- if data[generate_common.COL_OBJ_TABLE_KEY_INDEX] == generate_common.TABLE_KEY_CELL -%}
            {%- set column_map_type = 'unordered_map' if data[generate_common.COL_OBJ_TABLE_MULTI] != generate_common.MULTI_TABLE_KEY_CELL else 'unordered_multimap' %}
    std::pair< const {{ sheetname }}Table*, uint32_t> GetBy{{ data[generate_common.COL_OBJ_COLUMN_NAME] | title }}({{ get_cpp_type_param_name_with_ref(data[generate_common.COL_OBJ_COLUMN_TYPE]) }} tableId) const;
    const std::{{ column_map_type }}<{{ get_cpp_type_name(data[generate_common.COL_OBJ_COLUMN_TYPE]) }}, const {{ sheetname }}Table*>& Get{{ data[generate_common.COL_OBJ_COLUMN_NAME] | title }}Data() const { return kv_{{ data[generate_common.COL_OBJ_COLUMN_NAME] }}data_; }
        {% endif %}
        {%- if data[generate_common.COL_OBJ_TABLE_EXPRESSION_TYPE_INDEX] is not none -%}
    {{ data[generate_common.COL_OBJ_TABLE_EXPRESSION_TYPE_INDEX] }} Get{{ data[generate_common.COL_OBJ_COLUMN_NAME] | title }}(const uint32_t tableId){
        auto [table, ok] = GetTable(tableId);  // Fetch table using tableId
        if (!ok || table == nullptr) {         // Check if the table is valid
            LOG_ERROR << "{{ data[generate_common.COL_OBJ_COLUMN_NAME] | title }} table not found for ID: " << tableId;
            return double();  // Return default value (zero) if table is invalid
        }

        // Call the appropriate method to get the damage
        return expression_{{ data[generate_common.COL_OBJ_COLUMN_NAME] }}_.Value(table->{{ data[generate_common.COL_OBJ_COLUMN_NAME] }}());
    }
    void Set{{ data[generate_common.COL_OBJ_COLUMN_NAME] | title }}Param(const std::vector<{{ data[generate_common.COL_OBJ_TABLE_EXPRESSION_TYPE_INDEX] }}>& paramList){
               expression_{{ data[generate_common.COL_OBJ_COLUMN_NAME] }}_.SetParam(paramList);  // Set parameters for damage calculation
    }
        {%- endif -%}
    {%- endfor %}

private:
    LoadSuccessCallback loadSuccessCallback_;  // The callback for load success
    {{ sheetname }}TableData data_;
    KeyValueDataType kv_data_;
    {% for data in datastring if data %}
        {%- if data[generate_common.COL_OBJ_TABLE_KEY_INDEX] == generate_common.TABLE_KEY_CELL -%}
            {% set column_map_type = 'unordered_map' if data[generate_common.COL_OBJ_TABLE_MULTI] != generate_common.MULTI_TABLE_KEY_CELL else 'unordered_multimap' %}
    std::{{ column_map_type }}<{{ get_cpp_type_name(data[generate_common.COL_OBJ_COLUMN_TYPE]) }}, const {{ sheetname }}Table *> kv_{{ data[generate_common.COL_OBJ_COLUMN_NAME] }}data_;
        {%- endif -%}
        {%- if data[generate_common.COL_OBJ_TABLE_EXPRESSION_TYPE_INDEX] is not none -%}
    ExcelExpression<{{ data[generate_common.COL_OBJ_TABLE_EXPRESSION_TYPE_INDEX] }}> expression_{{ data[generate_common.COL_OBJ_COLUMN_NAME] }}_;
        {%- endif -%}
    {%- endfor %}
};

inline const {{ sheetname }}TableData& Get{{ sheetname }}AllTable() {
    return {{ sheetname }}TableManager::Instance().All();
}

#define FetchAndValidate{{ sheetname }}Table(tableId) \
    const auto [{{  sheetname[0].lower() + sheetname[1:] }}Table, fetchResult] = {{ sheetname }}TableManager::Instance().GetTable(tableId); \
    do { if (!( {{  sheetname[0].lower() + sheetname[1:] }}Table )) { LOG_ERROR << "{{ sheetname }} table not found for ID: " << tableId; return fetchResult; } } while(0)

#define FetchAndValidateCustom{{ sheetname }}Table(prefix, tableId) \
    const auto [prefix##{{ sheetname }}Table, prefix##fetchResult] = {{ sheetname }}TableManager::Instance().GetTable(tableId); \
    do { if (!(prefix##{{ sheetname }}Table)) { LOG_ERROR << "{{ sheetname }} table not found for ID: " << tableId; return prefix##fetchResult; } } while(0)

#define Fetch{{ sheetname }}TableOrReturnCustom(tableId, customReturnValue) \
    const auto [{{  sheetname[0].lower() + sheetname[1:] }}Table, fetchResult] = {{ sheetname }}TableManager::Instance().GetTable(tableId); \
    do { if (!( {{  sheetname[0].lower() + sheetname[1:] }}Table )) { LOG_ERROR << "{{ sheetname }} table not found for ID: " << tableId; return customReturnValue; } } while(0)

#define Fetch{{ sheetname }}TableOrReturnVoid(tableId) \
    const auto [{{  sheetname[0].lower() + sheetname[1:] }}Table, fetchResult] = {{ sheetname }}TableManager::Instance().GetTable(tableId); \
    do { if (!( {{  sheetname[0].lower() + sheetname[1:] }}Table )) { LOG_ERROR << "{{ sheetname }} table not found for ID: " << tableId; return; } } while(0)

#define Fetch{{ sheetname }}TableOrContinue(tableId) \
    const auto [{{  sheetname[0].lower() + sheetname[1:] }}Table, fetchResult] = {{ sheetname }}TableManager::Instance().GetTable(tableId); \
    do { if (!( {{  sheetname[0].lower() + sheetname[1:] }}Table )) { LOG_ERROR << "{{ sheetname }} table not found for ID: " << tableId; continue; } } while(0)

#define Fetch{{ sheetname }}TableOrReturnFalse(tableId) \
    const auto [{{  sheetname[0].lower() + sheetname[1:] }}Table, fetchResult] = {{ sheetname }}TableManager::Instance().GetTable(tableId); \
    do { if (!( {{  sheetname[0].lower() + sheetname[1:] }}Table )) { LOG_ERROR << "{{ sheetname }} table not found for ID: " << tableId; return false; } } while(0)
