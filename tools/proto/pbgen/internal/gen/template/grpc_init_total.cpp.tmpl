#pragma once

#include <functional>
#include "entt/src/entt/entity/registry.hpp"
#include <grpcpp/grpcpp.h>
#include <google/protobuf/message.h>
#include "node/system/node_system.h"

using grpc::ClientContext;
using grpc::Status;
using grpc::ClientAsyncResponseReader;

{{ range.ServiceInfo }}
namespace {{.Package}} {
    void Set{{.FileBaseNameCamel}}Handler(const std::function<void(const ClientContext&, const ::google::protobuf::Message& reply)>& handler);
    void Init{{.FileBaseNameCamel}}CompletedQueue(entt::registry& registry, entt::entity nodeEntity);
    void Handle{{.FileBaseNameCamel}}CompletedQueueMessage(entt::registry& registry);
}
{{ end }}

void SetHandler(const std::function<void(const ClientContext&, const ::google::protobuf::Message& reply)>& handler){
{{ range.ServiceInfo }}
    {{.Package}}::Set{{.FileBaseNameCamel}}Handler(handler);
{{ end }}
}

void InitCompletedQueue(entt::registry& registry, entt::entity nodeEntity){
{{ range.ServiceInfo }}
    if (eNodeType::{{.BasePathForCpp}}NodeService == NodeSystem::GetRegistryType(registry)) {
        {{.Package}}::Init{{.FileBaseNameCamel}}CompletedQueue(registry, nodeEntity);
    }
{{ end }}
}

void HandleCompletedQueueMessage(entt::registry& registry){
{{ range  .ServiceInfo }}
    {{.Package}}::Handle{{.FileBaseNameCamel}}CompletedQueueMessage(registry);
{{ end }}
}
