#pragma once

#include <functional>
#include "entt/src/entt/entity/registry.hpp"
#include <grpcpp/grpcpp.h>
#include <google/protobuf/message.h>
#include "muduo/base/Logging.h"
#include "grpc_client/grpc_call_tag.h"
#include <proto/common/node.pb.h>
#include <proto/common/common.pb.h>

using grpc::ClientContext;
using grpc::Status;
using grpc::ClientAsyncResponseReader;

namespace NodeUtils
{
	eNodeType GetServiceTypeFromPrefix(const std::string& prefix);
	entt::registry& GetRegistryForNodeType(uint32_t nodeType);
	std::string GetRegistryName(const entt::registry& registry);
	eNodeType GetRegistryType(const entt::registry& registry);
	bool IsSameNode(const std::string& uuid1, const std::string& uuid2);
	bool IsNodeConnected(uint32_t nodeType, const NodeInfo& info);
};

{{ range.ServiceInfo }}
namespace {{.Package}} {
    void Set{{.FileBaseNameCamel}}Handler(const std::function<void(const ClientContext&, const ::google::protobuf::Message& reply)>& handler);
    void Set{{.FileBaseNameCamel}}IfEmptyHandler(const std::function<void(const ClientContext&, const ::google::protobuf::Message& reply)>& handler);
    void Init{{.FileBaseNameCamel}}GrpcNode(const std::shared_ptr< ::grpc::ChannelInterface>& channel, entt::registry& registry, entt::entity nodeEntity);
    void Handle{{.FileBaseNameCamel}}CompletedQueueMessage(entt::registry& registry, entt::entity nodeEntity, grpc::CompletionQueue& completeQueueComp, GrpcTag* grpcTag);
}
{{ end }}

void SetIfEmptyHandler(const std::function<void(const ClientContext&, const ::google::protobuf::Message& reply)>& handler){
{{ range.ServiceInfo }}
    {{.Package}}::Set{{.FileBaseNameCamel}}IfEmptyHandler(handler);
{{ end }}
}

void SetHandler(const std::function<void(const ClientContext&, const ::google::protobuf::Message& reply)>& handler){
{{ range.ServiceInfo }}
    {{.Package}}::Set{{.FileBaseNameCamel}}Handler(handler);
{{ end }}
}

void HandleCompletedQueueMessage(entt::registry& registry){
    auto nodeType = NodeUtils::GetRegistryType(registry);
    auto&& view = registry.view<grpc::CompletionQueue>();
    for (auto&& [e, completeQueueComp] : view.each()) {
        void* got_tag = nullptr;
        bool ok = false;
        gpr_timespec tm = {0, 0, GPR_CLOCK_MONOTONIC};
        while (completeQueueComp.AsyncNext(&got_tag, &ok, tm) == grpc::CompletionQueue::GOT_EVENT) {
            if (!ok) {
                LOG_ERROR << "RPC failed";
                return;
            }
            GrpcTag* grpcTag(reinterpret_cast<GrpcTag*>(got_tag));

{{- range $index, $m := .ServiceInfo }}
    {{- if eq $index 0 }}
            if (eNodeType::{{$m.BasePathForCpp}}NodeService == nodeType) {
                {{$m.Package}}::Handle{{$m.FileBaseNameCamel}}CompletedQueueMessage(registry, e, completeQueueComp, grpcTag);
            }
    {{- else }}
            else if (eNodeType::{{$m.BasePathForCpp}}NodeService == nodeType) {
                {{$m.Package}}::Handle{{$m.FileBaseNameCamel}}CompletedQueueMessage(registry, e, completeQueueComp, grpcTag);
            }
    {{- end }}
{{- end }}
        }
    }
}


void InitGrpcNode(const std::shared_ptr< ::grpc::ChannelInterface>& channel, entt::registry& registry, entt::entity nodeEntity){
    auto nodeType = NodeUtils::GetRegistryType(registry);
    registry.emplace<grpc::CompletionQueue>(nodeEntity);
{{- range $index, $m := .ServiceInfo }}
    {{- if eq $index 0 }}
    if (eNodeType::{{$m.BasePathForCpp}}NodeService == nodeType) {
        {{$m.Package}}::Init{{$m.FileBaseNameCamel}}GrpcNode(channel, registry, nodeEntity);
    }
    {{- else }}
    else if (eNodeType::{{$m.BasePathForCpp}}NodeService == nodeType) {
        {{$m.Package}}::Init{{$m.FileBaseNameCamel}}GrpcNode(channel, registry, nodeEntity);
    }
    {{- end }}
{{- end }}
}
