#pragma once

#include <functional>
#include "entt/src/entt/entity/registry.hpp"
#include <grpcpp/grpcpp.h>
#include <google/protobuf/message.h>
#include "node/system/node_system.h"

using grpc::ClientContext;
using grpc::Status;
using grpc::ClientAsyncResponseReader;

{{ range.ServiceInfo }}
namespace {{.Package}} {
    void Set{{.FileBaseNameCamel}}Handler(const std::function<void(const ClientContext&, const ::google::protobuf::Message& reply)>& handler);
    void Set{{.FileBaseNameCamel}}IfEmptyHandler(const std::function<void(const ClientContext&, const ::google::protobuf::Message& reply)>& handler);
    void Init{{.FileBaseNameCamel}}CompletedQueue(entt::registry& registry, entt::entity nodeEntity);
    void Init{{.FileBaseNameCamel}}Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, entt::registry& registry, entt::entity nodeEntity);
    void Handle{{.FileBaseNameCamel}}CompletedQueueMessage(entt::registry& registry);
}
{{ end }}

void SetIfEmptyHandler(const std::function<void(const ClientContext&, const ::google::protobuf::Message& reply)>& handler){
{{ range.ServiceInfo }}
    {{.Package}}::Set{{.FileBaseNameCamel}}IfEmptyHandler(handler);
{{ end }}
}

void SetHandler(const std::function<void(const ClientContext&, const ::google::protobuf::Message& reply)>& handler){
{{ range.ServiceInfo }}
    {{.Package}}::Set{{.FileBaseNameCamel}}Handler(handler);
{{ end }}
}

void InitCompletedQueue(entt::registry& registry, entt::entity nodeEntity){
    auto nodeType = NodeSystem::GetRegistryType(registry);
{{- range $index, $m := .ServiceInfo }}
    {{- if eq $index 0 }}
    if (eNodeType::{{$m.BasePathForCpp}}NodeService == nodeType) {
        {{$m.Package}}::Init{{$m.FileBaseNameCamel}}CompletedQueue(registry, nodeEntity);
    }
    {{- else }}
    else if (eNodeType::{{$m.BasePathForCpp}}NodeService == nodeType) {
        {{$m.Package}}::Init{{$m.FileBaseNameCamel}}CompletedQueue(registry, nodeEntity);
    }
    {{- end }}
{{- end }}
}

void HandleCompletedQueueMessage(entt::registry& registry){
    auto nodeType = NodeSystem::GetRegistryType(registry);
{{- range $index, $m := .ServiceInfo }}
    {{- if eq $index 0 }}
    if (eNodeType::{{$m.BasePathForCpp}}NodeService == nodeType) {
        {{$m.Package}}::Handle{{$m.FileBaseNameCamel}}CompletedQueueMessage(registry);
    }
    {{- else }}
    else if (eNodeType::{{$m.BasePathForCpp}}NodeService == nodeType) {
        {{$m.Package}}::Handle{{$m.FileBaseNameCamel}}CompletedQueueMessage(registry);
    }
    {{- end }}
{{- end }}
}


void InitStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, entt::registry& registry, entt::entity nodeEntity){
    auto nodeType = NodeSystem::GetRegistryType(registry);
{{- range $index, $m := .ServiceInfo }}
    {{- if eq $index 0 }}
    if (eNodeType::{{$m.BasePathForCpp}}NodeService == nodeType) {
        {{$m.Package}}::Init{{$m.FileBaseNameCamel}}Stub(channel, registry, nodeEntity);
    }
    {{- else }}
    else if (eNodeType::{{$m.BasePathForCpp}}NodeService == nodeType) {
        {{$m.Package}}::Init{{$m.FileBaseNameCamel}}Stub(channel, registry, nodeEntity);
    }
    {{- end }}
{{- end }}
}
