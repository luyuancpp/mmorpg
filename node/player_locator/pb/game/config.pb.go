// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.0
// source: proto/common/config.proto

package game

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 服务配置，避免与 protobuf 的 Service 冲突
type ServiceConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // 服务名称
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`   // 服务的健康检查或访问URL
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceConfig) Reset() {
	*x = ServiceConfig{}
	mi := &file_proto_common_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceConfig) ProtoMessage() {}

func (x *ServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceConfig.ProtoReflect.Descriptor instead.
func (*ServiceConfig) Descriptor() ([]byte, []int) {
	return file_proto_common_config_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type KafkaConfig struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Brokers          []string               `protobuf:"bytes,1,rep,name=brokers,proto3" json:"brokers,omitempty"`                                              // Kafka broker 列表
	Topics           []string               `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`                                                // 可配置多个 topic
	GroupId          string                 `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`                               // consumer group ID
	EnableAutoCommit bool                   `protobuf:"varint,4,opt,name=enable_auto_commit,json=enableAutoCommit,proto3" json:"enable_auto_commit,omitempty"` // 是否开启自动提交
	AutoOffsetReset  string                 `protobuf:"bytes,5,opt,name=auto_offset_reset,json=autoOffsetReset,proto3" json:"auto_offset_reset,omitempty"`     // earliest / latest
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *KafkaConfig) Reset() {
	*x = KafkaConfig{}
	mi := &file_proto_common_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaConfig) ProtoMessage() {}

func (x *KafkaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaConfig.ProtoReflect.Descriptor instead.
func (*KafkaConfig) Descriptor() ([]byte, []int) {
	return file_proto_common_config_proto_rawDescGZIP(), []int{1}
}

func (x *KafkaConfig) GetBrokers() []string {
	if x != nil {
		return x.Brokers
	}
	return nil
}

func (x *KafkaConfig) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *KafkaConfig) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *KafkaConfig) GetEnableAutoCommit() bool {
	if x != nil {
		return x.EnableAutoCommit
	}
	return false
}

func (x *KafkaConfig) GetAutoOffsetReset() string {
	if x != nil {
		return x.AutoOffsetReset
	}
	return ""
}

// 部署基础配置
type BaseDeployConfig struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	EtcdHosts                []string               `protobuf:"bytes,1,rep,name=etcd_hosts,json=etcdHosts,proto3" json:"etcd_hosts,omitempty"`
	LogLevel                 uint32                 `protobuf:"varint,2,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	Services                 []*ServiceConfig       `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty"`
	ServiceDiscoveryPrefixes []string               `protobuf:"bytes,4,rep,name=service_discovery_prefixes,json=serviceDiscoveryPrefixes,proto3" json:"service_discovery_prefixes,omitempty"`
	KeepAliveInterval        uint32                 `protobuf:"varint,5,opt,name=keep_alive_interval,json=keepAliveInterval,proto3" json:"keep_alive_interval,omitempty"`
	DeployservicePrefix      string                 `protobuf:"bytes,6,opt,name=deployservice_prefix,json=deployservicePrefix,proto3" json:"deployservice_prefix,omitempty"`
	NodeTtlSeconds           uint32                 `protobuf:"varint,7,opt,name=node_ttl_seconds,json=nodeTtlSeconds,proto3" json:"node_ttl_seconds,omitempty"`
	HealthCheckInterval      uint32                 `protobuf:"varint,8,opt,name=health_check_interval,json=healthCheckInterval,proto3" json:"health_check_interval,omitempty"`
	Kafka                    *KafkaConfig           `protobuf:"bytes,9,opt,name=kafka,proto3" json:"kafka,omitempty"` // ✅ 新增 Kafka 配置
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *BaseDeployConfig) Reset() {
	*x = BaseDeployConfig{}
	mi := &file_proto_common_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseDeployConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseDeployConfig) ProtoMessage() {}

func (x *BaseDeployConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseDeployConfig.ProtoReflect.Descriptor instead.
func (*BaseDeployConfig) Descriptor() ([]byte, []int) {
	return file_proto_common_config_proto_rawDescGZIP(), []int{2}
}

func (x *BaseDeployConfig) GetEtcdHosts() []string {
	if x != nil {
		return x.EtcdHosts
	}
	return nil
}

func (x *BaseDeployConfig) GetLogLevel() uint32 {
	if x != nil {
		return x.LogLevel
	}
	return 0
}

func (x *BaseDeployConfig) GetServices() []*ServiceConfig {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *BaseDeployConfig) GetServiceDiscoveryPrefixes() []string {
	if x != nil {
		return x.ServiceDiscoveryPrefixes
	}
	return nil
}

func (x *BaseDeployConfig) GetKeepAliveInterval() uint32 {
	if x != nil {
		return x.KeepAliveInterval
	}
	return 0
}

func (x *BaseDeployConfig) GetDeployservicePrefix() string {
	if x != nil {
		return x.DeployservicePrefix
	}
	return ""
}

func (x *BaseDeployConfig) GetNodeTtlSeconds() uint32 {
	if x != nil {
		return x.NodeTtlSeconds
	}
	return 0
}

func (x *BaseDeployConfig) GetHealthCheckInterval() uint32 {
	if x != nil {
		return x.HealthCheckInterval
	}
	return 0
}

func (x *BaseDeployConfig) GetKafka() *KafkaConfig {
	if x != nil {
		return x.Kafka
	}
	return nil
}

// 游戏配置
type GameConfig struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	SceneNodeType uint32                      `protobuf:"varint,1,opt,name=scene_node_type,json=sceneNodeType,proto3" json:"scene_node_type,omitempty"` // 场景节点类型，使用 uint32
	ZoneId        uint32                      `protobuf:"varint,2,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`                        // 区域ID，使用 uint32
	ZoneRedis     *GameConfig_ZoneRedisConfig `protobuf:"bytes,7,opt,name=zone_redis,json=zoneRedis,proto3" json:"zone_redis,omitempty"`                // 添加一个 ZoneRedisConfig 配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameConfig) Reset() {
	*x = GameConfig{}
	mi := &file_proto_common_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameConfig) ProtoMessage() {}

func (x *GameConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameConfig.ProtoReflect.Descriptor instead.
func (*GameConfig) Descriptor() ([]byte, []int) {
	return file_proto_common_config_proto_rawDescGZIP(), []int{3}
}

func (x *GameConfig) GetSceneNodeType() uint32 {
	if x != nil {
		return x.SceneNodeType
	}
	return 0
}

func (x *GameConfig) GetZoneId() uint32 {
	if x != nil {
		return x.ZoneId
	}
	return 0
}

func (x *GameConfig) GetZoneRedis() *GameConfig_ZoneRedisConfig {
	if x != nil {
		return x.ZoneRedis
	}
	return nil
}

// Zoneredis 配置
type GameConfig_ZoneRedisConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`         // Redis 服务器地址
	Port          uint32                 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`        // Redis 服务器端口
	Password      string                 `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"` // Redis 密码（可选）
	Db            uint32                 `protobuf:"varint,6,opt,name=db,proto3" json:"db,omitempty"`            // 使用的 Redis 数据库编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameConfig_ZoneRedisConfig) Reset() {
	*x = GameConfig_ZoneRedisConfig{}
	mi := &file_proto_common_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameConfig_ZoneRedisConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameConfig_ZoneRedisConfig) ProtoMessage() {}

func (x *GameConfig_ZoneRedisConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameConfig_ZoneRedisConfig.ProtoReflect.Descriptor instead.
func (*GameConfig_ZoneRedisConfig) Descriptor() ([]byte, []int) {
	return file_proto_common_config_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GameConfig_ZoneRedisConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GameConfig_ZoneRedisConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GameConfig_ZoneRedisConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *GameConfig_ZoneRedisConfig) GetDb() uint32 {
	if x != nil {
		return x.Db
	}
	return 0
}

var File_proto_common_config_proto protoreflect.FileDescriptor

const file_proto_common_config_proto_rawDesc = "" +
	"\n" +
	"\x19proto/common/config.proto\"5\n" +
	"\rServiceConfig\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x10\n" +
	"\x03url\x18\x02 \x01(\tR\x03url\"\xb4\x01\n" +
	"\vKafkaConfig\x12\x18\n" +
	"\abrokers\x18\x01 \x03(\tR\abrokers\x12\x16\n" +
	"\x06topics\x18\x02 \x03(\tR\x06topics\x12\x19\n" +
	"\bgroup_id\x18\x03 \x01(\tR\agroupId\x12,\n" +
	"\x12enable_auto_commit\x18\x04 \x01(\bR\x10enableAutoCommit\x12*\n" +
	"\x11auto_offset_reset\x18\x05 \x01(\tR\x0fautoOffsetReset\"\x9d\x03\n" +
	"\x10BaseDeployConfig\x12\x1d\n" +
	"\n" +
	"etcd_hosts\x18\x01 \x03(\tR\tetcdHosts\x12\x1b\n" +
	"\tlog_level\x18\x02 \x01(\rR\blogLevel\x12*\n" +
	"\bservices\x18\x03 \x03(\v2\x0e.ServiceConfigR\bservices\x12<\n" +
	"\x1aservice_discovery_prefixes\x18\x04 \x03(\tR\x18serviceDiscoveryPrefixes\x12.\n" +
	"\x13keep_alive_interval\x18\x05 \x01(\rR\x11keepAliveInterval\x121\n" +
	"\x14deployservice_prefix\x18\x06 \x01(\tR\x13deployservicePrefix\x12(\n" +
	"\x10node_ttl_seconds\x18\a \x01(\rR\x0enodeTtlSeconds\x122\n" +
	"\x15health_check_interval\x18\b \x01(\rR\x13healthCheckInterval\x12\"\n" +
	"\x05kafka\x18\t \x01(\v2\f.KafkaConfigR\x05kafka\"\xf0\x01\n" +
	"\n" +
	"GameConfig\x12&\n" +
	"\x0fscene_node_type\x18\x01 \x01(\rR\rsceneNodeType\x12\x17\n" +
	"\azone_id\x18\x02 \x01(\rR\x06zoneId\x12:\n" +
	"\n" +
	"zone_redis\x18\a \x01(\v2\x1b.GameConfig.ZoneRedisConfigR\tzoneRedis\x1ae\n" +
	"\x0fZoneRedisConfig\x12\x12\n" +
	"\x04host\x18\x03 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x04 \x01(\rR\x04port\x12\x1a\n" +
	"\bpassword\x18\x05 \x01(\tR\bpassword\x12\x0e\n" +
	"\x02db\x18\x06 \x01(\rR\x02dbB\tZ\apb/gameb\x06proto3"

var (
	file_proto_common_config_proto_rawDescOnce sync.Once
	file_proto_common_config_proto_rawDescData []byte
)

func file_proto_common_config_proto_rawDescGZIP() []byte {
	file_proto_common_config_proto_rawDescOnce.Do(func() {
		file_proto_common_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_common_config_proto_rawDesc), len(file_proto_common_config_proto_rawDesc)))
	})
	return file_proto_common_config_proto_rawDescData
}

var file_proto_common_config_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_common_config_proto_goTypes = []any{
	(*ServiceConfig)(nil),              // 0: ServiceConfig
	(*KafkaConfig)(nil),                // 1: KafkaConfig
	(*BaseDeployConfig)(nil),           // 2: BaseDeployConfig
	(*GameConfig)(nil),                 // 3: GameConfig
	(*GameConfig_ZoneRedisConfig)(nil), // 4: GameConfig.ZoneRedisConfig
}
var file_proto_common_config_proto_depIdxs = []int32{
	0, // 0: BaseDeployConfig.services:type_name -> ServiceConfig
	1, // 1: BaseDeployConfig.kafka:type_name -> KafkaConfig
	4, // 2: GameConfig.zone_redis:type_name -> GameConfig.ZoneRedisConfig
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_proto_common_config_proto_init() }
func file_proto_common_config_proto_init() {
	if File_proto_common_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_common_config_proto_rawDesc), len(file_proto_common_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_common_config_proto_goTypes,
		DependencyIndexes: file_proto_common_config_proto_depIdxs,
		MessageInfos:      file_proto_common_config_proto_msgTypes,
	}.Build()
	File_proto_common_config_proto = out.File
	file_proto_common_config_proto_goTypes = nil
	file_proto_common_config_proto_depIdxs = nil
}
