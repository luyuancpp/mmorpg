// Code generated by goctl. DO NOT EDIT.
// Source: deploy_service.proto

package deployservice

import (
	"context"

	"deploy_server/pb/game"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CentreServerDb        = game.CentreServerDb
	DatabaseServerDb      = game.DatabaseServerDb
	GameServerDb          = game.GameServerDb
	GateServerDb          = game.GateServerDb
	GsNodeIdRequest       = game.GsNodeIdRequest
	GsNodeIdResponse      = game.GsNodeIdResponse
	LobbyNodeInfoRequest  = game.LobbyNodeInfoRequest
	LobbyNodeInfoResponse = game.LobbyNodeInfoResponse
	LobbyServerDb         = game.LobbyServerDb
	LoginServerDb         = game.LoginServerDb
	NodeInfoRequest       = game.NodeInfoRequest
	NodeInfoResponse      = game.NodeInfoResponse
	RedisServerDb         = game.RedisServerDb
	ServersInfoData       = game.ServersInfoData
	StartGsRequest        = game.StartGsRequest
	StartGsResponse       = game.StartGsResponse

	DeployService interface {
		GetNodeInfo(ctx context.Context, in *NodeInfoRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error)
		StartGs(ctx context.Context, in *StartGsRequest, opts ...grpc.CallOption) (*StartGsResponse, error)
		GetGsNodeId(ctx context.Context, in *GsNodeIdRequest, opts ...grpc.CallOption) (*GsNodeIdResponse, error)
	}

	defaultDeployService struct {
		cli zrpc.Client
	}
)

func NewDeployService(cli zrpc.Client) DeployService {
	return &defaultDeployService{
		cli: cli,
	}
}

func (m *defaultDeployService) GetNodeInfo(ctx context.Context, in *NodeInfoRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error) {
	client := game.NewDeployServiceClient(m.cli.Conn())
	return client.GetNodeInfo(ctx, in, opts...)
}

func (m *defaultDeployService) StartGs(ctx context.Context, in *StartGsRequest, opts ...grpc.CallOption) (*StartGsResponse, error) {
	client := game.NewDeployServiceClient(m.cli.Conn())
	return client.StartGs(ctx, in, opts...)
}

func (m *defaultDeployService) GetGsNodeId(ctx context.Context, in *GsNodeIdRequest, opts ...grpc.CallOption) (*GsNodeIdResponse, error) {
	client := game.NewDeployServiceClient(m.cli.Conn())
	return client.GetGsNodeId(ctx, in, opts...)
}
