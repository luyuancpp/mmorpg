// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: proto/login/login_service.proto

package game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClientPlayerLogin_Login_FullMethodName        = "/loginpb.ClientPlayerLogin/Login"
	ClientPlayerLogin_CreatePlayer_FullMethodName = "/loginpb.ClientPlayerLogin/CreatePlayer"
	ClientPlayerLogin_EnterGame_FullMethodName    = "/loginpb.ClientPlayerLogin/EnterGame"
	ClientPlayerLogin_LeaveGame_FullMethodName    = "/loginpb.ClientPlayerLogin/LeaveGame"
	ClientPlayerLogin_Disconnect_FullMethodName   = "/loginpb.ClientPlayerLogin/Disconnect"
)

// ClientPlayerLoginClient is the client API for ClientPlayerLogin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientPlayerLoginClient interface {
	Login(ctx context.Context, in *LoginC2LRequest, opts ...grpc.CallOption) (*LoginC2LResponse, error)
	CreatePlayer(ctx context.Context, in *CreatePlayerC2LRequest, opts ...grpc.CallOption) (*CreatePlayerC2LResponse, error)
	EnterGame(ctx context.Context, in *EnterGameC2LRequest, opts ...grpc.CallOption) (*EnterGameC2LResponse, error)
	LeaveGame(ctx context.Context, in *LeaveGameC2LRequest, opts ...grpc.CallOption) (*Empty, error)
	Disconnect(ctx context.Context, in *LoginNodeDisconnectRequest, opts ...grpc.CallOption) (*Empty, error)
}

type clientPlayerLoginClient struct {
	cc grpc.ClientConnInterface
}

func NewClientPlayerLoginClient(cc grpc.ClientConnInterface) ClientPlayerLoginClient {
	return &clientPlayerLoginClient{cc}
}

func (c *clientPlayerLoginClient) Login(ctx context.Context, in *LoginC2LRequest, opts ...grpc.CallOption) (*LoginC2LResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginC2LResponse)
	err := c.cc.Invoke(ctx, ClientPlayerLogin_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientPlayerLoginClient) CreatePlayer(ctx context.Context, in *CreatePlayerC2LRequest, opts ...grpc.CallOption) (*CreatePlayerC2LResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePlayerC2LResponse)
	err := c.cc.Invoke(ctx, ClientPlayerLogin_CreatePlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientPlayerLoginClient) EnterGame(ctx context.Context, in *EnterGameC2LRequest, opts ...grpc.CallOption) (*EnterGameC2LResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnterGameC2LResponse)
	err := c.cc.Invoke(ctx, ClientPlayerLogin_EnterGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientPlayerLoginClient) LeaveGame(ctx context.Context, in *LeaveGameC2LRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ClientPlayerLogin_LeaveGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientPlayerLoginClient) Disconnect(ctx context.Context, in *LoginNodeDisconnectRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ClientPlayerLogin_Disconnect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientPlayerLoginServer is the server API for ClientPlayerLogin service.
// All implementations must embed UnimplementedClientPlayerLoginServer
// for forward compatibility.
type ClientPlayerLoginServer interface {
	Login(context.Context, *LoginC2LRequest) (*LoginC2LResponse, error)
	CreatePlayer(context.Context, *CreatePlayerC2LRequest) (*CreatePlayerC2LResponse, error)
	EnterGame(context.Context, *EnterGameC2LRequest) (*EnterGameC2LResponse, error)
	LeaveGame(context.Context, *LeaveGameC2LRequest) (*Empty, error)
	Disconnect(context.Context, *LoginNodeDisconnectRequest) (*Empty, error)
	mustEmbedUnimplementedClientPlayerLoginServer()
}

// UnimplementedClientPlayerLoginServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientPlayerLoginServer struct{}

func (UnimplementedClientPlayerLoginServer) Login(context.Context, *LoginC2LRequest) (*LoginC2LResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedClientPlayerLoginServer) CreatePlayer(context.Context, *CreatePlayerC2LRequest) (*CreatePlayerC2LResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayer not implemented")
}
func (UnimplementedClientPlayerLoginServer) EnterGame(context.Context, *EnterGameC2LRequest) (*EnterGameC2LResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterGame not implemented")
}
func (UnimplementedClientPlayerLoginServer) LeaveGame(context.Context, *LeaveGameC2LRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGame not implemented")
}
func (UnimplementedClientPlayerLoginServer) Disconnect(context.Context, *LoginNodeDisconnectRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedClientPlayerLoginServer) mustEmbedUnimplementedClientPlayerLoginServer() {}
func (UnimplementedClientPlayerLoginServer) testEmbeddedByValue()                           {}

// UnsafeClientPlayerLoginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientPlayerLoginServer will
// result in compilation errors.
type UnsafeClientPlayerLoginServer interface {
	mustEmbedUnimplementedClientPlayerLoginServer()
}

func RegisterClientPlayerLoginServer(s grpc.ServiceRegistrar, srv ClientPlayerLoginServer) {
	// If the following call pancis, it indicates UnimplementedClientPlayerLoginServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClientPlayerLogin_ServiceDesc, srv)
}

func _ClientPlayerLogin_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginC2LRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientPlayerLoginServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientPlayerLogin_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientPlayerLoginServer).Login(ctx, req.(*LoginC2LRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientPlayerLogin_CreatePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayerC2LRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientPlayerLoginServer).CreatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientPlayerLogin_CreatePlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientPlayerLoginServer).CreatePlayer(ctx, req.(*CreatePlayerC2LRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientPlayerLogin_EnterGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnterGameC2LRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientPlayerLoginServer).EnterGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientPlayerLogin_EnterGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientPlayerLoginServer).EnterGame(ctx, req.(*EnterGameC2LRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientPlayerLogin_LeaveGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGameC2LRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientPlayerLoginServer).LeaveGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientPlayerLogin_LeaveGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientPlayerLoginServer).LeaveGame(ctx, req.(*LeaveGameC2LRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientPlayerLogin_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginNodeDisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientPlayerLoginServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientPlayerLogin_Disconnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientPlayerLoginServer).Disconnect(ctx, req.(*LoginNodeDisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientPlayerLogin_ServiceDesc is the grpc.ServiceDesc for ClientPlayerLogin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientPlayerLogin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loginpb.ClientPlayerLogin",
	HandlerType: (*ClientPlayerLoginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _ClientPlayerLogin_Login_Handler,
		},
		{
			MethodName: "CreatePlayer",
			Handler:    _ClientPlayerLogin_CreatePlayer_Handler,
		},
		{
			MethodName: "EnterGame",
			Handler:    _ClientPlayerLogin_EnterGame_Handler,
		},
		{
			MethodName: "LeaveGame",
			Handler:    _ClientPlayerLogin_LeaveGame_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _ClientPlayerLogin_Disconnect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/login/login_service.proto",
}
