// Code generated by goctl. DO NOT EDIT.
// Source: db_service.proto

package playerdbservice

import (
	"context"

	"db_sever/pb/db"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoadAccountRequest  = db.LoadAccountRequest
	LoadAccountResponse = db.LoadAccountResponse
	LoadPlayerRequest   = db.LoadPlayerRequest
	LoadPlayerResponse  = db.LoadPlayerResponse
	SaveAccountRequest  = db.SaveAccountRequest
	SaveAccountResponse = db.SaveAccountResponse
	SavePlayerRequest   = db.SavePlayerRequest
	SavePlayerResponse  = db.SavePlayerResponse

	PlayerDBService interface {
		Load2Redis(ctx context.Context, in *LoadPlayerRequest, opts ...grpc.CallOption) (*LoadPlayerResponse, error)
		Save2Redis(ctx context.Context, in *SavePlayerRequest, opts ...grpc.CallOption) (*SavePlayerResponse, error)
	}

	defaultPlayerDBService struct {
		cli zrpc.Client
	}
)

func NewPlayerDBService(cli zrpc.Client) PlayerDBService {
	return &defaultPlayerDBService{
		cli: cli,
	}
}

func (m *defaultPlayerDBService) Load2Redis(ctx context.Context, in *LoadPlayerRequest, opts ...grpc.CallOption) (*LoadPlayerResponse, error) {
	client := db.NewPlayerDBServiceClient(m.cli.Conn())
	return client.Load2Redis(ctx, in, opts...)
}

func (m *defaultPlayerDBService) Save2Redis(ctx context.Context, in *SavePlayerRequest, opts ...grpc.CallOption) (*SavePlayerResponse, error) {
	client := db.NewPlayerDBServiceClient(m.cli.Conn())
	return client.Save2Redis(ctx, in, opts...)
}
