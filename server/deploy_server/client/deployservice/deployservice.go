// Code generated by goctl. DO NOT EDIT.
// Source: deploy_service.proto

package deployservice

import (
	"context"

	"deploy_server/pb/deploy"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ControllerNodesDb   = deploy.ControllerNodesDb
	ControllerServerDb  = deploy.ControllerServerDb
	DatabaseServerDb    = deploy.DatabaseServerDb
	GameServerDb        = deploy.GameServerDb
	GateServerDb        = deploy.GateServerDb
	GsNodeIdRequest     = deploy.GsNodeIdRequest
	GsNodeIdResponse    = deploy.GsNodeIdResponse
	IpPort              = deploy.IpPort
	LobbyInfoResponse   = deploy.LobbyInfoResponse
	LobbyServerDb       = deploy.LobbyServerDb
	LobbyServerRequest  = deploy.LobbyServerRequest
	LobbyServerResponse = deploy.LobbyServerResponse
	LoginNodesDb        = deploy.LoginNodesDb
	LoginServerDb       = deploy.LoginServerDb
	NodeInfoRequest     = deploy.NodeInfoRequest
	NodeInfoResponse    = deploy.NodeInfoResponse
	RedisServerDb       = deploy.RedisServerDb
	ServersInfoData     = deploy.ServersInfoData
	StartGsRequest      = deploy.StartGsRequest
	StartGsResponse     = deploy.StartGsResponse

	DeployService interface {
		GetNodeInfo(ctx context.Context, in *NodeInfoRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error)
		StartGs(ctx context.Context, in *StartGsRequest, opts ...grpc.CallOption) (*StartGsResponse, error)
		GetGsNodeId(ctx context.Context, in *GsNodeIdRequest, opts ...grpc.CallOption) (*GsNodeIdResponse, error)
	}

	defaultDeployService struct {
		cli zrpc.Client
	}
)

func NewDeployService(cli zrpc.Client) DeployService {
	return &defaultDeployService{
		cli: cli,
	}
}

func (m *defaultDeployService) GetNodeInfo(ctx context.Context, in *NodeInfoRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error) {
	client := deploy.NewDeployServiceClient(m.cli.Conn())
	return client.GetNodeInfo(ctx, in, opts...)
}

func (m *defaultDeployService) StartGs(ctx context.Context, in *StartGsRequest, opts ...grpc.CallOption) (*StartGsResponse, error) {
	client := deploy.NewDeployServiceClient(m.cli.Conn())
	return client.StartGs(ctx, in, opts...)
}

func (m *defaultDeployService) GetGsNodeId(ctx context.Context, in *GsNodeIdRequest, opts ...grpc.CallOption) (*GsNodeIdResponse, error) {
	client := deploy.NewDeployServiceClient(m.cli.Conn())
	return client.GetGsNodeId(ctx, in, opts...)
}
