// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#include "rpc.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace muduo {
namespace net {

inline constexpr RpcMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : service_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        method_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        request_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        response_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{::uint64_t{0u}},
        type_{static_cast< ::muduo::net::MessageType >(0)},
        error_{static_cast< ::muduo::net::ErrorCode >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RpcMessage::RpcMessage(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RpcMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcMessageDefaultTypeInternal() {}
  union {
    RpcMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcMessageDefaultTypeInternal _RpcMessage_default_instance_;
}  // namespace net
}  // namespace muduo
static ::_pb::Metadata file_level_metadata_rpc_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_rpc_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_rpc_2eproto = nullptr;
const ::uint32_t TableStruct_rpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::muduo::net::RpcMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::muduo::net::RpcMessage, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::muduo::net::RpcMessage, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::muduo::net::RpcMessage, _impl_.service_),
    PROTOBUF_FIELD_OFFSET(::muduo::net::RpcMessage, _impl_.method_),
    PROTOBUF_FIELD_OFFSET(::muduo::net::RpcMessage, _impl_.request_),
    PROTOBUF_FIELD_OFFSET(::muduo::net::RpcMessage, _impl_.response_),
    PROTOBUF_FIELD_OFFSET(::muduo::net::RpcMessage, _impl_.error_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::muduo::net::RpcMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::muduo::net::_RpcMessage_default_instance_._instance,
};
const char descriptor_table_protodef_rpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\trpc.proto\022\tmuduo.net\"\247\001\n\nRpcMessage\022$\n"
    "\004type\030\001 \001(\0162\026.muduo.net.MessageType\022\n\n\002i"
    "d\030\002 \001(\006\022\017\n\007service\030\003 \001(\t\022\016\n\006method\030\004 \001(\t"
    "\022\017\n\007request\030\005 \001(\014\022\020\n\010response\030\006 \001(\014\022#\n\005e"
    "rror\030\007 \001(\0162\024.muduo.net.ErrorCode*7\n\013Mess"
    "ageType\022\013\n\007REQUEST\020\000\022\014\n\010RESPONSE\020\001\022\r\n\tRP"
    "C_ERROR\020\002*\205\001\n\tErrorCode\022\020\n\014RPC_NO_ERROR\020"
    "\000\022\017\n\013WRONG_PROTO\020\001\022\016\n\nNO_SERVICE\020\002\022\r\n\tNO"
    "_METHOD\020\003\022\023\n\017INVALID_REQUEST\020\004\022\024\n\020INVALI"
    "D_RESPONSE\020\005\022\013\n\007TIMEOUT\020\006B\'\n\033com.chenshu"
    "o.muduo.protorpcB\010RpcProtob\006proto3"
};
static ::absl::once_flag descriptor_table_rpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rpc_2eproto = {
    false,
    false,
    434,
    descriptor_table_protodef_rpc_2eproto,
    "rpc.proto",
    &descriptor_table_rpc_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_rpc_2eproto::offsets,
    file_level_metadata_rpc_2eproto,
    file_level_enum_descriptors_rpc_2eproto,
    file_level_service_descriptors_rpc_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rpc_2eproto_getter() {
  return &descriptor_table_rpc_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rpc_2eproto(&descriptor_table_rpc_2eproto);
namespace muduo {
namespace net {
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t MessageType_internal_data_[] = {
    196608u, 0u, };
bool MessageType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t ErrorCode_internal_data_[] = {
    458752u, 0u, };
bool ErrorCode_IsValid(int value) {
  return 0 <= value && value <= 6;
}
// ===================================================================

class RpcMessage::_Internal {
 public:
};

RpcMessage::RpcMessage(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:muduo.net.RpcMessage)
}
inline PROTOBUF_NDEBUG_INLINE RpcMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : service_(arena, from.service_),
        method_(arena, from.method_),
        request_(arena, from.request_),
        response_(arena, from.response_),
        _cached_size_{0} {}

RpcMessage::RpcMessage(
    ::google::protobuf::Arena* arena,
    const RpcMessage& from)
    : ::google::protobuf::Message(arena) {
  RpcMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, error_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::error_));

  // @@protoc_insertion_point(copy_constructor:muduo.net.RpcMessage)
}
inline PROTOBUF_NDEBUG_INLINE RpcMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : service_(arena),
        method_(arena),
        request_(arena),
        response_(arena),
        _cached_size_{0} {}

inline void RpcMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, error_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::error_));
}
RpcMessage::~RpcMessage() {
  // @@protoc_insertion_point(destructor:muduo.net.RpcMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RpcMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.service_.Destroy();
  _impl_.method_.Destroy();
  _impl_.request_.Destroy();
  _impl_.response_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RpcMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:muduo.net.RpcMessage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_.ClearToEmpty();
  _impl_.method_.ClearToEmpty();
  _impl_.request_.ClearToEmpty();
  _impl_.response_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.error_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.error_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RpcMessage::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 42, 2> RpcMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RpcMessage_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .muduo.net.MessageType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RpcMessage, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.type_)}},
    // fixed64 id = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.id_)}},
    // string service = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.service_)}},
    // string method = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.method_)}},
    // bytes request = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.request_)}},
    // bytes response = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.response_)}},
    // .muduo.net.ErrorCode error = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RpcMessage, _impl_.error_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.error_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .muduo.net.MessageType type = 1;
    {PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // fixed64 id = 2;
    {PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
    // string service = 3;
    {PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.service_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string method = 4;
    {PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.method_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes request = 5;
    {PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.request_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes response = 6;
    {PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.response_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .muduo.net.ErrorCode error = 7;
    {PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.error_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\24\0\0\7\6\0\0\0"
    "muduo.net.RpcMessage"
    "service"
    "method"
  }},
};

::uint8_t* RpcMessage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muduo.net.RpcMessage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .muduo.net.MessageType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // fixed64 id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        2, this->_internal_id(), target);
  }

  // string service = 3;
  if (!this->_internal_service().empty()) {
    const std::string& _s = this->_internal_service();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "muduo.net.RpcMessage.service");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string method = 4;
  if (!this->_internal_method().empty()) {
    const std::string& _s = this->_internal_method();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "muduo.net.RpcMessage.method");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // bytes request = 5;
  if (!this->_internal_request().empty()) {
    const std::string& _s = this->_internal_request();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  // bytes response = 6;
  if (!this->_internal_response().empty()) {
    const std::string& _s = this->_internal_response();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // .muduo.net.ErrorCode error = 7;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muduo.net.RpcMessage)
  return target;
}

::size_t RpcMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muduo.net.RpcMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service = 3;
  if (!this->_internal_service().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_service());
  }

  // string method = 4;
  if (!this->_internal_method().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_method());
  }

  // bytes request = 5;
  if (!this->_internal_request().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_request());
  }

  // bytes response = 6;
  if (!this->_internal_response().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_response());
  }

  // fixed64 id = 2;
  if (this->_internal_id() != 0) {
    total_size += 9;
  }

  // .muduo.net.MessageType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .muduo.net.ErrorCode error = 7;
  if (this->_internal_error() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RpcMessage::_class_data_ = {
    RpcMessage::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RpcMessage::GetClassData() const {
  return &_class_data_;
}

void RpcMessage::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RpcMessage*>(&to_msg);
  auto& from = static_cast<const RpcMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:muduo.net.RpcMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service().empty()) {
    _this->_internal_set_service(from._internal_service());
  }
  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  if (!from._internal_request().empty()) {
    _this->_internal_set_request(from._internal_request());
  }
  if (!from._internal_response().empty()) {
    _this->_internal_set_response(from._internal_response());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RpcMessage::CopyFrom(const RpcMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muduo.net.RpcMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RpcMessage::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RpcMessage::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RpcMessage::InternalSwap(RpcMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.service_, &other->_impl_.service_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.method_, &other->_impl_.method_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.request_, &other->_impl_.request_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.response_, &other->_impl_.response_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.error_)
      + sizeof(RpcMessage::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(RpcMessage, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata RpcMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_2eproto_getter, &descriptor_table_rpc_2eproto_once,
      file_level_metadata_rpc_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace net
}  // namespace muduo
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
