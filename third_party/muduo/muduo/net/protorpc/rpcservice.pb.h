// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcservice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpcservice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_rpcservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 3021000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/service.h"
#include "google/protobuf/unknown_field_set.h"
#include "rpc.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_rpcservice_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpcservice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_rpcservice_2eproto;
namespace muduo {
namespace net {
class GetServiceRequest;
struct GetServiceRequestDefaultTypeInternal;
extern GetServiceRequestDefaultTypeInternal _GetServiceRequest_default_instance_;
class GetServiceResponse;
struct GetServiceResponseDefaultTypeInternal;
extern GetServiceResponseDefaultTypeInternal _GetServiceResponse_default_instance_;
class ListRpcRequest;
struct ListRpcRequestDefaultTypeInternal;
extern ListRpcRequestDefaultTypeInternal _ListRpcRequest_default_instance_;
class ListRpcResponse;
struct ListRpcResponseDefaultTypeInternal;
extern ListRpcResponseDefaultTypeInternal _ListRpcResponse_default_instance_;
}  // namespace net
}  // namespace muduo
PROTOBUF_NAMESPACE_OPEN
template <>
::muduo::net::GetServiceRequest* Arena::CreateMaybeMessage<::muduo::net::GetServiceRequest>(Arena*);
template <>
::muduo::net::GetServiceResponse* Arena::CreateMaybeMessage<::muduo::net::GetServiceResponse>(Arena*);
template <>
::muduo::net::ListRpcRequest* Arena::CreateMaybeMessage<::muduo::net::ListRpcRequest>(Arena*);
template <>
::muduo::net::ListRpcResponse* Arena::CreateMaybeMessage<::muduo::net::ListRpcResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace muduo {
namespace net {

// ===================================================================


// -------------------------------------------------------------------

class ListRpcRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:muduo.net.ListRpcRequest) */ {
 public:
  inline ListRpcRequest() : ListRpcRequest(nullptr) {}
  ~ListRpcRequest() override;
  explicit PROTOBUF_CONSTEXPR ListRpcRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRpcRequest(const ListRpcRequest& from);
  ListRpcRequest(ListRpcRequest&& from) noexcept
    : ListRpcRequest() {
    *this = ::std::move(from);
  }

  inline ListRpcRequest& operator=(const ListRpcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRpcRequest& operator=(ListRpcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRpcRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRpcRequest* internal_default_instance() {
    return reinterpret_cast<const ListRpcRequest*>(
               &_ListRpcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListRpcRequest& a, ListRpcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRpcRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRpcRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRpcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRpcRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRpcRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListRpcRequest& from) {
    ListRpcRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRpcRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "muduo.net.ListRpcRequest";
  }
  protected:
  explicit ListRpcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kListMethodFieldNumber = 2,
  };
  // optional string service_name = 1;
  bool has_service_name() const;
  void clear_service_name() ;
  const std::string& service_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service_name(Arg_&& arg, Args_... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* ptr);

  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(
      const std::string& value);
  std::string* _internal_mutable_service_name();

  public:
  // optional bool list_method = 2;
  bool has_list_method() const;
  void clear_list_method() ;
  bool list_method() const;
  void set_list_method(bool value);

  private:
  bool _internal_list_method() const;
  void _internal_set_list_method(bool value);

  public:
  // @@protoc_insertion_point(class_scope:muduo.net.ListRpcRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
    bool list_method_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpcservice_2eproto;
};// -------------------------------------------------------------------

class ListRpcResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:muduo.net.ListRpcResponse) */ {
 public:
  inline ListRpcResponse() : ListRpcResponse(nullptr) {}
  ~ListRpcResponse() override;
  explicit PROTOBUF_CONSTEXPR ListRpcResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRpcResponse(const ListRpcResponse& from);
  ListRpcResponse(ListRpcResponse&& from) noexcept
    : ListRpcResponse() {
    *this = ::std::move(from);
  }

  inline ListRpcResponse& operator=(const ListRpcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRpcResponse& operator=(ListRpcResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRpcResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRpcResponse* internal_default_instance() {
    return reinterpret_cast<const ListRpcResponse*>(
               &_ListRpcResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListRpcResponse& a, ListRpcResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRpcResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRpcResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRpcResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRpcResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRpcResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListRpcResponse& from) {
    ListRpcResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRpcResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "muduo.net.ListRpcResponse";
  }
  protected:
  explicit ListRpcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 2,
    kMethodNameFieldNumber = 3,
    kErrorFieldNumber = 1,
  };
  // repeated string service_name = 2;
  int service_name_size() const;
  private:
  int _internal_service_name_size() const;

  public:
  void clear_service_name() ;
  const std::string& service_name(int index) const;
  std::string* mutable_service_name(int index);
  void set_service_name(int index, const std::string& value);
  void set_service_name(int index, std::string&& value);
  void set_service_name(int index, const char* value);
  void set_service_name(int index, const char* value, std::size_t size);
  void set_service_name(int index, absl::string_view value);
  std::string* add_service_name();
  void add_service_name(const std::string& value);
  void add_service_name(std::string&& value);
  void add_service_name(const char* value);
  void add_service_name(const char* value, std::size_t size);
  void add_service_name(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& service_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_service_name();

  private:
  const std::string& _internal_service_name(int index) const;
  std::string* _internal_add_service_name();

  public:
  // repeated string method_name = 3;
  int method_name_size() const;
  private:
  int _internal_method_name_size() const;

  public:
  void clear_method_name() ;
  const std::string& method_name(int index) const;
  std::string* mutable_method_name(int index);
  void set_method_name(int index, const std::string& value);
  void set_method_name(int index, std::string&& value);
  void set_method_name(int index, const char* value);
  void set_method_name(int index, const char* value, std::size_t size);
  void set_method_name(int index, absl::string_view value);
  std::string* add_method_name();
  void add_method_name(const std::string& value);
  void add_method_name(std::string&& value);
  void add_method_name(const char* value);
  void add_method_name(const char* value, std::size_t size);
  void add_method_name(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& method_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_method_name();

  private:
  const std::string& _internal_method_name(int index) const;
  std::string* _internal_add_method_name();

  public:
  // .muduo.net.ErrorCode error = 1;
  void clear_error() ;
  ::muduo::net::ErrorCode error() const;
  void set_error(::muduo::net::ErrorCode value);

  private:
  ::muduo::net::ErrorCode _internal_error() const;
  void _internal_set_error(::muduo::net::ErrorCode value);

  public:
  // @@protoc_insertion_point(class_scope:muduo.net.ListRpcResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> service_name_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> method_name_;
    int error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpcservice_2eproto;
};// -------------------------------------------------------------------

class GetServiceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:muduo.net.GetServiceRequest) */ {
 public:
  inline GetServiceRequest() : GetServiceRequest(nullptr) {}
  ~GetServiceRequest() override;
  explicit PROTOBUF_CONSTEXPR GetServiceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceRequest(const GetServiceRequest& from);
  GetServiceRequest(GetServiceRequest&& from) noexcept
    : GetServiceRequest() {
    *this = ::std::move(from);
  }

  inline GetServiceRequest& operator=(const GetServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceRequest& operator=(GetServiceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceRequest* internal_default_instance() {
    return reinterpret_cast<const GetServiceRequest*>(
               &_GetServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetServiceRequest& a, GetServiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetServiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetServiceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServiceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetServiceRequest& from) {
    GetServiceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "muduo.net.GetServiceRequest";
  }
  protected:
  explicit GetServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
  };
  // string service_name = 1;
  void clear_service_name() ;
  const std::string& service_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service_name(Arg_&& arg, Args_... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* ptr);

  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(
      const std::string& value);
  std::string* _internal_mutable_service_name();

  public:
  // @@protoc_insertion_point(class_scope:muduo.net.GetServiceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpcservice_2eproto;
};// -------------------------------------------------------------------

class GetServiceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:muduo.net.GetServiceResponse) */ {
 public:
  inline GetServiceResponse() : GetServiceResponse(nullptr) {}
  ~GetServiceResponse() override;
  explicit PROTOBUF_CONSTEXPR GetServiceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetServiceResponse(const GetServiceResponse& from);
  GetServiceResponse(GetServiceResponse&& from) noexcept
    : GetServiceResponse() {
    *this = ::std::move(from);
  }

  inline GetServiceResponse& operator=(const GetServiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetServiceResponse& operator=(GetServiceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetServiceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetServiceResponse* internal_default_instance() {
    return reinterpret_cast<const GetServiceResponse*>(
               &_GetServiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetServiceResponse& a, GetServiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetServiceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetServiceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetServiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetServiceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetServiceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetServiceResponse& from) {
    GetServiceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServiceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "muduo.net.GetServiceResponse";
  }
  protected:
  explicit GetServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtoFileFieldNumber = 2,
    kProtoFileNameFieldNumber = 3,
    kErrorFieldNumber = 1,
  };
  // string proto_file = 2;
  void clear_proto_file() ;
  const std::string& proto_file() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proto_file(Arg_&& arg, Args_... args);
  std::string* mutable_proto_file();
  PROTOBUF_NODISCARD std::string* release_proto_file();
  void set_allocated_proto_file(std::string* ptr);

  private:
  const std::string& _internal_proto_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_file(
      const std::string& value);
  std::string* _internal_mutable_proto_file();

  public:
  // string proto_file_name = 3;
  void clear_proto_file_name() ;
  const std::string& proto_file_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proto_file_name(Arg_&& arg, Args_... args);
  std::string* mutable_proto_file_name();
  PROTOBUF_NODISCARD std::string* release_proto_file_name();
  void set_allocated_proto_file_name(std::string* ptr);

  private:
  const std::string& _internal_proto_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_file_name(
      const std::string& value);
  std::string* _internal_mutable_proto_file_name();

  public:
  // .muduo.net.ErrorCode error = 1;
  void clear_error() ;
  ::muduo::net::ErrorCode error() const;
  void set_error(::muduo::net::ErrorCode value);

  private:
  ::muduo::net::ErrorCode _internal_error() const;
  void _internal_set_error(::muduo::net::ErrorCode value);

  public:
  // @@protoc_insertion_point(class_scope:muduo.net.GetServiceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_file_name_;
    int error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpcservice_2eproto;
};

// ===================================================================


// -------------------------------------------------------------------

class RpcService_Stub;
class RpcService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  RpcService() = default;

 public:
  using Stub = RpcService_Stub;

  RpcService(const RpcService&) = delete;
  RpcService& operator=(const RpcService&) = delete;
  virtual ~RpcService() = default;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void listRpc(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                        const ::muduo::net::ListRpcRequest* request,
                        ::muduo::net::ListRpcResponse* response,
                        ::google::protobuf::Closure* done);
  virtual void getService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                        const ::muduo::net::GetServiceRequest* request,
                        ::muduo::net::GetServiceResponse* response,
                        ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------
  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor() override;

  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done) override;

  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
      const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const override;

  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
      const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const override;
};

class RpcService_Stub final : public RpcService {
 public:
  RpcService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RpcService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);

  RpcService_Stub(const RpcService_Stub&) = delete;
  RpcService_Stub& operator=(const RpcService_Stub&) = delete;

  ~RpcService_Stub() override;

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RpcService ------------------------------------------
  void listRpc(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                        const ::muduo::net::ListRpcRequest* request,
                        ::muduo::net::ListRpcResponse* response,
                        ::google::protobuf::Closure* done) override;
  void getService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                        const ::muduo::net::GetServiceRequest* request,
                        ::muduo::net::GetServiceResponse* response,
                        ::google::protobuf::Closure* done) override;

 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
};
// ===================================================================



// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ListRpcRequest

// optional string service_name = 1;
inline bool ListRpcRequest::has_service_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ListRpcRequest::clear_service_name() {
  _impl_.service_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListRpcRequest::service_name() const {
  // @@protoc_insertion_point(field_get:muduo.net.ListRpcRequest.service_name)
  return _internal_service_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListRpcRequest::set_service_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.service_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:muduo.net.ListRpcRequest.service_name)
}
inline std::string* ListRpcRequest::mutable_service_name() {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:muduo.net.ListRpcRequest.service_name)
  return _s;
}
inline const std::string& ListRpcRequest::_internal_service_name() const {
  return _impl_.service_name_.Get();
}
inline void ListRpcRequest::_internal_set_service_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.service_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ListRpcRequest::_internal_mutable_service_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.service_name_.Mutable( GetArenaForAllocation());
}
inline std::string* ListRpcRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:muduo.net.ListRpcRequest.service_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.service_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ListRpcRequest::set_allocated_service_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.service_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_name_.IsDefault()) {
          _impl_.service_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:muduo.net.ListRpcRequest.service_name)
}

// optional bool list_method = 2;
inline bool ListRpcRequest::has_list_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ListRpcRequest::clear_list_method() {
  _impl_.list_method_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool ListRpcRequest::list_method() const {
  // @@protoc_insertion_point(field_get:muduo.net.ListRpcRequest.list_method)
  return _internal_list_method();
}
inline void ListRpcRequest::set_list_method(bool value) {
  _internal_set_list_method(value);
  // @@protoc_insertion_point(field_set:muduo.net.ListRpcRequest.list_method)
}
inline bool ListRpcRequest::_internal_list_method() const {
  return _impl_.list_method_;
}
inline void ListRpcRequest::_internal_set_list_method(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.list_method_ = value;
}

// -------------------------------------------------------------------

// ListRpcResponse

// .muduo.net.ErrorCode error = 1;
inline void ListRpcResponse::clear_error() {
  _impl_.error_ = 0;
}
inline ::muduo::net::ErrorCode ListRpcResponse::error() const {
  // @@protoc_insertion_point(field_get:muduo.net.ListRpcResponse.error)
  return _internal_error();
}
inline void ListRpcResponse::set_error(::muduo::net::ErrorCode value) {
   _internal_set_error(value);
  // @@protoc_insertion_point(field_set:muduo.net.ListRpcResponse.error)
}
inline ::muduo::net::ErrorCode ListRpcResponse::_internal_error() const {
  return static_cast<::muduo::net::ErrorCode>(_impl_.error_);
}
inline void ListRpcResponse::_internal_set_error(::muduo::net::ErrorCode value) {
  ;
  _impl_.error_ = value;
}

// repeated string service_name = 2;
inline int ListRpcResponse::_internal_service_name_size() const {
  return _impl_.service_name_.size();
}
inline int ListRpcResponse::service_name_size() const {
  return _internal_service_name_size();
}
inline void ListRpcResponse::clear_service_name() {
  _impl_.service_name_.Clear();
}
inline std::string* ListRpcResponse::add_service_name() {
  std::string* _s = _internal_add_service_name();
  // @@protoc_insertion_point(field_add_mutable:muduo.net.ListRpcResponse.service_name)
  return _s;
}
inline const std::string& ListRpcResponse::_internal_service_name(int index) const {
  return _impl_.service_name_.Get(index);
}
inline const std::string& ListRpcResponse::service_name(int index) const {
  // @@protoc_insertion_point(field_get:muduo.net.ListRpcResponse.service_name)
  return _internal_service_name(index);
}
inline std::string* ListRpcResponse::mutable_service_name(int index) {
  // @@protoc_insertion_point(field_mutable:muduo.net.ListRpcResponse.service_name)
  return _impl_.service_name_.Mutable(index);
}
inline void ListRpcResponse::set_service_name(int index, const std::string& value) {
  _impl_.service_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:muduo.net.ListRpcResponse.service_name)
}
inline void ListRpcResponse::set_service_name(int index, std::string&& value) {
  _impl_.service_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:muduo.net.ListRpcResponse.service_name)
}
inline void ListRpcResponse::set_service_name(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _impl_.service_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:muduo.net.ListRpcResponse.service_name)
}
inline void ListRpcResponse::set_service_name(int index, const char* value,
                              std::size_t size) {
  _impl_.service_name_.Mutable(index)->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:muduo.net.ListRpcResponse.service_name)
}
inline void ListRpcResponse::set_service_name(int index, absl::string_view value) {
  _impl_.service_name_.Mutable(index)->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:muduo.net.ListRpcResponse.service_name)
}
inline std::string* ListRpcResponse::_internal_add_service_name() { return _impl_.service_name_.Add(); }
inline void ListRpcResponse::add_service_name(const std::string& value) {
  _impl_.service_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:muduo.net.ListRpcResponse.service_name)
}
inline void ListRpcResponse::add_service_name(std::string&& value) {
  _impl_.service_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:muduo.net.ListRpcResponse.service_name)
}
inline void ListRpcResponse::add_service_name(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _impl_.service_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:muduo.net.ListRpcResponse.service_name)
}
inline void ListRpcResponse::add_service_name(const char* value, std::size_t size) {
  _impl_.service_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:muduo.net.ListRpcResponse.service_name)
}
inline void ListRpcResponse::add_service_name(absl::string_view value) {
  _impl_.service_name_.Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:muduo.net.ListRpcResponse.service_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListRpcResponse::service_name() const {
  // @@protoc_insertion_point(field_list:muduo.net.ListRpcResponse.service_name)
  return _impl_.service_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ListRpcResponse::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable_list:muduo.net.ListRpcResponse.service_name)
  return &_impl_.service_name_;
}

// repeated string method_name = 3;
inline int ListRpcResponse::_internal_method_name_size() const {
  return _impl_.method_name_.size();
}
inline int ListRpcResponse::method_name_size() const {
  return _internal_method_name_size();
}
inline void ListRpcResponse::clear_method_name() {
  _impl_.method_name_.Clear();
}
inline std::string* ListRpcResponse::add_method_name() {
  std::string* _s = _internal_add_method_name();
  // @@protoc_insertion_point(field_add_mutable:muduo.net.ListRpcResponse.method_name)
  return _s;
}
inline const std::string& ListRpcResponse::_internal_method_name(int index) const {
  return _impl_.method_name_.Get(index);
}
inline const std::string& ListRpcResponse::method_name(int index) const {
  // @@protoc_insertion_point(field_get:muduo.net.ListRpcResponse.method_name)
  return _internal_method_name(index);
}
inline std::string* ListRpcResponse::mutable_method_name(int index) {
  // @@protoc_insertion_point(field_mutable:muduo.net.ListRpcResponse.method_name)
  return _impl_.method_name_.Mutable(index);
}
inline void ListRpcResponse::set_method_name(int index, const std::string& value) {
  _impl_.method_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:muduo.net.ListRpcResponse.method_name)
}
inline void ListRpcResponse::set_method_name(int index, std::string&& value) {
  _impl_.method_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:muduo.net.ListRpcResponse.method_name)
}
inline void ListRpcResponse::set_method_name(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _impl_.method_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:muduo.net.ListRpcResponse.method_name)
}
inline void ListRpcResponse::set_method_name(int index, const char* value,
                              std::size_t size) {
  _impl_.method_name_.Mutable(index)->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:muduo.net.ListRpcResponse.method_name)
}
inline void ListRpcResponse::set_method_name(int index, absl::string_view value) {
  _impl_.method_name_.Mutable(index)->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:muduo.net.ListRpcResponse.method_name)
}
inline std::string* ListRpcResponse::_internal_add_method_name() { return _impl_.method_name_.Add(); }
inline void ListRpcResponse::add_method_name(const std::string& value) {
  _impl_.method_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:muduo.net.ListRpcResponse.method_name)
}
inline void ListRpcResponse::add_method_name(std::string&& value) {
  _impl_.method_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:muduo.net.ListRpcResponse.method_name)
}
inline void ListRpcResponse::add_method_name(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _impl_.method_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:muduo.net.ListRpcResponse.method_name)
}
inline void ListRpcResponse::add_method_name(const char* value, std::size_t size) {
  _impl_.method_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:muduo.net.ListRpcResponse.method_name)
}
inline void ListRpcResponse::add_method_name(absl::string_view value) {
  _impl_.method_name_.Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:muduo.net.ListRpcResponse.method_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListRpcResponse::method_name() const {
  // @@protoc_insertion_point(field_list:muduo.net.ListRpcResponse.method_name)
  return _impl_.method_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ListRpcResponse::mutable_method_name() {
  // @@protoc_insertion_point(field_mutable_list:muduo.net.ListRpcResponse.method_name)
  return &_impl_.method_name_;
}

// -------------------------------------------------------------------

// GetServiceRequest

// string service_name = 1;
inline void GetServiceRequest::clear_service_name() {
  _impl_.service_name_.ClearToEmpty();
}
inline const std::string& GetServiceRequest::service_name() const {
  // @@protoc_insertion_point(field_get:muduo.net.GetServiceRequest.service_name)
  return _internal_service_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetServiceRequest::set_service_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.service_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:muduo.net.GetServiceRequest.service_name)
}
inline std::string* GetServiceRequest::mutable_service_name() {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:muduo.net.GetServiceRequest.service_name)
  return _s;
}
inline const std::string& GetServiceRequest::_internal_service_name() const {
  return _impl_.service_name_.Get();
}
inline void GetServiceRequest::_internal_set_service_name(const std::string& value) {
  ;


  _impl_.service_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetServiceRequest::_internal_mutable_service_name() {
  ;
  return _impl_.service_name_.Mutable( GetArenaForAllocation());
}
inline std::string* GetServiceRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:muduo.net.GetServiceRequest.service_name)
  return _impl_.service_name_.Release();
}
inline void GetServiceRequest::set_allocated_service_name(std::string* value) {
  _impl_.service_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_name_.IsDefault()) {
          _impl_.service_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:muduo.net.GetServiceRequest.service_name)
}

// -------------------------------------------------------------------

// GetServiceResponse

// .muduo.net.ErrorCode error = 1;
inline void GetServiceResponse::clear_error() {
  _impl_.error_ = 0;
}
inline ::muduo::net::ErrorCode GetServiceResponse::error() const {
  // @@protoc_insertion_point(field_get:muduo.net.GetServiceResponse.error)
  return _internal_error();
}
inline void GetServiceResponse::set_error(::muduo::net::ErrorCode value) {
   _internal_set_error(value);
  // @@protoc_insertion_point(field_set:muduo.net.GetServiceResponse.error)
}
inline ::muduo::net::ErrorCode GetServiceResponse::_internal_error() const {
  return static_cast<::muduo::net::ErrorCode>(_impl_.error_);
}
inline void GetServiceResponse::_internal_set_error(::muduo::net::ErrorCode value) {
  ;
  _impl_.error_ = value;
}

// string proto_file = 2;
inline void GetServiceResponse::clear_proto_file() {
  _impl_.proto_file_.ClearToEmpty();
}
inline const std::string& GetServiceResponse::proto_file() const {
  // @@protoc_insertion_point(field_get:muduo.net.GetServiceResponse.proto_file)
  return _internal_proto_file();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetServiceResponse::set_proto_file(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proto_file_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:muduo.net.GetServiceResponse.proto_file)
}
inline std::string* GetServiceResponse::mutable_proto_file() {
  std::string* _s = _internal_mutable_proto_file();
  // @@protoc_insertion_point(field_mutable:muduo.net.GetServiceResponse.proto_file)
  return _s;
}
inline const std::string& GetServiceResponse::_internal_proto_file() const {
  return _impl_.proto_file_.Get();
}
inline void GetServiceResponse::_internal_set_proto_file(const std::string& value) {
  ;


  _impl_.proto_file_.Set(value, GetArenaForAllocation());
}
inline std::string* GetServiceResponse::_internal_mutable_proto_file() {
  ;
  return _impl_.proto_file_.Mutable( GetArenaForAllocation());
}
inline std::string* GetServiceResponse::release_proto_file() {
  // @@protoc_insertion_point(field_release:muduo.net.GetServiceResponse.proto_file)
  return _impl_.proto_file_.Release();
}
inline void GetServiceResponse::set_allocated_proto_file(std::string* value) {
  _impl_.proto_file_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proto_file_.IsDefault()) {
          _impl_.proto_file_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:muduo.net.GetServiceResponse.proto_file)
}

// string proto_file_name = 3;
inline void GetServiceResponse::clear_proto_file_name() {
  _impl_.proto_file_name_.ClearToEmpty();
}
inline const std::string& GetServiceResponse::proto_file_name() const {
  // @@protoc_insertion_point(field_get:muduo.net.GetServiceResponse.proto_file_name)
  return _internal_proto_file_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetServiceResponse::set_proto_file_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proto_file_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:muduo.net.GetServiceResponse.proto_file_name)
}
inline std::string* GetServiceResponse::mutable_proto_file_name() {
  std::string* _s = _internal_mutable_proto_file_name();
  // @@protoc_insertion_point(field_mutable:muduo.net.GetServiceResponse.proto_file_name)
  return _s;
}
inline const std::string& GetServiceResponse::_internal_proto_file_name() const {
  return _impl_.proto_file_name_.Get();
}
inline void GetServiceResponse::_internal_set_proto_file_name(const std::string& value) {
  ;


  _impl_.proto_file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetServiceResponse::_internal_mutable_proto_file_name() {
  ;
  return _impl_.proto_file_name_.Mutable( GetArenaForAllocation());
}
inline std::string* GetServiceResponse::release_proto_file_name() {
  // @@protoc_insertion_point(field_release:muduo.net.GetServiceResponse.proto_file_name)
  return _impl_.proto_file_name_.Release();
}
inline void GetServiceResponse::set_allocated_proto_file_name(std::string* value) {
  _impl_.proto_file_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proto_file_name_.IsDefault()) {
          _impl_.proto_file_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:muduo.net.GetServiceResponse.proto_file_name)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace net
}  // namespace muduo


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_rpcservice_2eproto_2epb_2eh
