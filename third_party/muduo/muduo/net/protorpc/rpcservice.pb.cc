// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcservice.proto

#include "rpcservice.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace muduo {
namespace net {
constexpr ListRpcRequest::ListRpcRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , list_method_(false){}
struct ListRpcRequestDefaultTypeInternal {
  constexpr ListRpcRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListRpcRequestDefaultTypeInternal() {}
  union {
    ListRpcRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListRpcRequestDefaultTypeInternal _ListRpcRequest_default_instance_;
constexpr ListRpcResponse::ListRpcResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_name_()
  , method_name_()
  , error_(0)
{}
struct ListRpcResponseDefaultTypeInternal {
  constexpr ListRpcResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListRpcResponseDefaultTypeInternal() {}
  union {
    ListRpcResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListRpcResponseDefaultTypeInternal _ListRpcResponse_default_instance_;
constexpr GetServiceRequest::GetServiceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetServiceRequestDefaultTypeInternal {
  constexpr GetServiceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetServiceRequestDefaultTypeInternal() {}
  union {
    GetServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetServiceRequestDefaultTypeInternal _GetServiceRequest_default_instance_;
constexpr GetServiceResponse::GetServiceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : proto_file_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proto_file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(0)
{}
struct GetServiceResponseDefaultTypeInternal {
  constexpr GetServiceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetServiceResponseDefaultTypeInternal() {}
  union {
    GetServiceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetServiceResponseDefaultTypeInternal _GetServiceResponse_default_instance_;
}  // namespace net
}  // namespace muduo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rpcservice_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_rpcservice_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_rpcservice_2eproto[1];

const uint32_t TableStruct_rpcservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::muduo::net::ListRpcRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::muduo::net::ListRpcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muduo::net::ListRpcRequest, service_name_),
  PROTOBUF_FIELD_OFFSET(::muduo::net::ListRpcRequest, list_method_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muduo::net::ListRpcResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muduo::net::ListRpcResponse, error_),
  PROTOBUF_FIELD_OFFSET(::muduo::net::ListRpcResponse, service_name_),
  PROTOBUF_FIELD_OFFSET(::muduo::net::ListRpcResponse, method_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muduo::net::GetServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muduo::net::GetServiceRequest, service_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::muduo::net::GetServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::muduo::net::GetServiceResponse, error_),
  PROTOBUF_FIELD_OFFSET(::muduo::net::GetServiceResponse, proto_file_),
  PROTOBUF_FIELD_OFFSET(::muduo::net::GetServiceResponse, proto_file_name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::muduo::net::ListRpcRequest)},
  { 10, -1, -1, sizeof(::muduo::net::ListRpcResponse)},
  { 19, -1, -1, sizeof(::muduo::net::GetServiceRequest)},
  { 26, -1, -1, sizeof(::muduo::net::GetServiceResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muduo::net::_ListRpcRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muduo::net::_ListRpcResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muduo::net::_GetServiceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::muduo::net::_GetServiceResponse_default_instance_),
};

const char descriptor_table_protodef_rpcservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020rpcservice.proto\022\tmuduo.net\032\trpc.proto"
  "\"f\n\016ListRpcRequest\022\031\n\014service_name\030\001 \001(\t"
  "H\000\210\001\001\022\030\n\013list_method\030\002 \001(\010H\001\210\001\001B\017\n\r_serv"
  "ice_nameB\016\n\014_list_method\"a\n\017ListRpcRespo"
  "nse\022#\n\005error\030\001 \001(\0162\024.muduo.net.ErrorCode"
  "\022\024\n\014service_name\030\002 \003(\t\022\023\n\013method_name\030\003 "
  "\003(\t\")\n\021GetServiceRequest\022\024\n\014service_name"
  "\030\001 \001(\t\"f\n\022GetServiceResponse\022#\n\005error\030\001 "
  "\001(\0162\024.muduo.net.ErrorCode\022\022\n\nproto_file\030"
  "\002 \001(\t\022\027\n\017proto_file_name\030\003 \001(\t2\231\001\n\nRpcSe"
  "rvice\022@\n\007listRpc\022\031.muduo.net.ListRpcRequ"
  "est\032\032.muduo.net.ListRpcResponse\022I\n\ngetSe"
  "rvice\022\034.muduo.net.GetServiceRequest\032\035.mu"
  "duo.net.GetServiceResponseB7\n\033com.chensh"
  "uo.muduo.protorpcB\017RpcServiceProto\200\001\001\210\001\001"
  "\220\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rpcservice_2eproto_deps[1] = {
  &::descriptor_table_rpc_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rpcservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpcservice_2eproto = {
  false, false, 611, descriptor_table_protodef_rpcservice_2eproto, "rpcservice.proto", 
  &descriptor_table_rpcservice_2eproto_once, descriptor_table_rpcservice_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_rpcservice_2eproto::offsets,
  file_level_metadata_rpcservice_2eproto, file_level_enum_descriptors_rpcservice_2eproto, file_level_service_descriptors_rpcservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_rpcservice_2eproto_getter() {
  return &descriptor_table_rpcservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_rpcservice_2eproto(&descriptor_table_rpcservice_2eproto);
namespace muduo {
namespace net {

// ===================================================================

class ListRpcRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ListRpcRequest>()._has_bits_);
  static void set_has_service_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_list_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ListRpcRequest::ListRpcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:muduo.net.ListRpcRequest)
}
ListRpcRequest::ListRpcRequest(const ListRpcRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_service_name()) {
    service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service_name(), 
      GetArenaForAllocation());
  }
  list_method_ = from.list_method_;
  // @@protoc_insertion_point(copy_constructor:muduo.net.ListRpcRequest)
}

inline void ListRpcRequest::SharedCtor() {
service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
list_method_ = false;
}

ListRpcRequest::~ListRpcRequest() {
  // @@protoc_insertion_point(destructor:muduo.net.ListRpcRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListRpcRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListRpcRequest::ArenaDtor(void* object) {
  ListRpcRequest* _this = reinterpret_cast< ListRpcRequest* >(object);
  (void)_this;
}
void ListRpcRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListRpcRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListRpcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:muduo.net.ListRpcRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    service_name_.ClearNonDefaultToEmpty();
  }
  list_method_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRpcRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "muduo.net.ListRpcRequest.service_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool list_method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_list_method(&has_bits);
          list_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListRpcRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muduo.net.ListRpcRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string service_name = 1;
  if (_internal_has_service_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muduo.net.ListRpcRequest.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // optional bool list_method = 2;
  if (_internal_has_list_method()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_list_method(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muduo.net.ListRpcRequest)
  return target;
}

size_t ListRpcRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muduo.net.ListRpcRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string service_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_service_name());
    }

    // optional bool list_method = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListRpcRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListRpcRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListRpcRequest::GetClassData() const { return &_class_data_; }

void ListRpcRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListRpcRequest *>(to)->MergeFrom(
      static_cast<const ListRpcRequest &>(from));
}


void ListRpcRequest::MergeFrom(const ListRpcRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muduo.net.ListRpcRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_service_name(from._internal_service_name());
    }
    if (cached_has_bits & 0x00000002u) {
      list_method_ = from.list_method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListRpcRequest::CopyFrom(const ListRpcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muduo.net.ListRpcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRpcRequest::IsInitialized() const {
  return true;
}

void ListRpcRequest::InternalSwap(ListRpcRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &service_name_, lhs_arena,
      &other->service_name_, rhs_arena
  );
  swap(list_method_, other->list_method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRpcRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpcservice_2eproto_getter, &descriptor_table_rpcservice_2eproto_once,
      file_level_metadata_rpcservice_2eproto[0]);
}

// ===================================================================

class ListRpcResponse::_Internal {
 public:
};

ListRpcResponse::ListRpcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  service_name_(arena),
  method_name_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:muduo.net.ListRpcResponse)
}
ListRpcResponse::ListRpcResponse(const ListRpcResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      service_name_(from.service_name_),
      method_name_(from.method_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:muduo.net.ListRpcResponse)
}

inline void ListRpcResponse::SharedCtor() {
error_ = 0;
}

ListRpcResponse::~ListRpcResponse() {
  // @@protoc_insertion_point(destructor:muduo.net.ListRpcResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListRpcResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListRpcResponse::ArenaDtor(void* object) {
  ListRpcResponse* _this = reinterpret_cast< ListRpcResponse* >(object);
  (void)_this;
}
void ListRpcResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListRpcResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListRpcResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:muduo.net.ListRpcResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.Clear();
  method_name_.Clear();
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRpcResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muduo.net.ErrorCode error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::muduo::net::ErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string service_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_service_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "muduo.net.ListRpcResponse.service_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string method_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_method_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "muduo.net.ListRpcResponse.method_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListRpcResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muduo.net.ListRpcResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muduo.net.ErrorCode error = 1;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // repeated string service_name = 2;
  for (int i = 0, n = this->_internal_service_name_size(); i < n; i++) {
    const auto& s = this->_internal_service_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muduo.net.ListRpcResponse.service_name");
    target = stream->WriteString(2, s, target);
  }

  // repeated string method_name = 3;
  for (int i = 0, n = this->_internal_method_name_size(); i < n; i++) {
    const auto& s = this->_internal_method_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muduo.net.ListRpcResponse.method_name");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muduo.net.ListRpcResponse)
  return target;
}

size_t ListRpcResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muduo.net.ListRpcResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string service_name = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(service_name_.size());
  for (int i = 0, n = service_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      service_name_.Get(i));
  }

  // repeated string method_name = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(method_name_.size());
  for (int i = 0, n = method_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      method_name_.Get(i));
  }

  // .muduo.net.ErrorCode error = 1;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListRpcResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListRpcResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListRpcResponse::GetClassData() const { return &_class_data_; }

void ListRpcResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListRpcResponse *>(to)->MergeFrom(
      static_cast<const ListRpcResponse &>(from));
}


void ListRpcResponse::MergeFrom(const ListRpcResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muduo.net.ListRpcResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  service_name_.MergeFrom(from.service_name_);
  method_name_.MergeFrom(from.method_name_);
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListRpcResponse::CopyFrom(const ListRpcResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muduo.net.ListRpcResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRpcResponse::IsInitialized() const {
  return true;
}

void ListRpcResponse::InternalSwap(ListRpcResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  service_name_.InternalSwap(&other->service_name_);
  method_name_.InternalSwap(&other->method_name_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRpcResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpcservice_2eproto_getter, &descriptor_table_rpcservice_2eproto_once,
      file_level_metadata_rpcservice_2eproto[1]);
}

// ===================================================================

class GetServiceRequest::_Internal {
 public:
};

GetServiceRequest::GetServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:muduo.net.GetServiceRequest)
}
GetServiceRequest::GetServiceRequest(const GetServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_name().empty()) {
    service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:muduo.net.GetServiceRequest)
}

inline void GetServiceRequest::SharedCtor() {
service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetServiceRequest::~GetServiceRequest() {
  // @@protoc_insertion_point(destructor:muduo.net.GetServiceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetServiceRequest::ArenaDtor(void* object) {
  GetServiceRequest* _this = reinterpret_cast< GetServiceRequest* >(object);
  (void)_this;
}
void GetServiceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:muduo.net.GetServiceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "muduo.net.GetServiceRequest.service_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetServiceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muduo.net.GetServiceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muduo.net.GetServiceRequest.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muduo.net.GetServiceRequest)
  return target;
}

size_t GetServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muduo.net.GetServiceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (!this->_internal_service_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetServiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServiceRequest::GetClassData() const { return &_class_data_; }

void GetServiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetServiceRequest *>(to)->MergeFrom(
      static_cast<const GetServiceRequest &>(from));
}


void GetServiceRequest::MergeFrom(const GetServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muduo.net.GetServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service_name().empty()) {
    _internal_set_service_name(from._internal_service_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServiceRequest::CopyFrom(const GetServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muduo.net.GetServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceRequest::IsInitialized() const {
  return true;
}

void GetServiceRequest::InternalSwap(GetServiceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &service_name_, lhs_arena,
      &other->service_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpcservice_2eproto_getter, &descriptor_table_rpcservice_2eproto_once,
      file_level_metadata_rpcservice_2eproto[2]);
}

// ===================================================================

class GetServiceResponse::_Internal {
 public:
};

GetServiceResponse::GetServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:muduo.net.GetServiceResponse)
}
GetServiceResponse::GetServiceResponse(const GetServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  proto_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    proto_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proto_file().empty()) {
    proto_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proto_file(), 
      GetArenaForAllocation());
  }
  proto_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    proto_file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proto_file_name().empty()) {
    proto_file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proto_file_name(), 
      GetArenaForAllocation());
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:muduo.net.GetServiceResponse)
}

inline void GetServiceResponse::SharedCtor() {
proto_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  proto_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
proto_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  proto_file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_ = 0;
}

GetServiceResponse::~GetServiceResponse() {
  // @@protoc_insertion_point(destructor:muduo.net.GetServiceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  proto_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proto_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetServiceResponse::ArenaDtor(void* object) {
  GetServiceResponse* _this = reinterpret_cast< GetServiceResponse* >(object);
  (void)_this;
}
void GetServiceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetServiceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:muduo.net.GetServiceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proto_file_.ClearToEmpty();
  proto_file_name_.ClearToEmpty();
  error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .muduo.net.ErrorCode error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::muduo::net::ErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string proto_file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proto_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "muduo.net.GetServiceResponse.proto_file"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string proto_file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_proto_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "muduo.net.GetServiceResponse.proto_file_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetServiceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:muduo.net.GetServiceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .muduo.net.ErrorCode error = 1;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // string proto_file = 2;
  if (!this->_internal_proto_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proto_file().data(), static_cast<int>(this->_internal_proto_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muduo.net.GetServiceResponse.proto_file");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_proto_file(), target);
  }

  // string proto_file_name = 3;
  if (!this->_internal_proto_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proto_file_name().data(), static_cast<int>(this->_internal_proto_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "muduo.net.GetServiceResponse.proto_file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_proto_file_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:muduo.net.GetServiceResponse)
  return target;
}

size_t GetServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:muduo.net.GetServiceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string proto_file = 2;
  if (!this->_internal_proto_file().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proto_file());
  }

  // string proto_file_name = 3;
  if (!this->_internal_proto_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proto_file_name());
  }

  // .muduo.net.ErrorCode error = 1;
  if (this->_internal_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServiceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetServiceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServiceResponse::GetClassData() const { return &_class_data_; }

void GetServiceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetServiceResponse *>(to)->MergeFrom(
      static_cast<const GetServiceResponse &>(from));
}


void GetServiceResponse::MergeFrom(const GetServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:muduo.net.GetServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_proto_file().empty()) {
    _internal_set_proto_file(from._internal_proto_file());
  }
  if (!from._internal_proto_file_name().empty()) {
    _internal_set_proto_file_name(from._internal_proto_file_name());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServiceResponse::CopyFrom(const GetServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:muduo.net.GetServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceResponse::IsInitialized() const {
  return true;
}

void GetServiceResponse::InternalSwap(GetServiceResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proto_file_, lhs_arena,
      &other->proto_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proto_file_name_, lhs_arena,
      &other->proto_file_name_, rhs_arena
  );
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rpcservice_2eproto_getter, &descriptor_table_rpcservice_2eproto_once,
      file_level_metadata_rpcservice_2eproto[3]);
}

// ===================================================================

RpcService::~RpcService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RpcService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpcservice_2eproto);
  return file_level_service_descriptors_rpcservice_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* RpcService::GetDescriptor() {
  return descriptor();
}

void RpcService::listRpc(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::muduo::net::ListRpcRequest*,
                         ::muduo::net::ListRpcResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method listRpc() not implemented.");
  done->Run();
}

void RpcService::getService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::muduo::net::GetServiceRequest*,
                         ::muduo::net::GetServiceResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getService() not implemented.");
  done->Run();
}

void RpcService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_rpcservice_2eproto[0]);
  switch(method->index()) {
    case 0:
      listRpc(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::muduo::net::ListRpcRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::muduo::net::ListRpcResponse*>(
                 response),
             done);
      break;
    case 1:
      getService(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::muduo::net::GetServiceRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::muduo::net::GetServiceResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RpcService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::muduo::net::ListRpcRequest::default_instance();
    case 1:
      return ::muduo::net::GetServiceRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& RpcService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::muduo::net::ListRpcResponse::default_instance();
    case 1:
      return ::muduo::net::GetServiceResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RpcService_Stub::RpcService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RpcService_Stub::RpcService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
RpcService_Stub::~RpcService_Stub() {
  if (owns_channel_) delete channel_;
}

void RpcService_Stub::listRpc(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::muduo::net::ListRpcRequest* request,
                              ::muduo::net::ListRpcResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void RpcService_Stub::getService(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::muduo::net::GetServiceRequest* request,
                              ::muduo::net::GetServiceResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace net
}  // namespace muduo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::muduo::net::ListRpcRequest* Arena::CreateMaybeMessage< ::muduo::net::ListRpcRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muduo::net::ListRpcRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::muduo::net::ListRpcResponse* Arena::CreateMaybeMessage< ::muduo::net::ListRpcResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muduo::net::ListRpcResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::muduo::net::GetServiceRequest* Arena::CreateMaybeMessage< ::muduo::net::GetServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muduo::net::GetServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::muduo::net::GetServiceResponse* Arena::CreateMaybeMessage< ::muduo::net::GetServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::muduo::net::GetServiceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
