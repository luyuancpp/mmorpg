syntax = "proto3";
import "google/protobuf/empty.proto";
import "common.proto";
import "component_proto/scene_comp.proto";
package regionservcie;
option cc_generic_services = true;

message StartCrossGsRequest
{
  IpPort rpc_client = 1;
  IpPort rpc_server = 2;
  uint32 gs_node_id = 3;
  uint32 server_type = 4;
}

message StartCrossGsResponse
{
  repeated SceneInfo scenes_info = 1;
}

message StartMsRequest
{
  IpPort rpc_client = 1;
  IpPort rpc_server = 2;
  uint32 ms_node_id = 3;
}

message EnterCrossMainSceneRequest
{
  uint64 scene_id = 1;
  uint64 player_id = 2;
}

message EnterCrossMainSceneResponese
{
  Tips error = 1;
}

message EnterCrossRoomSceneSceneResponse
{
  Tips error = 1;
}

message EnterCrossMainSceneWeightRoundRobinRequest
{
  uint32 scene_confid = 1;
  uint64 player_id = 2;
}

message EnterCrossRoomSceneSceneWeightRoundRobinResponse
{
  Tips error = 1;
}

service RgService 
{
  rpc StartCrossGs (StartCrossGsRequest) returns (StartCrossGsResponse);
  rpc StartMs (StartMsRequest) returns (google.protobuf.Empty);
  rpc EnterCrossMainScene (EnterCrossMainSceneRequest) returns (EnterCrossMainSceneResponese);
  rpc EnterCrossMainSceneWeightRoundRobin (EnterCrossMainSceneWeightRoundRobinRequest) returns (EnterCrossRoomSceneSceneWeightRoundRobinResponse);
}


