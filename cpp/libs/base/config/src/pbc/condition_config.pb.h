// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: condition_config.proto
// Protobuf C++ Version: 5.29.0

#ifndef condition_5fconfig_2eproto_2epb_2eh
#define condition_5fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_condition_5fconfig_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_condition_5fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_condition_5fconfig_2eproto;
class ConditionTable;
struct ConditionTableDefaultTypeInternal;
extern ConditionTableDefaultTypeInternal _ConditionTable_default_instance_;
class ConditionTabledData;
struct ConditionTabledDataDefaultTypeInternal;
extern ConditionTabledDataDefaultTypeInternal _ConditionTabledData_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class ConditionTable final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ConditionTable) */ {
 public:
  inline ConditionTable() : ConditionTable(nullptr) {}
  ~ConditionTable() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConditionTable* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConditionTable));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConditionTable(
      ::google::protobuf::internal::ConstantInitialized);

  inline ConditionTable(const ConditionTable& from) : ConditionTable(nullptr, from) {}
  inline ConditionTable(ConditionTable&& from) noexcept
      : ConditionTable(nullptr, std::move(from)) {}
  inline ConditionTable& operator=(const ConditionTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConditionTable& operator=(ConditionTable&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConditionTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConditionTable* internal_default_instance() {
    return reinterpret_cast<const ConditionTable*>(
        &_ConditionTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ConditionTable& a, ConditionTable& b) { a.Swap(&b); }
  inline void Swap(ConditionTable* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConditionTable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConditionTable* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConditionTable>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConditionTable& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConditionTable& from) { ConditionTable::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConditionTable* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ConditionTable"; }

 protected:
  explicit ConditionTable(::google::protobuf::Arena* arena);
  ConditionTable(::google::protobuf::Arena* arena, const ConditionTable& from);
  ConditionTable(::google::protobuf::Arena* arena, ConditionTable&& from) noexcept
      : ConditionTable(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCondition1FieldNumber = 3,
    kCondition2FieldNumber = 4,
    kCondition3FieldNumber = 5,
    kCondition4FieldNumber = 6,
    kIdFieldNumber = 1,
    kConditionTypeFieldNumber = 2,
    kAmountTypeFieldNumber = 7,
    kAmountFieldNumber = 8,
    kComparisonFieldNumber = 9,
  };
  // repeated uint32 condition1 = 3;
  int condition1_size() const;
  private:
  int _internal_condition1_size() const;

  public:
  void clear_condition1() ;
  ::uint32_t condition1(int index) const;
  void set_condition1(int index, ::uint32_t value);
  void add_condition1(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& condition1() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_condition1();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_condition1() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_condition1();

  public:
  // repeated uint32 condition2 = 4;
  int condition2_size() const;
  private:
  int _internal_condition2_size() const;

  public:
  void clear_condition2() ;
  ::uint32_t condition2(int index) const;
  void set_condition2(int index, ::uint32_t value);
  void add_condition2(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& condition2() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_condition2();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_condition2() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_condition2();

  public:
  // repeated uint32 condition3 = 5;
  int condition3_size() const;
  private:
  int _internal_condition3_size() const;

  public:
  void clear_condition3() ;
  ::uint32_t condition3(int index) const;
  void set_condition3(int index, ::uint32_t value);
  void add_condition3(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& condition3() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_condition3();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_condition3() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_condition3();

  public:
  // repeated uint32 condition4 = 6;
  int condition4_size() const;
  private:
  int _internal_condition4_size() const;

  public:
  void clear_condition4() ;
  ::uint32_t condition4(int index) const;
  void set_condition4(int index, ::uint32_t value);
  void add_condition4(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& condition4() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_condition4();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_condition4() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_condition4();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // uint32 condition_type = 2;
  void clear_condition_type() ;
  ::uint32_t condition_type() const;
  void set_condition_type(::uint32_t value);

  private:
  ::uint32_t _internal_condition_type() const;
  void _internal_set_condition_type(::uint32_t value);

  public:
  // uint32 amount_type = 7;
  void clear_amount_type() ;
  ::uint32_t amount_type() const;
  void set_amount_type(::uint32_t value);

  private:
  ::uint32_t _internal_amount_type() const;
  void _internal_set_amount_type(::uint32_t value);

  public:
  // uint32 amount = 8;
  void clear_amount() ;
  ::uint32_t amount() const;
  void set_amount(::uint32_t value);

  private:
  ::uint32_t _internal_amount() const;
  void _internal_set_amount(::uint32_t value);

  public:
  // uint32 comparison = 9;
  void clear_comparison() ;
  ::uint32_t comparison() const;
  void set_comparison(::uint32_t value);

  private:
  ::uint32_t _internal_comparison() const;
  void _internal_set_comparison(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ConditionTable)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ConditionTable& from_msg);
    ::google::protobuf::RepeatedField<::uint32_t> condition1_;
    ::google::protobuf::internal::CachedSize _condition1_cached_byte_size_;
    ::google::protobuf::RepeatedField<::uint32_t> condition2_;
    ::google::protobuf::internal::CachedSize _condition2_cached_byte_size_;
    ::google::protobuf::RepeatedField<::uint32_t> condition3_;
    ::google::protobuf::internal::CachedSize _condition3_cached_byte_size_;
    ::google::protobuf::RepeatedField<::uint32_t> condition4_;
    ::google::protobuf::internal::CachedSize _condition4_cached_byte_size_;
    ::uint32_t id_;
    ::uint32_t condition_type_;
    ::uint32_t amount_type_;
    ::uint32_t amount_;
    ::uint32_t comparison_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_condition_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ConditionTabledData final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ConditionTabledData) */ {
 public:
  inline ConditionTabledData() : ConditionTabledData(nullptr) {}
  ~ConditionTabledData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ConditionTabledData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ConditionTabledData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ConditionTabledData(
      ::google::protobuf::internal::ConstantInitialized);

  inline ConditionTabledData(const ConditionTabledData& from) : ConditionTabledData(nullptr, from) {}
  inline ConditionTabledData(ConditionTabledData&& from) noexcept
      : ConditionTabledData(nullptr, std::move(from)) {}
  inline ConditionTabledData& operator=(const ConditionTabledData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConditionTabledData& operator=(ConditionTabledData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConditionTabledData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConditionTabledData* internal_default_instance() {
    return reinterpret_cast<const ConditionTabledData*>(
        &_ConditionTabledData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ConditionTabledData& a, ConditionTabledData& b) { a.Swap(&b); }
  inline void Swap(ConditionTabledData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConditionTabledData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConditionTabledData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ConditionTabledData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConditionTabledData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ConditionTabledData& from) { ConditionTabledData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ConditionTabledData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ConditionTabledData"; }

 protected:
  explicit ConditionTabledData(::google::protobuf::Arena* arena);
  ConditionTabledData(::google::protobuf::Arena* arena, const ConditionTabledData& from);
  ConditionTabledData(::google::protobuf::Arena* arena, ConditionTabledData&& from) noexcept
      : ConditionTabledData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .ConditionTable data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  ::ConditionTable* mutable_data(int index);
  ::google::protobuf::RepeatedPtrField<::ConditionTable>* mutable_data();

  private:
  const ::google::protobuf::RepeatedPtrField<::ConditionTable>& _internal_data() const;
  ::google::protobuf::RepeatedPtrField<::ConditionTable>* _internal_mutable_data();
  public:
  const ::ConditionTable& data(int index) const;
  ::ConditionTable* add_data();
  const ::google::protobuf::RepeatedPtrField<::ConditionTable>& data() const;
  // @@protoc_insertion_point(class_scope:ConditionTabledData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ConditionTabledData& from_msg);
    ::google::protobuf::RepeatedPtrField< ::ConditionTable > data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_condition_5fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ConditionTable

// uint32 id = 1;
inline void ConditionTable::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0u;
}
inline ::uint32_t ConditionTable::id() const {
  // @@protoc_insertion_point(field_get:ConditionTable.id)
  return _internal_id();
}
inline void ConditionTable::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ConditionTable.id)
}
inline ::uint32_t ConditionTable::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void ConditionTable::_internal_set_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// uint32 condition_type = 2;
inline void ConditionTable::clear_condition_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.condition_type_ = 0u;
}
inline ::uint32_t ConditionTable::condition_type() const {
  // @@protoc_insertion_point(field_get:ConditionTable.condition_type)
  return _internal_condition_type();
}
inline void ConditionTable::set_condition_type(::uint32_t value) {
  _internal_set_condition_type(value);
  // @@protoc_insertion_point(field_set:ConditionTable.condition_type)
}
inline ::uint32_t ConditionTable::_internal_condition_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.condition_type_;
}
inline void ConditionTable::_internal_set_condition_type(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.condition_type_ = value;
}

// repeated uint32 condition1 = 3;
inline int ConditionTable::_internal_condition1_size() const {
  return _internal_condition1().size();
}
inline int ConditionTable::condition1_size() const {
  return _internal_condition1_size();
}
inline void ConditionTable::clear_condition1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.condition1_.Clear();
}
inline ::uint32_t ConditionTable::condition1(int index) const {
  // @@protoc_insertion_point(field_get:ConditionTable.condition1)
  return _internal_condition1().Get(index);
}
inline void ConditionTable::set_condition1(int index, ::uint32_t value) {
  _internal_mutable_condition1()->Set(index, value);
  // @@protoc_insertion_point(field_set:ConditionTable.condition1)
}
inline void ConditionTable::add_condition1(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_condition1()->Add(value);
  // @@protoc_insertion_point(field_add:ConditionTable.condition1)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& ConditionTable::condition1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ConditionTable.condition1)
  return _internal_condition1();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* ConditionTable::mutable_condition1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ConditionTable.condition1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_condition1();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
ConditionTable::_internal_condition1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.condition1_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* ConditionTable::_internal_mutable_condition1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.condition1_;
}

// repeated uint32 condition2 = 4;
inline int ConditionTable::_internal_condition2_size() const {
  return _internal_condition2().size();
}
inline int ConditionTable::condition2_size() const {
  return _internal_condition2_size();
}
inline void ConditionTable::clear_condition2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.condition2_.Clear();
}
inline ::uint32_t ConditionTable::condition2(int index) const {
  // @@protoc_insertion_point(field_get:ConditionTable.condition2)
  return _internal_condition2().Get(index);
}
inline void ConditionTable::set_condition2(int index, ::uint32_t value) {
  _internal_mutable_condition2()->Set(index, value);
  // @@protoc_insertion_point(field_set:ConditionTable.condition2)
}
inline void ConditionTable::add_condition2(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_condition2()->Add(value);
  // @@protoc_insertion_point(field_add:ConditionTable.condition2)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& ConditionTable::condition2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ConditionTable.condition2)
  return _internal_condition2();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* ConditionTable::mutable_condition2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ConditionTable.condition2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_condition2();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
ConditionTable::_internal_condition2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.condition2_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* ConditionTable::_internal_mutable_condition2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.condition2_;
}

// repeated uint32 condition3 = 5;
inline int ConditionTable::_internal_condition3_size() const {
  return _internal_condition3().size();
}
inline int ConditionTable::condition3_size() const {
  return _internal_condition3_size();
}
inline void ConditionTable::clear_condition3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.condition3_.Clear();
}
inline ::uint32_t ConditionTable::condition3(int index) const {
  // @@protoc_insertion_point(field_get:ConditionTable.condition3)
  return _internal_condition3().Get(index);
}
inline void ConditionTable::set_condition3(int index, ::uint32_t value) {
  _internal_mutable_condition3()->Set(index, value);
  // @@protoc_insertion_point(field_set:ConditionTable.condition3)
}
inline void ConditionTable::add_condition3(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_condition3()->Add(value);
  // @@protoc_insertion_point(field_add:ConditionTable.condition3)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& ConditionTable::condition3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ConditionTable.condition3)
  return _internal_condition3();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* ConditionTable::mutable_condition3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ConditionTable.condition3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_condition3();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
ConditionTable::_internal_condition3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.condition3_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* ConditionTable::_internal_mutable_condition3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.condition3_;
}

// repeated uint32 condition4 = 6;
inline int ConditionTable::_internal_condition4_size() const {
  return _internal_condition4().size();
}
inline int ConditionTable::condition4_size() const {
  return _internal_condition4_size();
}
inline void ConditionTable::clear_condition4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.condition4_.Clear();
}
inline ::uint32_t ConditionTable::condition4(int index) const {
  // @@protoc_insertion_point(field_get:ConditionTable.condition4)
  return _internal_condition4().Get(index);
}
inline void ConditionTable::set_condition4(int index, ::uint32_t value) {
  _internal_mutable_condition4()->Set(index, value);
  // @@protoc_insertion_point(field_set:ConditionTable.condition4)
}
inline void ConditionTable::add_condition4(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_condition4()->Add(value);
  // @@protoc_insertion_point(field_add:ConditionTable.condition4)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& ConditionTable::condition4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ConditionTable.condition4)
  return _internal_condition4();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* ConditionTable::mutable_condition4()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ConditionTable.condition4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_condition4();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
ConditionTable::_internal_condition4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.condition4_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* ConditionTable::_internal_mutable_condition4() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.condition4_;
}

// uint32 amount_type = 7;
inline void ConditionTable::clear_amount_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_type_ = 0u;
}
inline ::uint32_t ConditionTable::amount_type() const {
  // @@protoc_insertion_point(field_get:ConditionTable.amount_type)
  return _internal_amount_type();
}
inline void ConditionTable::set_amount_type(::uint32_t value) {
  _internal_set_amount_type(value);
  // @@protoc_insertion_point(field_set:ConditionTable.amount_type)
}
inline ::uint32_t ConditionTable::_internal_amount_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_type_;
}
inline void ConditionTable::_internal_set_amount_type(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_type_ = value;
}

// uint32 amount = 8;
inline void ConditionTable::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = 0u;
}
inline ::uint32_t ConditionTable::amount() const {
  // @@protoc_insertion_point(field_get:ConditionTable.amount)
  return _internal_amount();
}
inline void ConditionTable::set_amount(::uint32_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:ConditionTable.amount)
}
inline ::uint32_t ConditionTable::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline void ConditionTable::_internal_set_amount(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = value;
}

// uint32 comparison = 9;
inline void ConditionTable::clear_comparison() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.comparison_ = 0u;
}
inline ::uint32_t ConditionTable::comparison() const {
  // @@protoc_insertion_point(field_get:ConditionTable.comparison)
  return _internal_comparison();
}
inline void ConditionTable::set_comparison(::uint32_t value) {
  _internal_set_comparison(value);
  // @@protoc_insertion_point(field_set:ConditionTable.comparison)
}
inline ::uint32_t ConditionTable::_internal_comparison() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.comparison_;
}
inline void ConditionTable::_internal_set_comparison(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.comparison_ = value;
}

// -------------------------------------------------------------------

// ConditionTabledData

// repeated .ConditionTable data = 1;
inline int ConditionTabledData::_internal_data_size() const {
  return _internal_data().size();
}
inline int ConditionTabledData::data_size() const {
  return _internal_data_size();
}
inline void ConditionTabledData::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline ::ConditionTable* ConditionTabledData::mutable_data(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ConditionTabledData.data)
  return _internal_mutable_data()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ConditionTable>* ConditionTabledData::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ConditionTabledData.data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data();
}
inline const ::ConditionTable& ConditionTabledData::data(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ConditionTabledData.data)
  return _internal_data().Get(index);
}
inline ::ConditionTable* ConditionTabledData::add_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ConditionTable* _add = _internal_mutable_data()->Add();
  // @@protoc_insertion_point(field_add:ConditionTabledData.data)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ConditionTable>& ConditionTabledData::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ConditionTabledData.data)
  return _internal_data();
}
inline const ::google::protobuf::RepeatedPtrField<::ConditionTable>&
ConditionTabledData::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedPtrField<::ConditionTable>*
ConditionTabledData::_internal_mutable_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // condition_5fconfig_2eproto_2epb_2eh
