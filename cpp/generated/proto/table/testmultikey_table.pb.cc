// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: testmultikey_table.proto
// Protobuf C++ Version: 5.29.0

#include "testmultikey_table.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr TestMultiKeytestobj1::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : testobj1_key_{0u},
        testobj1_value_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestMultiKeytestobj1::TestMultiKeytestobj1(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestMultiKeytestobj1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMultiKeytestobj1DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMultiKeytestobj1DefaultTypeInternal() {}
  union {
    TestMultiKeytestobj1 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMultiKeytestobj1DefaultTypeInternal _TestMultiKeytestobj1_default_instance_;

inline constexpr TestMultiKeytag1::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : tag1_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        tag1_value_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestMultiKeytag1::TestMultiKeytag1(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestMultiKeytag1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMultiKeytag1DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMultiKeytag1DefaultTypeInternal() {}
  union {
    TestMultiKeytag1 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMultiKeytag1DefaultTypeInternal _TestMultiKeytag1_default_instance_;

inline constexpr TestMultiKeyimmunetag1::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : immunetag1_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        immunetag1_value_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestMultiKeyimmunetag1::TestMultiKeyimmunetag1(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestMultiKeyimmunetag1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMultiKeyimmunetag1DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMultiKeyimmunetag1DefaultTypeInternal() {}
  union {
    TestMultiKeyimmunetag1 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMultiKeyimmunetag1DefaultTypeInternal _TestMultiKeyimmunetag1_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR TestMultiKeyTable_Tag1Entry_DoNotUse::TestMultiKeyTable_Tag1Entry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : TestMultiKeyTable_Tag1Entry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : TestMultiKeyTable_Tag1Entry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct TestMultiKeyTable_Tag1Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMultiKeyTable_Tag1Entry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMultiKeyTable_Tag1Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMultiKeyTable_Tag1Entry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMultiKeyTable_Tag1Entry_DoNotUseDefaultTypeInternal _TestMultiKeyTable_Tag1Entry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR TestMultiKeyTable_Immunetag1Entry_DoNotUse::TestMultiKeyTable_Immunetag1Entry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : TestMultiKeyTable_Immunetag1Entry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : TestMultiKeyTable_Immunetag1Entry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct TestMultiKeyTable_Immunetag1Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMultiKeyTable_Immunetag1Entry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMultiKeyTable_Immunetag1Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestMultiKeyTable_Immunetag1Entry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMultiKeyTable_Immunetag1Entry_DoNotUseDefaultTypeInternal _TestMultiKeyTable_Immunetag1Entry_DoNotUse_default_instance_;

inline constexpr TestMultiKeyTable::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : tag1_{},
        immunetag1_{},
        testobj1_{},
        effect_{},
        _effect_cached_byte_size_{0},
        stringkey_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mstringkey_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{0u},
        level_{0u},
        uint32key_{0u},
        in32key_{0},
        muint32key_{0u},
        min32key_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestMultiKeyTable::TestMultiKeyTable(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestMultiKeyTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMultiKeyTableDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMultiKeyTableDefaultTypeInternal() {}
  union {
    TestMultiKeyTable _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMultiKeyTableDefaultTypeInternal _TestMultiKeyTable_default_instance_;

inline constexpr TestMultiKeyTabledData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestMultiKeyTabledData::TestMultiKeyTabledData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestMultiKeyTabledDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMultiKeyTabledDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMultiKeyTabledDataDefaultTypeInternal() {}
  union {
    TestMultiKeyTabledData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMultiKeyTabledDataDefaultTypeInternal _TestMultiKeyTabledData_default_instance_;
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_testmultikey_5ftable_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_testmultikey_5ftable_2eproto = nullptr;
const ::uint32_t
    TableStruct_testmultikey_5ftable_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::TestMultiKeytag1, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::TestMultiKeytag1, _impl_.tag1_key_),
        PROTOBUF_FIELD_OFFSET(::TestMultiKeytag1, _impl_.tag1_value_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyimmunetag1, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyimmunetag1, _impl_.immunetag1_key_),
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyimmunetag1, _impl_.immunetag1_value_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::TestMultiKeytestobj1, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::TestMultiKeytestobj1, _impl_.testobj1_key_),
        PROTOBUF_FIELD_OFFSET(::TestMultiKeytestobj1, _impl_.testobj1_value_),
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTable_Tag1Entry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTable_Tag1Entry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTable_Tag1Entry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTable_Tag1Entry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTable_Immunetag1Entry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTable_Immunetag1Entry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTable_Immunetag1Entry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTable_Immunetag1Entry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTable, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTable, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTable, _impl_.tag1_),
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTable, _impl_.immunetag1_),
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTable, _impl_.level_),
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTable, _impl_.testobj1_),
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTable, _impl_.effect_),
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTable, _impl_.stringkey_),
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTable, _impl_.uint32key_),
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTable, _impl_.in32key_),
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTable, _impl_.mstringkey_),
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTable, _impl_.muint32key_),
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTable, _impl_.min32key_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTabledData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::TestMultiKeyTabledData, _impl_.data_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::TestMultiKeytag1)},
        {10, -1, -1, sizeof(::TestMultiKeyimmunetag1)},
        {20, -1, -1, sizeof(::TestMultiKeytestobj1)},
        {30, 40, -1, sizeof(::TestMultiKeyTable_Tag1Entry_DoNotUse)},
        {42, 52, -1, sizeof(::TestMultiKeyTable_Immunetag1Entry_DoNotUse)},
        {54, -1, -1, sizeof(::TestMultiKeyTable)},
        {74, -1, -1, sizeof(::TestMultiKeyTabledData)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_TestMultiKeytag1_default_instance_._instance,
    &::_TestMultiKeyimmunetag1_default_instance_._instance,
    &::_TestMultiKeytestobj1_default_instance_._instance,
    &::_TestMultiKeyTable_Tag1Entry_DoNotUse_default_instance_._instance,
    &::_TestMultiKeyTable_Immunetag1Entry_DoNotUse_default_instance_._instance,
    &::_TestMultiKeyTable_default_instance_._instance,
    &::_TestMultiKeyTabledData_default_instance_._instance,
};
const char descriptor_table_protodef_testmultikey_5ftable_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\030testmultikey_table.proto\"8\n\020TestMultiK"
    "eytag1\022\020\n\010tag1_key\030\001 \001(\t\022\022\n\ntag1_value\030\002"
    " \001(\t\"J\n\026TestMultiKeyimmunetag1\022\026\n\016immune"
    "tag1_key\030\001 \001(\t\022\030\n\020immunetag1_value\030\002 \001(\t"
    "\"D\n\024TestMultiKeytestobj1\022\024\n\014testobj1_key"
    "\030\001 \001(\r\022\026\n\016testobj1_value\030\002 \001(\r\"\234\003\n\021TestM"
    "ultiKeyTable\022\n\n\002id\030\001 \001(\r\022*\n\004tag1\030\002 \003(\0132\034"
    ".TestMultiKeyTable.Tag1Entry\0226\n\nimmuneta"
    "g1\030\003 \003(\0132\".TestMultiKeyTable.Immunetag1E"
    "ntry\022\r\n\005level\030\004 \001(\r\022\'\n\010testobj1\030\005 \003(\0132\025."
    "TestMultiKeytestobj1\022\016\n\006effect\030\006 \003(\r\022\021\n\t"
    "stringkey\030\007 \001(\t\022\021\n\tuint32key\030\010 \001(\r\022\017\n\007in"
    "32key\030\t \001(\005\022\022\n\nmstringkey\030\n \001(\t\022\022\n\nmuint"
    "32key\030\013 \001(\r\022\020\n\010min32key\030\014 \001(\005\032+\n\tTag1Ent"
    "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0321\n\017Im"
    "munetag1Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001("
    "\t:\0028\001\":\n\026TestMultiKeyTabledData\022 \n\004data\030"
    "\001 \003(\0132\022.TestMultiKeyTableB\tZ\007pb/gameb\006pr"
    "oto3"
};
static ::absl::once_flag descriptor_table_testmultikey_5ftable_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_testmultikey_5ftable_2eproto = {
    false,
    false,
    724,
    descriptor_table_protodef_testmultikey_5ftable_2eproto,
    "testmultikey_table.proto",
    &descriptor_table_testmultikey_5ftable_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_testmultikey_5ftable_2eproto::offsets,
    file_level_enum_descriptors_testmultikey_5ftable_2eproto,
    file_level_service_descriptors_testmultikey_5ftable_2eproto,
};
// ===================================================================

class TestMultiKeytag1::_Internal {
 public:
};

TestMultiKeytag1::TestMultiKeytag1(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TestMultiKeytag1)
}
inline PROTOBUF_NDEBUG_INLINE TestMultiKeytag1::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::TestMultiKeytag1& from_msg)
      : tag1_key_(arena, from.tag1_key_),
        tag1_value_(arena, from.tag1_value_),
        _cached_size_{0} {}

TestMultiKeytag1::TestMultiKeytag1(
    ::google::protobuf::Arena* arena,
    const TestMultiKeytag1& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestMultiKeytag1* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:TestMultiKeytag1)
}
inline PROTOBUF_NDEBUG_INLINE TestMultiKeytag1::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : tag1_key_(arena),
        tag1_value_(arena),
        _cached_size_{0} {}

inline void TestMultiKeytag1::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TestMultiKeytag1::~TestMultiKeytag1() {
  // @@protoc_insertion_point(destructor:TestMultiKeytag1)
  SharedDtor(*this);
}
inline void TestMultiKeytag1::SharedDtor(MessageLite& self) {
  TestMultiKeytag1& this_ = static_cast<TestMultiKeytag1&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.tag1_key_.Destroy();
  this_._impl_.tag1_value_.Destroy();
  this_._impl_.~Impl_();
}

inline void* TestMultiKeytag1::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TestMultiKeytag1(arena);
}
constexpr auto TestMultiKeytag1::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TestMultiKeytag1),
                                            alignof(TestMultiKeytag1));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TestMultiKeytag1::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TestMultiKeytag1_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TestMultiKeytag1::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TestMultiKeytag1>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TestMultiKeytag1::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TestMultiKeytag1>(), &TestMultiKeytag1::ByteSizeLong,
            &TestMultiKeytag1::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TestMultiKeytag1, _impl_._cached_size_),
        false,
    },
    &TestMultiKeytag1::kDescriptorMethods,
    &descriptor_table_testmultikey_5ftable_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TestMultiKeytag1::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 43, 2> TestMultiKeytag1::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::TestMultiKeytag1>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string tag1_value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiKeytag1, _impl_.tag1_value_)}},
    // string tag1_key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiKeytag1, _impl_.tag1_key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string tag1_key = 1;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeytag1, _impl_.tag1_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string tag1_value = 2;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeytag1, _impl_.tag1_value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\20\10\12\0\0\0\0\0"
    "TestMultiKeytag1"
    "tag1_key"
    "tag1_value"
  }},
};

PROTOBUF_NOINLINE void TestMultiKeytag1::Clear() {
// @@protoc_insertion_point(message_clear_start:TestMultiKeytag1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tag1_key_.ClearToEmpty();
  _impl_.tag1_value_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestMultiKeytag1::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestMultiKeytag1& this_ = static_cast<const TestMultiKeytag1&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestMultiKeytag1::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestMultiKeytag1& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:TestMultiKeytag1)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string tag1_key = 1;
          if (!this_._internal_tag1_key().empty()) {
            const std::string& _s = this_._internal_tag1_key();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "TestMultiKeytag1.tag1_key");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string tag1_value = 2;
          if (!this_._internal_tag1_value().empty()) {
            const std::string& _s = this_._internal_tag1_value();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "TestMultiKeytag1.tag1_value");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:TestMultiKeytag1)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestMultiKeytag1::ByteSizeLong(const MessageLite& base) {
          const TestMultiKeytag1& this_ = static_cast<const TestMultiKeytag1&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestMultiKeytag1::ByteSizeLong() const {
          const TestMultiKeytag1& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:TestMultiKeytag1)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string tag1_key = 1;
            if (!this_._internal_tag1_key().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_tag1_key());
            }
            // string tag1_value = 2;
            if (!this_._internal_tag1_value().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_tag1_value());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TestMultiKeytag1::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestMultiKeytag1*>(&to_msg);
  auto& from = static_cast<const TestMultiKeytag1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestMultiKeytag1)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tag1_key().empty()) {
    _this->_internal_set_tag1_key(from._internal_tag1_key());
  }
  if (!from._internal_tag1_value().empty()) {
    _this->_internal_set_tag1_value(from._internal_tag1_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestMultiKeytag1::CopyFrom(const TestMultiKeytag1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestMultiKeytag1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestMultiKeytag1::InternalSwap(TestMultiKeytag1* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag1_key_, &other->_impl_.tag1_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag1_value_, &other->_impl_.tag1_value_, arena);
}

::google::protobuf::Metadata TestMultiKeytag1::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestMultiKeyimmunetag1::_Internal {
 public:
};

TestMultiKeyimmunetag1::TestMultiKeyimmunetag1(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TestMultiKeyimmunetag1)
}
inline PROTOBUF_NDEBUG_INLINE TestMultiKeyimmunetag1::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::TestMultiKeyimmunetag1& from_msg)
      : immunetag1_key_(arena, from.immunetag1_key_),
        immunetag1_value_(arena, from.immunetag1_value_),
        _cached_size_{0} {}

TestMultiKeyimmunetag1::TestMultiKeyimmunetag1(
    ::google::protobuf::Arena* arena,
    const TestMultiKeyimmunetag1& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestMultiKeyimmunetag1* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:TestMultiKeyimmunetag1)
}
inline PROTOBUF_NDEBUG_INLINE TestMultiKeyimmunetag1::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : immunetag1_key_(arena),
        immunetag1_value_(arena),
        _cached_size_{0} {}

inline void TestMultiKeyimmunetag1::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TestMultiKeyimmunetag1::~TestMultiKeyimmunetag1() {
  // @@protoc_insertion_point(destructor:TestMultiKeyimmunetag1)
  SharedDtor(*this);
}
inline void TestMultiKeyimmunetag1::SharedDtor(MessageLite& self) {
  TestMultiKeyimmunetag1& this_ = static_cast<TestMultiKeyimmunetag1&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.immunetag1_key_.Destroy();
  this_._impl_.immunetag1_value_.Destroy();
  this_._impl_.~Impl_();
}

inline void* TestMultiKeyimmunetag1::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TestMultiKeyimmunetag1(arena);
}
constexpr auto TestMultiKeyimmunetag1::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TestMultiKeyimmunetag1),
                                            alignof(TestMultiKeyimmunetag1));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TestMultiKeyimmunetag1::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TestMultiKeyimmunetag1_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TestMultiKeyimmunetag1::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TestMultiKeyimmunetag1>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TestMultiKeyimmunetag1::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TestMultiKeyimmunetag1>(), &TestMultiKeyimmunetag1::ByteSizeLong,
            &TestMultiKeyimmunetag1::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TestMultiKeyimmunetag1, _impl_._cached_size_),
        false,
    },
    &TestMultiKeyimmunetag1::kDescriptorMethods,
    &descriptor_table_testmultikey_5ftable_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TestMultiKeyimmunetag1::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 61, 2> TestMultiKeyimmunetag1::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::TestMultiKeyimmunetag1>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string immunetag1_value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiKeyimmunetag1, _impl_.immunetag1_value_)}},
    // string immunetag1_key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiKeyimmunetag1, _impl_.immunetag1_key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string immunetag1_key = 1;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeyimmunetag1, _impl_.immunetag1_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string immunetag1_value = 2;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeyimmunetag1, _impl_.immunetag1_value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\26\16\20\0\0\0\0\0"
    "TestMultiKeyimmunetag1"
    "immunetag1_key"
    "immunetag1_value"
  }},
};

PROTOBUF_NOINLINE void TestMultiKeyimmunetag1::Clear() {
// @@protoc_insertion_point(message_clear_start:TestMultiKeyimmunetag1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.immunetag1_key_.ClearToEmpty();
  _impl_.immunetag1_value_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestMultiKeyimmunetag1::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestMultiKeyimmunetag1& this_ = static_cast<const TestMultiKeyimmunetag1&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestMultiKeyimmunetag1::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestMultiKeyimmunetag1& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:TestMultiKeyimmunetag1)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string immunetag1_key = 1;
          if (!this_._internal_immunetag1_key().empty()) {
            const std::string& _s = this_._internal_immunetag1_key();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "TestMultiKeyimmunetag1.immunetag1_key");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string immunetag1_value = 2;
          if (!this_._internal_immunetag1_value().empty()) {
            const std::string& _s = this_._internal_immunetag1_value();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "TestMultiKeyimmunetag1.immunetag1_value");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:TestMultiKeyimmunetag1)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestMultiKeyimmunetag1::ByteSizeLong(const MessageLite& base) {
          const TestMultiKeyimmunetag1& this_ = static_cast<const TestMultiKeyimmunetag1&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestMultiKeyimmunetag1::ByteSizeLong() const {
          const TestMultiKeyimmunetag1& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:TestMultiKeyimmunetag1)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string immunetag1_key = 1;
            if (!this_._internal_immunetag1_key().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_immunetag1_key());
            }
            // string immunetag1_value = 2;
            if (!this_._internal_immunetag1_value().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_immunetag1_value());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TestMultiKeyimmunetag1::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestMultiKeyimmunetag1*>(&to_msg);
  auto& from = static_cast<const TestMultiKeyimmunetag1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestMultiKeyimmunetag1)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_immunetag1_key().empty()) {
    _this->_internal_set_immunetag1_key(from._internal_immunetag1_key());
  }
  if (!from._internal_immunetag1_value().empty()) {
    _this->_internal_set_immunetag1_value(from._internal_immunetag1_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestMultiKeyimmunetag1::CopyFrom(const TestMultiKeyimmunetag1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestMultiKeyimmunetag1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestMultiKeyimmunetag1::InternalSwap(TestMultiKeyimmunetag1* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.immunetag1_key_, &other->_impl_.immunetag1_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.immunetag1_value_, &other->_impl_.immunetag1_value_, arena);
}

::google::protobuf::Metadata TestMultiKeyimmunetag1::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestMultiKeytestobj1::_Internal {
 public:
};

TestMultiKeytestobj1::TestMultiKeytestobj1(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TestMultiKeytestobj1)
}
TestMultiKeytestobj1::TestMultiKeytestobj1(
    ::google::protobuf::Arena* arena, const TestMultiKeytestobj1& from)
    : TestMultiKeytestobj1(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE TestMultiKeytestobj1::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TestMultiKeytestobj1::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, testobj1_key_),
           0,
           offsetof(Impl_, testobj1_value_) -
               offsetof(Impl_, testobj1_key_) +
               sizeof(Impl_::testobj1_value_));
}
TestMultiKeytestobj1::~TestMultiKeytestobj1() {
  // @@protoc_insertion_point(destructor:TestMultiKeytestobj1)
  SharedDtor(*this);
}
inline void TestMultiKeytestobj1::SharedDtor(MessageLite& self) {
  TestMultiKeytestobj1& this_ = static_cast<TestMultiKeytestobj1&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* TestMultiKeytestobj1::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TestMultiKeytestobj1(arena);
}
constexpr auto TestMultiKeytestobj1::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(TestMultiKeytestobj1),
                                            alignof(TestMultiKeytestobj1));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TestMultiKeytestobj1::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TestMultiKeytestobj1_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TestMultiKeytestobj1::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TestMultiKeytestobj1>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TestMultiKeytestobj1::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TestMultiKeytestobj1>(), &TestMultiKeytestobj1::ByteSizeLong,
            &TestMultiKeytestobj1::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TestMultiKeytestobj1, _impl_._cached_size_),
        false,
    },
    &TestMultiKeytestobj1::kDescriptorMethods,
    &descriptor_table_testmultikey_5ftable_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TestMultiKeytestobj1::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> TestMultiKeytestobj1::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::TestMultiKeytestobj1>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 testobj1_value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMultiKeytestobj1, _impl_.testobj1_value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiKeytestobj1, _impl_.testobj1_value_)}},
    // uint32 testobj1_key = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMultiKeytestobj1, _impl_.testobj1_key_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiKeytestobj1, _impl_.testobj1_key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 testobj1_key = 1;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeytestobj1, _impl_.testobj1_key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 testobj1_value = 2;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeytestobj1, _impl_.testobj1_value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void TestMultiKeytestobj1::Clear() {
// @@protoc_insertion_point(message_clear_start:TestMultiKeytestobj1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.testobj1_key_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.testobj1_value_) -
      reinterpret_cast<char*>(&_impl_.testobj1_key_)) + sizeof(_impl_.testobj1_value_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestMultiKeytestobj1::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestMultiKeytestobj1& this_ = static_cast<const TestMultiKeytestobj1&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestMultiKeytestobj1::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestMultiKeytestobj1& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:TestMultiKeytestobj1)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 testobj1_key = 1;
          if (this_._internal_testobj1_key() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_testobj1_key(), target);
          }

          // uint32 testobj1_value = 2;
          if (this_._internal_testobj1_value() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_testobj1_value(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:TestMultiKeytestobj1)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestMultiKeytestobj1::ByteSizeLong(const MessageLite& base) {
          const TestMultiKeytestobj1& this_ = static_cast<const TestMultiKeytestobj1&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestMultiKeytestobj1::ByteSizeLong() const {
          const TestMultiKeytestobj1& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:TestMultiKeytestobj1)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // uint32 testobj1_key = 1;
            if (this_._internal_testobj1_key() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_testobj1_key());
            }
            // uint32 testobj1_value = 2;
            if (this_._internal_testobj1_value() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_testobj1_value());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TestMultiKeytestobj1::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestMultiKeytestobj1*>(&to_msg);
  auto& from = static_cast<const TestMultiKeytestobj1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestMultiKeytestobj1)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_testobj1_key() != 0) {
    _this->_impl_.testobj1_key_ = from._impl_.testobj1_key_;
  }
  if (from._internal_testobj1_value() != 0) {
    _this->_impl_.testobj1_value_ = from._impl_.testobj1_value_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestMultiKeytestobj1::CopyFrom(const TestMultiKeytestobj1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestMultiKeytestobj1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestMultiKeytestobj1::InternalSwap(TestMultiKeytestobj1* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMultiKeytestobj1, _impl_.testobj1_value_)
      + sizeof(TestMultiKeytestobj1::_impl_.testobj1_value_)
      - PROTOBUF_FIELD_OFFSET(TestMultiKeytestobj1, _impl_.testobj1_key_)>(
          reinterpret_cast<char*>(&_impl_.testobj1_key_),
          reinterpret_cast<char*>(&other->_impl_.testobj1_key_));
}

::google::protobuf::Metadata TestMultiKeytestobj1::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              TestMultiKeyTable_Tag1Entry_DoNotUse::TestMultiKeyTable_Tag1Entry_DoNotUse() : SuperType(_class_data_.base()) {}
              TestMultiKeyTable_Tag1Entry_DoNotUse::TestMultiKeyTable_Tag1Entry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              TestMultiKeyTable_Tag1Entry_DoNotUse::TestMultiKeyTable_Tag1Entry_DoNotUse() : SuperType() {}
              TestMultiKeyTable_Tag1Entry_DoNotUse::TestMultiKeyTable_Tag1Entry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* TestMultiKeyTable_Tag1Entry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) TestMultiKeyTable_Tag1Entry_DoNotUse(arena);
              }
              constexpr auto TestMultiKeyTable_Tag1Entry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TestMultiKeyTable_Tag1Entry_DoNotUse),
                                                          alignof(TestMultiKeyTable_Tag1Entry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull TestMultiKeyTable_Tag1Entry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_TestMultiKeyTable_Tag1Entry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &TestMultiKeyTable_Tag1Entry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<TestMultiKeyTable_Tag1Entry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &TestMultiKeyTable_Tag1Entry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &TestMultiKeyTable_Tag1Entry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(TestMultiKeyTable_Tag1Entry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &TestMultiKeyTable_Tag1Entry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_testmultikey_5ftable_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* TestMultiKeyTable_Tag1Entry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 44, 2> TestMultiKeyTable_Tag1Entry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestMultiKeyTable_Tag1Entry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::TestMultiKeyTable_Tag1Entry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiKeyTable_Tag1Entry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiKeyTable_Tag1Entry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeyTable_Tag1Entry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeyTable_Tag1Entry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\33\3\5\0\0\0\0\0"
    "TestMultiKeyTable.Tag1Entry"
    "key"
    "value"
  }},
};

// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              TestMultiKeyTable_Immunetag1Entry_DoNotUse::TestMultiKeyTable_Immunetag1Entry_DoNotUse() : SuperType(_class_data_.base()) {}
              TestMultiKeyTable_Immunetag1Entry_DoNotUse::TestMultiKeyTable_Immunetag1Entry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              TestMultiKeyTable_Immunetag1Entry_DoNotUse::TestMultiKeyTable_Immunetag1Entry_DoNotUse() : SuperType() {}
              TestMultiKeyTable_Immunetag1Entry_DoNotUse::TestMultiKeyTable_Immunetag1Entry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* TestMultiKeyTable_Immunetag1Entry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) TestMultiKeyTable_Immunetag1Entry_DoNotUse(arena);
              }
              constexpr auto TestMultiKeyTable_Immunetag1Entry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TestMultiKeyTable_Immunetag1Entry_DoNotUse),
                                                          alignof(TestMultiKeyTable_Immunetag1Entry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull TestMultiKeyTable_Immunetag1Entry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_TestMultiKeyTable_Immunetag1Entry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &TestMultiKeyTable_Immunetag1Entry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<TestMultiKeyTable_Immunetag1Entry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &TestMultiKeyTable_Immunetag1Entry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &TestMultiKeyTable_Immunetag1Entry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(TestMultiKeyTable_Immunetag1Entry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &TestMultiKeyTable_Immunetag1Entry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_testmultikey_5ftable_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* TestMultiKeyTable_Immunetag1Entry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 50, 2> TestMultiKeyTable_Immunetag1Entry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestMultiKeyTable_Immunetag1Entry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::TestMultiKeyTable_Immunetag1Entry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiKeyTable_Immunetag1Entry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiKeyTable_Immunetag1Entry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeyTable_Immunetag1Entry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeyTable_Immunetag1Entry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\41\3\5\0\0\0\0\0"
    "TestMultiKeyTable.Immunetag1Entry"
    "key"
    "value"
  }},
};

// ===================================================================

class TestMultiKeyTable::_Internal {
 public:
};

TestMultiKeyTable::TestMultiKeyTable(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TestMultiKeyTable)
}
inline PROTOBUF_NDEBUG_INLINE TestMultiKeyTable::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::TestMultiKeyTable& from_msg)
      : tag1_{visibility, arena, from.tag1_},
        immunetag1_{visibility, arena, from.immunetag1_},
        testobj1_{visibility, arena, from.testobj1_},
        effect_{visibility, arena, from.effect_},
        _effect_cached_byte_size_{0},
        stringkey_(arena, from.stringkey_),
        mstringkey_(arena, from.mstringkey_),
        _cached_size_{0} {}

TestMultiKeyTable::TestMultiKeyTable(
    ::google::protobuf::Arena* arena,
    const TestMultiKeyTable& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestMultiKeyTable* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, min32key_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::min32key_));

  // @@protoc_insertion_point(copy_constructor:TestMultiKeyTable)
}
inline PROTOBUF_NDEBUG_INLINE TestMultiKeyTable::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : tag1_{visibility, arena},
        immunetag1_{visibility, arena},
        testobj1_{visibility, arena},
        effect_{visibility, arena},
        _effect_cached_byte_size_{0},
        stringkey_(arena),
        mstringkey_(arena),
        _cached_size_{0} {}

inline void TestMultiKeyTable::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, min32key_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::min32key_));
}
TestMultiKeyTable::~TestMultiKeyTable() {
  // @@protoc_insertion_point(destructor:TestMultiKeyTable)
  SharedDtor(*this);
}
inline void TestMultiKeyTable::SharedDtor(MessageLite& self) {
  TestMultiKeyTable& this_ = static_cast<TestMultiKeyTable&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.stringkey_.Destroy();
  this_._impl_.mstringkey_.Destroy();
  this_._impl_.~Impl_();
}

inline void* TestMultiKeyTable::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TestMultiKeyTable(arena);
}
constexpr auto TestMultiKeyTable::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.tag1_) +
          decltype(TestMultiKeyTable::_impl_.tag1_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.tag1_) +
          decltype(TestMultiKeyTable::_impl_.tag1_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.immunetag1_) +
          decltype(TestMultiKeyTable::_impl_.immunetag1_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.immunetag1_) +
          decltype(TestMultiKeyTable::_impl_.immunetag1_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.testobj1_) +
          decltype(TestMultiKeyTable::_impl_.testobj1_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.effect_) +
          decltype(TestMultiKeyTable::_impl_.effect_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(TestMultiKeyTable), alignof(TestMultiKeyTable), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TestMultiKeyTable::PlacementNew_,
                                 sizeof(TestMultiKeyTable),
                                 alignof(TestMultiKeyTable));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TestMultiKeyTable::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TestMultiKeyTable_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TestMultiKeyTable::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TestMultiKeyTable>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TestMultiKeyTable::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TestMultiKeyTable>(), &TestMultiKeyTable::ByteSizeLong,
            &TestMultiKeyTable::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_._cached_size_),
        false,
    },
    &TestMultiKeyTable::kDescriptorMethods,
    &descriptor_table_testmultikey_5ftable_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TestMultiKeyTable::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 3, 67, 2> TestMultiKeyTable::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::TestMultiKeyTable>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMultiKeyTable, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 level = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMultiKeyTable, _impl_.level_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.level_)}},
    // repeated .TestMultiKeytestobj1 testobj1 = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.testobj1_)}},
    // repeated uint32 effect = 6;
    {::_pbi::TcParser::FastV32P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.effect_)}},
    // string stringkey = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.stringkey_)}},
    // uint32 uint32key = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMultiKeyTable, _impl_.uint32key_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.uint32key_)}},
    // int32 in32key = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMultiKeyTable, _impl_.in32key_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.in32key_)}},
    // string mstringkey = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.mstringkey_)}},
    // uint32 muint32key = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMultiKeyTable, _impl_.muint32key_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.muint32key_)}},
    // int32 min32key = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestMultiKeyTable, _impl_.min32key_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.min32key_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 id = 1;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // map<string, string> tag1 = 2;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.tag1_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<string, string> immunetag1 = 3;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.immunetag1_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // uint32 level = 4;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated .TestMultiKeytestobj1 testobj1 = 5;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.testobj1_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated uint32 effect = 6;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.effect_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // string stringkey = 7;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.stringkey_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 uint32key = 8;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.uint32key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // int32 in32key = 9;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.in32key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string mstringkey = 10;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.mstringkey_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 muint32key = 11;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.muint32key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // int32 min32key = 12;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.min32key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::TestMultiKeytestobj1>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMultiKeyTable()._impl_.tag1_)>(
        1, 0, 0, 9,
        9)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(TestMultiKeyTable()._impl_.immunetag1_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\21\0\4\12\0\0\0\11\0\0\12\0\0\0\0\0"
    "TestMultiKeyTable"
    "tag1"
    "immunetag1"
    "stringkey"
    "mstringkey"
  }},
};

PROTOBUF_NOINLINE void TestMultiKeyTable::Clear() {
// @@protoc_insertion_point(message_clear_start:TestMultiKeyTable)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tag1_.Clear();
  _impl_.immunetag1_.Clear();
  _impl_.testobj1_.Clear();
  _impl_.effect_.Clear();
  _impl_.stringkey_.ClearToEmpty();
  _impl_.mstringkey_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.min32key_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.min32key_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestMultiKeyTable::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestMultiKeyTable& this_ = static_cast<const TestMultiKeyTable&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestMultiKeyTable::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestMultiKeyTable& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:TestMultiKeyTable)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 id = 1;
          if (this_._internal_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_id(), target);
          }

          // map<string, string> tag1 = 2;
          if (!this_._internal_tag1().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_tag1();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    2, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "TestMultiKeyTable.tag1");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "TestMultiKeyTable.tag1");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    2, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "TestMultiKeyTable.tag1");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "TestMultiKeyTable.tag1");
              }
            }
          }

          // map<string, string> immunetag1 = 3;
          if (!this_._internal_immunetag1().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_immunetag1();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    3, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "TestMultiKeyTable.immunetag1");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "TestMultiKeyTable.immunetag1");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    3, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "TestMultiKeyTable.immunetag1");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "TestMultiKeyTable.immunetag1");
              }
            }
          }

          // uint32 level = 4;
          if (this_._internal_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                4, this_._internal_level(), target);
          }

          // repeated .TestMultiKeytestobj1 testobj1 = 5;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_testobj1_size());
               i < n; i++) {
            const auto& repfield = this_._internal_testobj1().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    5, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated uint32 effect = 6;
          {
            int byte_size = this_._impl_._effect_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteUInt32Packed(
                  6, this_._internal_effect(), byte_size, target);
            }
          }

          // string stringkey = 7;
          if (!this_._internal_stringkey().empty()) {
            const std::string& _s = this_._internal_stringkey();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "TestMultiKeyTable.stringkey");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // uint32 uint32key = 8;
          if (this_._internal_uint32key() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                8, this_._internal_uint32key(), target);
          }

          // int32 in32key = 9;
          if (this_._internal_in32key() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<9>(
                    stream, this_._internal_in32key(), target);
          }

          // string mstringkey = 10;
          if (!this_._internal_mstringkey().empty()) {
            const std::string& _s = this_._internal_mstringkey();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "TestMultiKeyTable.mstringkey");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          // uint32 muint32key = 11;
          if (this_._internal_muint32key() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                11, this_._internal_muint32key(), target);
          }

          // int32 min32key = 12;
          if (this_._internal_min32key() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<12>(
                    stream, this_._internal_min32key(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:TestMultiKeyTable)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestMultiKeyTable::ByteSizeLong(const MessageLite& base) {
          const TestMultiKeyTable& this_ = static_cast<const TestMultiKeyTable&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestMultiKeyTable::ByteSizeLong() const {
          const TestMultiKeyTable& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:TestMultiKeyTable)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> tag1 = 2;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_tag1_size());
              for (const auto& entry : this_._internal_tag1()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<string, string> immunetag1 = 3;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_immunetag1_size());
              for (const auto& entry : this_._internal_immunetag1()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // repeated .TestMultiKeytestobj1 testobj1 = 5;
            {
              total_size += 1UL * this_._internal_testobj1_size();
              for (const auto& msg : this_._internal_testobj1()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated uint32 effect = 6;
            {
              total_size +=
                  ::_pbi::WireFormatLite::UInt32SizeWithPackedTagSize(
                      this_._internal_effect(), 1,
                      this_._impl_._effect_cached_byte_size_);
            }
          }
           {
            // string stringkey = 7;
            if (!this_._internal_stringkey().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_stringkey());
            }
            // string mstringkey = 10;
            if (!this_._internal_mstringkey().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_mstringkey());
            }
            // uint32 id = 1;
            if (this_._internal_id() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_id());
            }
            // uint32 level = 4;
            if (this_._internal_level() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_level());
            }
            // uint32 uint32key = 8;
            if (this_._internal_uint32key() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_uint32key());
            }
            // int32 in32key = 9;
            if (this_._internal_in32key() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_in32key());
            }
            // uint32 muint32key = 11;
            if (this_._internal_muint32key() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_muint32key());
            }
            // int32 min32key = 12;
            if (this_._internal_min32key() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_min32key());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TestMultiKeyTable::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestMultiKeyTable*>(&to_msg);
  auto& from = static_cast<const TestMultiKeyTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestMultiKeyTable)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tag1_.MergeFrom(from._impl_.tag1_);
  _this->_impl_.immunetag1_.MergeFrom(from._impl_.immunetag1_);
  _this->_internal_mutable_testobj1()->MergeFrom(
      from._internal_testobj1());
  _this->_internal_mutable_effect()->MergeFrom(from._internal_effect());
  if (!from._internal_stringkey().empty()) {
    _this->_internal_set_stringkey(from._internal_stringkey());
  }
  if (!from._internal_mstringkey().empty()) {
    _this->_internal_set_mstringkey(from._internal_mstringkey());
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (from._internal_level() != 0) {
    _this->_impl_.level_ = from._impl_.level_;
  }
  if (from._internal_uint32key() != 0) {
    _this->_impl_.uint32key_ = from._impl_.uint32key_;
  }
  if (from._internal_in32key() != 0) {
    _this->_impl_.in32key_ = from._impl_.in32key_;
  }
  if (from._internal_muint32key() != 0) {
    _this->_impl_.muint32key_ = from._impl_.muint32key_;
  }
  if (from._internal_min32key() != 0) {
    _this->_impl_.min32key_ = from._impl_.min32key_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestMultiKeyTable::CopyFrom(const TestMultiKeyTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestMultiKeyTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestMultiKeyTable::InternalSwap(TestMultiKeyTable* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tag1_.InternalSwap(&other->_impl_.tag1_);
  _impl_.immunetag1_.InternalSwap(&other->_impl_.immunetag1_);
  _impl_.testobj1_.InternalSwap(&other->_impl_.testobj1_);
  _impl_.effect_.InternalSwap(&other->_impl_.effect_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stringkey_, &other->_impl_.stringkey_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mstringkey_, &other->_impl_.mstringkey_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.min32key_)
      + sizeof(TestMultiKeyTable::_impl_.min32key_)
      - PROTOBUF_FIELD_OFFSET(TestMultiKeyTable, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata TestMultiKeyTable::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestMultiKeyTabledData::_Internal {
 public:
};

TestMultiKeyTabledData::TestMultiKeyTabledData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TestMultiKeyTabledData)
}
inline PROTOBUF_NDEBUG_INLINE TestMultiKeyTabledData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::TestMultiKeyTabledData& from_msg)
      : data_{visibility, arena, from.data_},
        _cached_size_{0} {}

TestMultiKeyTabledData::TestMultiKeyTabledData(
    ::google::protobuf::Arena* arena,
    const TestMultiKeyTabledData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestMultiKeyTabledData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:TestMultiKeyTabledData)
}
inline PROTOBUF_NDEBUG_INLINE TestMultiKeyTabledData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_{visibility, arena},
        _cached_size_{0} {}

inline void TestMultiKeyTabledData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TestMultiKeyTabledData::~TestMultiKeyTabledData() {
  // @@protoc_insertion_point(destructor:TestMultiKeyTabledData)
  SharedDtor(*this);
}
inline void TestMultiKeyTabledData::SharedDtor(MessageLite& self) {
  TestMultiKeyTabledData& this_ = static_cast<TestMultiKeyTabledData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* TestMultiKeyTabledData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TestMultiKeyTabledData(arena);
}
constexpr auto TestMultiKeyTabledData::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TestMultiKeyTabledData, _impl_.data_) +
          decltype(TestMultiKeyTabledData::_impl_.data_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(TestMultiKeyTabledData), alignof(TestMultiKeyTabledData), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TestMultiKeyTabledData::PlacementNew_,
                                 sizeof(TestMultiKeyTabledData),
                                 alignof(TestMultiKeyTabledData));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TestMultiKeyTabledData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TestMultiKeyTabledData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TestMultiKeyTabledData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TestMultiKeyTabledData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TestMultiKeyTabledData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TestMultiKeyTabledData>(), &TestMultiKeyTabledData::ByteSizeLong,
            &TestMultiKeyTabledData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TestMultiKeyTabledData, _impl_._cached_size_),
        false,
    },
    &TestMultiKeyTabledData::kDescriptorMethods,
    &descriptor_table_testmultikey_5ftable_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TestMultiKeyTabledData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TestMultiKeyTabledData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::TestMultiKeyTabledData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .TestMultiKeyTable data = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestMultiKeyTabledData, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .TestMultiKeyTable data = 1;
    {PROTOBUF_FIELD_OFFSET(TestMultiKeyTabledData, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::TestMultiKeyTable>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TestMultiKeyTabledData::Clear() {
// @@protoc_insertion_point(message_clear_start:TestMultiKeyTabledData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestMultiKeyTabledData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestMultiKeyTabledData& this_ = static_cast<const TestMultiKeyTabledData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestMultiKeyTabledData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestMultiKeyTabledData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:TestMultiKeyTabledData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .TestMultiKeyTable data = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_data_size());
               i < n; i++) {
            const auto& repfield = this_._internal_data().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:TestMultiKeyTabledData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestMultiKeyTabledData::ByteSizeLong(const MessageLite& base) {
          const TestMultiKeyTabledData& this_ = static_cast<const TestMultiKeyTabledData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestMultiKeyTabledData::ByteSizeLong() const {
          const TestMultiKeyTabledData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:TestMultiKeyTabledData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .TestMultiKeyTable data = 1;
            {
              total_size += 1UL * this_._internal_data_size();
              for (const auto& msg : this_._internal_data()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TestMultiKeyTabledData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestMultiKeyTabledData*>(&to_msg);
  auto& from = static_cast<const TestMultiKeyTabledData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestMultiKeyTabledData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(
      from._internal_data());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestMultiKeyTabledData::CopyFrom(const TestMultiKeyTabledData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestMultiKeyTabledData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestMultiKeyTabledData::InternalSwap(TestMultiKeyTabledData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::google::protobuf::Metadata TestMultiKeyTabledData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_testmultikey_5ftable_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
