// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/logic/component/scene_comp.proto
// Protobuf C++ Version: 6.31.1

#include "proto/logic/component/scene_comp.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr ChangeRoomInfoPBComponent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        scene_confid_{0u},
        guid_{0u},
        dungen_confid_{0u},
        mirror_confid_{0u},
        change_sequence_{0u},
        change_gs_type_{0u},
        change_time_{::uint64_t{0u}},
        state_{0u},
        ignore_full_{false},
        processing_{false},
        is_cross_zone_{false},
        from_zone_id_{0u},
        to_zone_id_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR ChangeRoomInfoPBComponent::ChangeRoomInfoPBComponent(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ChangeRoomInfoPBComponent_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ChangeRoomInfoPBComponentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeRoomInfoPBComponentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeRoomInfoPBComponentDefaultTypeInternal() {}
  union {
    ChangeRoomInfoPBComponent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeRoomInfoPBComponentDefaultTypeInternal _ChangeRoomInfoPBComponent_default_instance_;
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_proto_2flogic_2fcomponent_2fscene_5fcomp_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_proto_2flogic_2fcomponent_2fscene_5fcomp_2eproto = nullptr;
const ::uint32_t
    TableStruct_proto_2flogic_2fcomponent_2fscene_5fcomp_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::ChangeRoomInfoPBComponent, _impl_._has_bits_),
        16, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::ChangeRoomInfoPBComponent, _impl_.scene_confid_),
        PROTOBUF_FIELD_OFFSET(::ChangeRoomInfoPBComponent, _impl_.guid_),
        PROTOBUF_FIELD_OFFSET(::ChangeRoomInfoPBComponent, _impl_.dungen_confid_),
        PROTOBUF_FIELD_OFFSET(::ChangeRoomInfoPBComponent, _impl_.mirror_confid_),
        PROTOBUF_FIELD_OFFSET(::ChangeRoomInfoPBComponent, _impl_.change_sequence_),
        PROTOBUF_FIELD_OFFSET(::ChangeRoomInfoPBComponent, _impl_.change_gs_type_),
        PROTOBUF_FIELD_OFFSET(::ChangeRoomInfoPBComponent, _impl_.change_time_),
        PROTOBUF_FIELD_OFFSET(::ChangeRoomInfoPBComponent, _impl_.ignore_full_),
        PROTOBUF_FIELD_OFFSET(::ChangeRoomInfoPBComponent, _impl_.processing_),
        PROTOBUF_FIELD_OFFSET(::ChangeRoomInfoPBComponent, _impl_.state_),
        PROTOBUF_FIELD_OFFSET(::ChangeRoomInfoPBComponent, _impl_.from_zone_id_),
        PROTOBUF_FIELD_OFFSET(::ChangeRoomInfoPBComponent, _impl_.to_zone_id_),
        PROTOBUF_FIELD_OFFSET(::ChangeRoomInfoPBComponent, _impl_.is_cross_zone_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        9,
        7,
        11,
        12,
        10,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::ChangeRoomInfoPBComponent)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::_ChangeRoomInfoPBComponent_default_instance_._instance,
};
const char descriptor_table_protodef_proto_2flogic_2fcomponent_2fscene_5fcomp_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n&proto/logic/component/scene_comp.proto"
    "\"\332\003\n\031ChangeRoomInfoPBComponent\022\024\n\014scene_"
    "confid\030\001 \001(\r\022\014\n\004guid\030\002 \001(\r\022\025\n\rdungen_con"
    "fid\030\003 \001(\r\022\025\n\rmirror_confid\030\004 \001(\r\022\027\n\017chan"
    "ge_sequence\030\005 \001(\r\022\026\n\016change_gs_type\030\006 \001("
    "\r\022\023\n\013change_time\030\007 \001(\004\022\023\n\013ignore_full\030\010 "
    "\001(\010\022\022\n\nprocessing\030\t \001(\010\022\r\n\005state\030\n \001(\r\022\024"
    "\n\014from_zone_id\030\013 \001(\r\022\022\n\nto_zone_id\030\014 \001(\r"
    "\022\025\n\ris_cross_zone\030\r \001(\010\".\n\reChangeGsType"
    "\022\013\n\007eSameGs\020\000\022\020\n\014eDifferentGs\020\001\"|\n\021eChan"
    "geSceneState\022\021\n\rePendingLeave\020\000\022\014\n\010eLeav"
    "ing\020\001\022\021\n\reWaitingEnter\020\002\022\021\n\reEnterSuccee"
    "d\020\003\022\025\n\021eGateEnterSucceed\020\004\022\t\n\005eDone\020\005b\006p"
    "roto3"
};
static ::absl::once_flag descriptor_table_proto_2flogic_2fcomponent_2fscene_5fcomp_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_proto_2flogic_2fcomponent_2fscene_5fcomp_2eproto = {
    false,
    false,
    525,
    descriptor_table_protodef_proto_2flogic_2fcomponent_2fscene_5fcomp_2eproto,
    "proto/logic/component/scene_comp.proto",
    &descriptor_table_proto_2flogic_2fcomponent_2fscene_5fcomp_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_proto_2flogic_2fcomponent_2fscene_5fcomp_2eproto::offsets,
    file_level_enum_descriptors_proto_2flogic_2fcomponent_2fscene_5fcomp_2eproto,
    file_level_service_descriptors_proto_2flogic_2fcomponent_2fscene_5fcomp_2eproto,
};
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ChangeRoomInfoPBComponent_eChangeGsType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_proto_2flogic_2fcomponent_2fscene_5fcomp_2eproto);
  return file_level_enum_descriptors_proto_2flogic_2fcomponent_2fscene_5fcomp_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t ChangeRoomInfoPBComponent_eChangeGsType_internal_data_[] = {
    131072u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ChangeRoomInfoPBComponent_eChangeSceneState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_proto_2flogic_2fcomponent_2fscene_5fcomp_2eproto);
  return file_level_enum_descriptors_proto_2flogic_2fcomponent_2fscene_5fcomp_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t ChangeRoomInfoPBComponent_eChangeSceneState_internal_data_[] = {
    393216u, 0u, };
// ===================================================================

class ChangeRoomInfoPBComponent::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ChangeRoomInfoPBComponent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_._has_bits_);
};

ChangeRoomInfoPBComponent::ChangeRoomInfoPBComponent(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ChangeRoomInfoPBComponent_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ChangeRoomInfoPBComponent)
}
ChangeRoomInfoPBComponent::ChangeRoomInfoPBComponent(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ChangeRoomInfoPBComponent& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ChangeRoomInfoPBComponent_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE ChangeRoomInfoPBComponent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void ChangeRoomInfoPBComponent::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, scene_confid_),
           0,
           offsetof(Impl_, to_zone_id_) -
               offsetof(Impl_, scene_confid_) +
               sizeof(Impl_::to_zone_id_));
}
ChangeRoomInfoPBComponent::~ChangeRoomInfoPBComponent() {
  // @@protoc_insertion_point(destructor:ChangeRoomInfoPBComponent)
  SharedDtor(*this);
}
inline void ChangeRoomInfoPBComponent::SharedDtor(MessageLite& self) {
  ChangeRoomInfoPBComponent& this_ = static_cast<ChangeRoomInfoPBComponent&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ChangeRoomInfoPBComponent::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ChangeRoomInfoPBComponent(arena);
}
constexpr auto ChangeRoomInfoPBComponent::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ChangeRoomInfoPBComponent),
                                            alignof(ChangeRoomInfoPBComponent));
}
constexpr auto ChangeRoomInfoPBComponent::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ChangeRoomInfoPBComponent_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ChangeRoomInfoPBComponent::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ChangeRoomInfoPBComponent>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ChangeRoomInfoPBComponent::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ChangeRoomInfoPBComponent>(), &ChangeRoomInfoPBComponent::ByteSizeLong,
              &ChangeRoomInfoPBComponent::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_._cached_size_),
          false,
      },
      &ChangeRoomInfoPBComponent::kDescriptorMethods,
      &descriptor_table_proto_2flogic_2fcomponent_2fscene_5fcomp_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ChangeRoomInfoPBComponent_class_data_ =
        ChangeRoomInfoPBComponent::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ChangeRoomInfoPBComponent::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ChangeRoomInfoPBComponent_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ChangeRoomInfoPBComponent_class_data_.tc_table);
  return ChangeRoomInfoPBComponent_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 0, 0, 2>
ChangeRoomInfoPBComponent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_._has_bits_),
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ChangeRoomInfoPBComponent_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ChangeRoomInfoPBComponent>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 scene_confid = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChangeRoomInfoPBComponent, _impl_.scene_confid_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.scene_confid_)}},
    // uint32 guid = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChangeRoomInfoPBComponent, _impl_.guid_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.guid_)}},
    // uint32 dungen_confid = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChangeRoomInfoPBComponent, _impl_.dungen_confid_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.dungen_confid_)}},
    // uint32 mirror_confid = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChangeRoomInfoPBComponent, _impl_.mirror_confid_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.mirror_confid_)}},
    // uint32 change_sequence = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChangeRoomInfoPBComponent, _impl_.change_sequence_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.change_sequence_)}},
    // uint32 change_gs_type = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChangeRoomInfoPBComponent, _impl_.change_gs_type_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.change_gs_type_)}},
    // uint64 change_time = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ChangeRoomInfoPBComponent, _impl_.change_time_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.change_time_)}},
    // bool ignore_full = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChangeRoomInfoPBComponent, _impl_.ignore_full_), 8>(),
     {64, 8, 0, PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.ignore_full_)}},
    // bool processing = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChangeRoomInfoPBComponent, _impl_.processing_), 9>(),
     {72, 9, 0, PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.processing_)}},
    // uint32 state = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChangeRoomInfoPBComponent, _impl_.state_), 7>(),
     {80, 7, 0, PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.state_)}},
    // uint32 from_zone_id = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChangeRoomInfoPBComponent, _impl_.from_zone_id_), 11>(),
     {88, 11, 0, PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.from_zone_id_)}},
    // uint32 to_zone_id = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChangeRoomInfoPBComponent, _impl_.to_zone_id_), 12>(),
     {96, 12, 0, PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.to_zone_id_)}},
    // bool is_cross_zone = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChangeRoomInfoPBComponent, _impl_.is_cross_zone_), 10>(),
     {104, 10, 0, PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.is_cross_zone_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 scene_confid = 1;
    {PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.scene_confid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 guid = 2;
    {PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.guid_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 dungen_confid = 3;
    {PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.dungen_confid_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 mirror_confid = 4;
    {PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.mirror_confid_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 change_sequence = 5;
    {PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.change_sequence_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 change_gs_type = 6;
    {PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.change_gs_type_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint64 change_time = 7;
    {PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.change_time_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // bool ignore_full = 8;
    {PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.ignore_full_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool processing = 9;
    {PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.processing_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // uint32 state = 10;
    {PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.state_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 from_zone_id = 11;
    {PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.from_zone_id_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 to_zone_id = 12;
    {PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.to_zone_id_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // bool is_cross_zone = 13;
    {PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.is_cross_zone_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void ChangeRoomInfoPBComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:ChangeRoomInfoPBComponent)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    ::memset(&_impl_.scene_confid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.state_) -
        reinterpret_cast<char*>(&_impl_.scene_confid_)) + sizeof(_impl_.state_));
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    ::memset(&_impl_.ignore_full_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.to_zone_id_) -
        reinterpret_cast<char*>(&_impl_.ignore_full_)) + sizeof(_impl_.to_zone_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ChangeRoomInfoPBComponent::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ChangeRoomInfoPBComponent& this_ = static_cast<const ChangeRoomInfoPBComponent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ChangeRoomInfoPBComponent::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ChangeRoomInfoPBComponent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:ChangeRoomInfoPBComponent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 scene_confid = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_scene_confid() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_scene_confid(), target);
    }
  }

  // uint32 guid = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_guid() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this_._internal_guid(), target);
    }
  }

  // uint32 dungen_confid = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_dungen_confid() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this_._internal_dungen_confid(), target);
    }
  }

  // uint32 mirror_confid = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_mirror_confid() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          4, this_._internal_mirror_confid(), target);
    }
  }

  // uint32 change_sequence = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_change_sequence() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          5, this_._internal_change_sequence(), target);
    }
  }

  // uint32 change_gs_type = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_change_gs_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          6, this_._internal_change_gs_type(), target);
    }
  }

  // uint64 change_time = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (this_._internal_change_time() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          7, this_._internal_change_time(), target);
    }
  }

  // bool ignore_full = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000100u) != 0) {
    if (this_._internal_ignore_full() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          8, this_._internal_ignore_full(), target);
    }
  }

  // bool processing = 9;
  if ((this_._impl_._has_bits_[0] & 0x00000200u) != 0) {
    if (this_._internal_processing() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          9, this_._internal_processing(), target);
    }
  }

  // uint32 state = 10;
  if ((this_._impl_._has_bits_[0] & 0x00000080u) != 0) {
    if (this_._internal_state() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          10, this_._internal_state(), target);
    }
  }

  // uint32 from_zone_id = 11;
  if ((this_._impl_._has_bits_[0] & 0x00000800u) != 0) {
    if (this_._internal_from_zone_id() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          11, this_._internal_from_zone_id(), target);
    }
  }

  // uint32 to_zone_id = 12;
  if ((this_._impl_._has_bits_[0] & 0x00001000u) != 0) {
    if (this_._internal_to_zone_id() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          12, this_._internal_to_zone_id(), target);
    }
  }

  // bool is_cross_zone = 13;
  if ((this_._impl_._has_bits_[0] & 0x00000400u) != 0) {
    if (this_._internal_is_cross_zone() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          13, this_._internal_is_cross_zone(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChangeRoomInfoPBComponent)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ChangeRoomInfoPBComponent::ByteSizeLong(const MessageLite& base) {
  const ChangeRoomInfoPBComponent& this_ = static_cast<const ChangeRoomInfoPBComponent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ChangeRoomInfoPBComponent::ByteSizeLong() const {
  const ChangeRoomInfoPBComponent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ChangeRoomInfoPBComponent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // uint32 scene_confid = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_scene_confid() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_scene_confid());
      }
    }
    // uint32 guid = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_guid() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_guid());
      }
    }
    // uint32 dungen_confid = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_dungen_confid() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_dungen_confid());
      }
    }
    // uint32 mirror_confid = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_mirror_confid() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_mirror_confid());
      }
    }
    // uint32 change_sequence = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_change_sequence() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_change_sequence());
      }
    }
    // uint32 change_gs_type = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_change_gs_type() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_change_gs_type());
      }
    }
    // uint64 change_time = 7;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (this_._internal_change_time() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
            this_._internal_change_time());
      }
    }
    // uint32 state = 10;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (this_._internal_state() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_state());
      }
    }
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    // bool ignore_full = 8;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (this_._internal_ignore_full() != 0) {
        total_size += 2;
      }
    }
    // bool processing = 9;
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (this_._internal_processing() != 0) {
        total_size += 2;
      }
    }
    // bool is_cross_zone = 13;
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (this_._internal_is_cross_zone() != 0) {
        total_size += 2;
      }
    }
    // uint32 from_zone_id = 11;
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (this_._internal_from_zone_id() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_from_zone_id());
      }
    }
    // uint32 to_zone_id = 12;
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (this_._internal_to_zone_id() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_to_zone_id());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ChangeRoomInfoPBComponent::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ChangeRoomInfoPBComponent*>(&to_msg);
  auto& from = static_cast<const ChangeRoomInfoPBComponent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChangeRoomInfoPBComponent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_scene_confid() != 0) {
        _this->_impl_.scene_confid_ = from._impl_.scene_confid_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_guid() != 0) {
        _this->_impl_.guid_ = from._impl_.guid_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_dungen_confid() != 0) {
        _this->_impl_.dungen_confid_ = from._impl_.dungen_confid_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_mirror_confid() != 0) {
        _this->_impl_.mirror_confid_ = from._impl_.mirror_confid_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_change_sequence() != 0) {
        _this->_impl_.change_sequence_ = from._impl_.change_sequence_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_change_gs_type() != 0) {
        _this->_impl_.change_gs_type_ = from._impl_.change_gs_type_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (from._internal_change_time() != 0) {
        _this->_impl_.change_time_ = from._impl_.change_time_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (from._internal_state() != 0) {
        _this->_impl_.state_ = from._impl_.state_;
      }
    }
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (from._internal_ignore_full() != 0) {
        _this->_impl_.ignore_full_ = from._impl_.ignore_full_;
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (from._internal_processing() != 0) {
        _this->_impl_.processing_ = from._impl_.processing_;
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (from._internal_is_cross_zone() != 0) {
        _this->_impl_.is_cross_zone_ = from._impl_.is_cross_zone_;
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (from._internal_from_zone_id() != 0) {
        _this->_impl_.from_zone_id_ = from._impl_.from_zone_id_;
      }
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (from._internal_to_zone_id() != 0) {
        _this->_impl_.to_zone_id_ = from._impl_.to_zone_id_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeRoomInfoPBComponent::CopyFrom(const ChangeRoomInfoPBComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChangeRoomInfoPBComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ChangeRoomInfoPBComponent::InternalSwap(ChangeRoomInfoPBComponent* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.to_zone_id_)
      + sizeof(ChangeRoomInfoPBComponent::_impl_.to_zone_id_)
      - PROTOBUF_FIELD_OFFSET(ChangeRoomInfoPBComponent, _impl_.scene_confid_)>(
          reinterpret_cast<char*>(&_impl_.scene_confid_),
          reinterpret_cast<char*>(&other->_impl_.scene_confid_));
}

::google::protobuf::Metadata ChangeRoomInfoPBComponent::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_proto_2flogic_2fcomponent_2fscene_5fcomp_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
