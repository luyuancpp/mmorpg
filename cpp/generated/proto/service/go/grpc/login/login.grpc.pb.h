// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/service/go/grpc/login/login.proto
#ifndef GRPC_proto_2fservice_2fgo_2fgrpc_2flogin_2flogin_2eproto__INCLUDED
#define GRPC_proto_2fservice_2fgo_2fgrpc_2flogin_2flogin_2eproto__INCLUDED

#include "proto/service/go/grpc/login/login.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace loginpb {

class ClientPlayerLogin final {
 public:
  static constexpr char const* service_full_name() {
    return "loginpb.ClientPlayerLogin";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::loginpb::LoginRequest& request, ::loginpb::LoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::loginpb::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::loginpb::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status CreatePlayer(::grpc::ClientContext* context, const ::loginpb::CreatePlayerRequest& request, ::loginpb::CreatePlayerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::CreatePlayerResponse>> AsyncCreatePlayer(::grpc::ClientContext* context, const ::loginpb::CreatePlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::CreatePlayerResponse>>(AsyncCreatePlayerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::CreatePlayerResponse>> PrepareAsyncCreatePlayer(::grpc::ClientContext* context, const ::loginpb::CreatePlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::CreatePlayerResponse>>(PrepareAsyncCreatePlayerRaw(context, request, cq));
    }
    virtual ::grpc::Status EnterGame(::grpc::ClientContext* context, const ::loginpb::EnterGameRequest& request, ::loginpb::EnterGameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::EnterGameResponse>> AsyncEnterGame(::grpc::ClientContext* context, const ::loginpb::EnterGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::EnterGameResponse>>(AsyncEnterGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::EnterGameResponse>> PrepareAsyncEnterGame(::grpc::ClientContext* context, const ::loginpb::EnterGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::EnterGameResponse>>(PrepareAsyncEnterGameRaw(context, request, cq));
    }
    virtual ::grpc::Status LeaveGame(::grpc::ClientContext* context, const ::loginpb::LeaveGameRequest& request, ::loginpb::LoginEmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::LoginEmptyResponse>> AsyncLeaveGame(::grpc::ClientContext* context, const ::loginpb::LeaveGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::LoginEmptyResponse>>(AsyncLeaveGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::LoginEmptyResponse>> PrepareAsyncLeaveGame(::grpc::ClientContext* context, const ::loginpb::LeaveGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::LoginEmptyResponse>>(PrepareAsyncLeaveGameRaw(context, request, cq));
    }
    virtual ::grpc::Status Disconnect(::grpc::ClientContext* context, const ::loginpb::LoginNodeDisconnectRequest& request, ::loginpb::LoginEmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::LoginEmptyResponse>> AsyncDisconnect(::grpc::ClientContext* context, const ::loginpb::LoginNodeDisconnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::LoginEmptyResponse>>(AsyncDisconnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::LoginEmptyResponse>> PrepareAsyncDisconnect(::grpc::ClientContext* context, const ::loginpb::LoginNodeDisconnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::LoginEmptyResponse>>(PrepareAsyncDisconnectRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Login(::grpc::ClientContext* context, const ::loginpb::LoginRequest* request, ::loginpb::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::loginpb::LoginRequest* request, ::loginpb::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreatePlayer(::grpc::ClientContext* context, const ::loginpb::CreatePlayerRequest* request, ::loginpb::CreatePlayerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreatePlayer(::grpc::ClientContext* context, const ::loginpb::CreatePlayerRequest* request, ::loginpb::CreatePlayerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void EnterGame(::grpc::ClientContext* context, const ::loginpb::EnterGameRequest* request, ::loginpb::EnterGameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EnterGame(::grpc::ClientContext* context, const ::loginpb::EnterGameRequest* request, ::loginpb::EnterGameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void LeaveGame(::grpc::ClientContext* context, const ::loginpb::LeaveGameRequest* request, ::loginpb::LoginEmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LeaveGame(::grpc::ClientContext* context, const ::loginpb::LeaveGameRequest* request, ::loginpb::LoginEmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Disconnect(::grpc::ClientContext* context, const ::loginpb::LoginNodeDisconnectRequest* request, ::loginpb::LoginEmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Disconnect(::grpc::ClientContext* context, const ::loginpb::LoginNodeDisconnectRequest* request, ::loginpb::LoginEmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::loginpb::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::loginpb::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::CreatePlayerResponse>* AsyncCreatePlayerRaw(::grpc::ClientContext* context, const ::loginpb::CreatePlayerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::CreatePlayerResponse>* PrepareAsyncCreatePlayerRaw(::grpc::ClientContext* context, const ::loginpb::CreatePlayerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::EnterGameResponse>* AsyncEnterGameRaw(::grpc::ClientContext* context, const ::loginpb::EnterGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::EnterGameResponse>* PrepareAsyncEnterGameRaw(::grpc::ClientContext* context, const ::loginpb::EnterGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::LoginEmptyResponse>* AsyncLeaveGameRaw(::grpc::ClientContext* context, const ::loginpb::LeaveGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::LoginEmptyResponse>* PrepareAsyncLeaveGameRaw(::grpc::ClientContext* context, const ::loginpb::LeaveGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::LoginEmptyResponse>* AsyncDisconnectRaw(::grpc::ClientContext* context, const ::loginpb::LoginNodeDisconnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::loginpb::LoginEmptyResponse>* PrepareAsyncDisconnectRaw(::grpc::ClientContext* context, const ::loginpb::LoginNodeDisconnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Login(::grpc::ClientContext* context, const ::loginpb::LoginRequest& request, ::loginpb::LoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loginpb::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::loginpb::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loginpb::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loginpb::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::loginpb::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loginpb::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status CreatePlayer(::grpc::ClientContext* context, const ::loginpb::CreatePlayerRequest& request, ::loginpb::CreatePlayerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loginpb::CreatePlayerResponse>> AsyncCreatePlayer(::grpc::ClientContext* context, const ::loginpb::CreatePlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loginpb::CreatePlayerResponse>>(AsyncCreatePlayerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loginpb::CreatePlayerResponse>> PrepareAsyncCreatePlayer(::grpc::ClientContext* context, const ::loginpb::CreatePlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loginpb::CreatePlayerResponse>>(PrepareAsyncCreatePlayerRaw(context, request, cq));
    }
    ::grpc::Status EnterGame(::grpc::ClientContext* context, const ::loginpb::EnterGameRequest& request, ::loginpb::EnterGameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loginpb::EnterGameResponse>> AsyncEnterGame(::grpc::ClientContext* context, const ::loginpb::EnterGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loginpb::EnterGameResponse>>(AsyncEnterGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loginpb::EnterGameResponse>> PrepareAsyncEnterGame(::grpc::ClientContext* context, const ::loginpb::EnterGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loginpb::EnterGameResponse>>(PrepareAsyncEnterGameRaw(context, request, cq));
    }
    ::grpc::Status LeaveGame(::grpc::ClientContext* context, const ::loginpb::LeaveGameRequest& request, ::loginpb::LoginEmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loginpb::LoginEmptyResponse>> AsyncLeaveGame(::grpc::ClientContext* context, const ::loginpb::LeaveGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loginpb::LoginEmptyResponse>>(AsyncLeaveGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loginpb::LoginEmptyResponse>> PrepareAsyncLeaveGame(::grpc::ClientContext* context, const ::loginpb::LeaveGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loginpb::LoginEmptyResponse>>(PrepareAsyncLeaveGameRaw(context, request, cq));
    }
    ::grpc::Status Disconnect(::grpc::ClientContext* context, const ::loginpb::LoginNodeDisconnectRequest& request, ::loginpb::LoginEmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loginpb::LoginEmptyResponse>> AsyncDisconnect(::grpc::ClientContext* context, const ::loginpb::LoginNodeDisconnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loginpb::LoginEmptyResponse>>(AsyncDisconnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loginpb::LoginEmptyResponse>> PrepareAsyncDisconnect(::grpc::ClientContext* context, const ::loginpb::LoginNodeDisconnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::loginpb::LoginEmptyResponse>>(PrepareAsyncDisconnectRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Login(::grpc::ClientContext* context, const ::loginpb::LoginRequest* request, ::loginpb::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::loginpb::LoginRequest* request, ::loginpb::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreatePlayer(::grpc::ClientContext* context, const ::loginpb::CreatePlayerRequest* request, ::loginpb::CreatePlayerResponse* response, std::function<void(::grpc::Status)>) override;
      void CreatePlayer(::grpc::ClientContext* context, const ::loginpb::CreatePlayerRequest* request, ::loginpb::CreatePlayerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EnterGame(::grpc::ClientContext* context, const ::loginpb::EnterGameRequest* request, ::loginpb::EnterGameResponse* response, std::function<void(::grpc::Status)>) override;
      void EnterGame(::grpc::ClientContext* context, const ::loginpb::EnterGameRequest* request, ::loginpb::EnterGameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LeaveGame(::grpc::ClientContext* context, const ::loginpb::LeaveGameRequest* request, ::loginpb::LoginEmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void LeaveGame(::grpc::ClientContext* context, const ::loginpb::LeaveGameRequest* request, ::loginpb::LoginEmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Disconnect(::grpc::ClientContext* context, const ::loginpb::LoginNodeDisconnectRequest* request, ::loginpb::LoginEmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void Disconnect(::grpc::ClientContext* context, const ::loginpb::LoginNodeDisconnectRequest* request, ::loginpb::LoginEmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::loginpb::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::loginpb::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::loginpb::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::loginpb::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::loginpb::CreatePlayerResponse>* AsyncCreatePlayerRaw(::grpc::ClientContext* context, const ::loginpb::CreatePlayerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::loginpb::CreatePlayerResponse>* PrepareAsyncCreatePlayerRaw(::grpc::ClientContext* context, const ::loginpb::CreatePlayerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::loginpb::EnterGameResponse>* AsyncEnterGameRaw(::grpc::ClientContext* context, const ::loginpb::EnterGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::loginpb::EnterGameResponse>* PrepareAsyncEnterGameRaw(::grpc::ClientContext* context, const ::loginpb::EnterGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::loginpb::LoginEmptyResponse>* AsyncLeaveGameRaw(::grpc::ClientContext* context, const ::loginpb::LeaveGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::loginpb::LoginEmptyResponse>* PrepareAsyncLeaveGameRaw(::grpc::ClientContext* context, const ::loginpb::LeaveGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::loginpb::LoginEmptyResponse>* AsyncDisconnectRaw(::grpc::ClientContext* context, const ::loginpb::LoginNodeDisconnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::loginpb::LoginEmptyResponse>* PrepareAsyncDisconnectRaw(::grpc::ClientContext* context, const ::loginpb::LoginNodeDisconnectRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_CreatePlayer_;
    const ::grpc::internal::RpcMethod rpcmethod_EnterGame_;
    const ::grpc::internal::RpcMethod rpcmethod_LeaveGame_;
    const ::grpc::internal::RpcMethod rpcmethod_Disconnect_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::loginpb::LoginRequest* request, ::loginpb::LoginResponse* response);
    virtual ::grpc::Status CreatePlayer(::grpc::ServerContext* context, const ::loginpb::CreatePlayerRequest* request, ::loginpb::CreatePlayerResponse* response);
    virtual ::grpc::Status EnterGame(::grpc::ServerContext* context, const ::loginpb::EnterGameRequest* request, ::loginpb::EnterGameResponse* response);
    virtual ::grpc::Status LeaveGame(::grpc::ServerContext* context, const ::loginpb::LeaveGameRequest* request, ::loginpb::LoginEmptyResponse* response);
    virtual ::grpc::Status Disconnect(::grpc::ServerContext* context, const ::loginpb::LoginNodeDisconnectRequest* request, ::loginpb::LoginEmptyResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::loginpb::LoginRequest* /*request*/, ::loginpb::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::loginpb::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::loginpb::LoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreatePlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreatePlayer() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreatePlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePlayer(::grpc::ServerContext* /*context*/, const ::loginpb::CreatePlayerRequest* /*request*/, ::loginpb::CreatePlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePlayer(::grpc::ServerContext* context, ::loginpb::CreatePlayerRequest* request, ::grpc::ServerAsyncResponseWriter< ::loginpb::CreatePlayerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EnterGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EnterGame() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_EnterGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnterGame(::grpc::ServerContext* /*context*/, const ::loginpb::EnterGameRequest* /*request*/, ::loginpb::EnterGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnterGame(::grpc::ServerContext* context, ::loginpb::EnterGameRequest* request, ::grpc::ServerAsyncResponseWriter< ::loginpb::EnterGameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LeaveGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LeaveGame() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_LeaveGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveGame(::grpc::ServerContext* /*context*/, const ::loginpb::LeaveGameRequest* /*request*/, ::loginpb::LoginEmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeaveGame(::grpc::ServerContext* context, ::loginpb::LeaveGameRequest* request, ::grpc::ServerAsyncResponseWriter< ::loginpb::LoginEmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Disconnect() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::loginpb::LoginNodeDisconnectRequest* /*request*/, ::loginpb::LoginEmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisconnect(::grpc::ServerContext* context, ::loginpb::LoginNodeDisconnectRequest* request, ::grpc::ServerAsyncResponseWriter< ::loginpb::LoginEmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Login<WithAsyncMethod_CreatePlayer<WithAsyncMethod_EnterGame<WithAsyncMethod_LeaveGame<WithAsyncMethod_Disconnect<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Login() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::loginpb::LoginRequest, ::loginpb::LoginResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::loginpb::LoginRequest* request, ::loginpb::LoginResponse* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::MessageAllocator< ::loginpb::LoginRequest, ::loginpb::LoginResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::loginpb::LoginRequest, ::loginpb::LoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::loginpb::LoginRequest* /*request*/, ::loginpb::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::loginpb::LoginRequest* /*request*/, ::loginpb::LoginResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreatePlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreatePlayer() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::loginpb::CreatePlayerRequest, ::loginpb::CreatePlayerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::loginpb::CreatePlayerRequest* request, ::loginpb::CreatePlayerResponse* response) { return this->CreatePlayer(context, request, response); }));}
    void SetMessageAllocatorFor_CreatePlayer(
        ::grpc::MessageAllocator< ::loginpb::CreatePlayerRequest, ::loginpb::CreatePlayerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::loginpb::CreatePlayerRequest, ::loginpb::CreatePlayerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreatePlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePlayer(::grpc::ServerContext* /*context*/, const ::loginpb::CreatePlayerRequest* /*request*/, ::loginpb::CreatePlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreatePlayer(
      ::grpc::CallbackServerContext* /*context*/, const ::loginpb::CreatePlayerRequest* /*request*/, ::loginpb::CreatePlayerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EnterGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EnterGame() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::loginpb::EnterGameRequest, ::loginpb::EnterGameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::loginpb::EnterGameRequest* request, ::loginpb::EnterGameResponse* response) { return this->EnterGame(context, request, response); }));}
    void SetMessageAllocatorFor_EnterGame(
        ::grpc::MessageAllocator< ::loginpb::EnterGameRequest, ::loginpb::EnterGameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::loginpb::EnterGameRequest, ::loginpb::EnterGameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EnterGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnterGame(::grpc::ServerContext* /*context*/, const ::loginpb::EnterGameRequest* /*request*/, ::loginpb::EnterGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EnterGame(
      ::grpc::CallbackServerContext* /*context*/, const ::loginpb::EnterGameRequest* /*request*/, ::loginpb::EnterGameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LeaveGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LeaveGame() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::loginpb::LeaveGameRequest, ::loginpb::LoginEmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::loginpb::LeaveGameRequest* request, ::loginpb::LoginEmptyResponse* response) { return this->LeaveGame(context, request, response); }));}
    void SetMessageAllocatorFor_LeaveGame(
        ::grpc::MessageAllocator< ::loginpb::LeaveGameRequest, ::loginpb::LoginEmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::loginpb::LeaveGameRequest, ::loginpb::LoginEmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LeaveGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveGame(::grpc::ServerContext* /*context*/, const ::loginpb::LeaveGameRequest* /*request*/, ::loginpb::LoginEmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LeaveGame(
      ::grpc::CallbackServerContext* /*context*/, const ::loginpb::LeaveGameRequest* /*request*/, ::loginpb::LoginEmptyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Disconnect() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::loginpb::LoginNodeDisconnectRequest, ::loginpb::LoginEmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::loginpb::LoginNodeDisconnectRequest* request, ::loginpb::LoginEmptyResponse* response) { return this->Disconnect(context, request, response); }));}
    void SetMessageAllocatorFor_Disconnect(
        ::grpc::MessageAllocator< ::loginpb::LoginNodeDisconnectRequest, ::loginpb::LoginEmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::loginpb::LoginNodeDisconnectRequest, ::loginpb::LoginEmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::loginpb::LoginNodeDisconnectRequest* /*request*/, ::loginpb::LoginEmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Disconnect(
      ::grpc::CallbackServerContext* /*context*/, const ::loginpb::LoginNodeDisconnectRequest* /*request*/, ::loginpb::LoginEmptyResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Login<WithCallbackMethod_CreatePlayer<WithCallbackMethod_EnterGame<WithCallbackMethod_LeaveGame<WithCallbackMethod_Disconnect<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::loginpb::LoginRequest* /*request*/, ::loginpb::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreatePlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreatePlayer() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreatePlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePlayer(::grpc::ServerContext* /*context*/, const ::loginpb::CreatePlayerRequest* /*request*/, ::loginpb::CreatePlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EnterGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EnterGame() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_EnterGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnterGame(::grpc::ServerContext* /*context*/, const ::loginpb::EnterGameRequest* /*request*/, ::loginpb::EnterGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LeaveGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LeaveGame() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_LeaveGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveGame(::grpc::ServerContext* /*context*/, const ::loginpb::LeaveGameRequest* /*request*/, ::loginpb::LoginEmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Disconnect() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::loginpb::LoginNodeDisconnectRequest* /*request*/, ::loginpb::LoginEmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::loginpb::LoginRequest* /*request*/, ::loginpb::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreatePlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreatePlayer() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreatePlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePlayer(::grpc::ServerContext* /*context*/, const ::loginpb::CreatePlayerRequest* /*request*/, ::loginpb::CreatePlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePlayer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EnterGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EnterGame() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_EnterGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnterGame(::grpc::ServerContext* /*context*/, const ::loginpb::EnterGameRequest* /*request*/, ::loginpb::EnterGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnterGame(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LeaveGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LeaveGame() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_LeaveGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveGame(::grpc::ServerContext* /*context*/, const ::loginpb::LeaveGameRequest* /*request*/, ::loginpb::LoginEmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeaveGame(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Disconnect() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::loginpb::LoginNodeDisconnectRequest* /*request*/, ::loginpb::LoginEmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisconnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Login() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~WithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::loginpb::LoginRequest* /*request*/, ::loginpb::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreatePlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreatePlayer() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreatePlayer(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreatePlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePlayer(::grpc::ServerContext* /*context*/, const ::loginpb::CreatePlayerRequest* /*request*/, ::loginpb::CreatePlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreatePlayer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EnterGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EnterGame() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EnterGame(context, request, response); }));
    }
    ~WithRawCallbackMethod_EnterGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnterGame(::grpc::ServerContext* /*context*/, const ::loginpb::EnterGameRequest* /*request*/, ::loginpb::EnterGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EnterGame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LeaveGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LeaveGame() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LeaveGame(context, request, response); }));
    }
    ~WithRawCallbackMethod_LeaveGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveGame(::grpc::ServerContext* /*context*/, const ::loginpb::LeaveGameRequest* /*request*/, ::loginpb::LoginEmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LeaveGame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Disconnect() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Disconnect(context, request, response); }));
    }
    ~WithRawCallbackMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::loginpb::LoginNodeDisconnectRequest* /*request*/, ::loginpb::LoginEmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Disconnect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::loginpb::LoginRequest, ::loginpb::LoginResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::loginpb::LoginRequest, ::loginpb::LoginResponse>* streamer) {
                       return this->StreamedLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::loginpb::LoginRequest* /*request*/, ::loginpb::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::loginpb::LoginRequest,::loginpb::LoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreatePlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreatePlayer() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::loginpb::CreatePlayerRequest, ::loginpb::CreatePlayerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::loginpb::CreatePlayerRequest, ::loginpb::CreatePlayerResponse>* streamer) {
                       return this->StreamedCreatePlayer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreatePlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreatePlayer(::grpc::ServerContext* /*context*/, const ::loginpb::CreatePlayerRequest* /*request*/, ::loginpb::CreatePlayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreatePlayer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::loginpb::CreatePlayerRequest,::loginpb::CreatePlayerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EnterGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EnterGame() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::loginpb::EnterGameRequest, ::loginpb::EnterGameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::loginpb::EnterGameRequest, ::loginpb::EnterGameResponse>* streamer) {
                       return this->StreamedEnterGame(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EnterGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EnterGame(::grpc::ServerContext* /*context*/, const ::loginpb::EnterGameRequest* /*request*/, ::loginpb::EnterGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEnterGame(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::loginpb::EnterGameRequest,::loginpb::EnterGameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LeaveGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LeaveGame() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::loginpb::LeaveGameRequest, ::loginpb::LoginEmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::loginpb::LeaveGameRequest, ::loginpb::LoginEmptyResponse>* streamer) {
                       return this->StreamedLeaveGame(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LeaveGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LeaveGame(::grpc::ServerContext* /*context*/, const ::loginpb::LeaveGameRequest* /*request*/, ::loginpb::LoginEmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLeaveGame(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::loginpb::LeaveGameRequest,::loginpb::LoginEmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Disconnect() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::loginpb::LoginNodeDisconnectRequest, ::loginpb::LoginEmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::loginpb::LoginNodeDisconnectRequest, ::loginpb::LoginEmptyResponse>* streamer) {
                       return this->StreamedDisconnect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::loginpb::LoginNodeDisconnectRequest* /*request*/, ::loginpb::LoginEmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDisconnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::loginpb::LoginNodeDisconnectRequest,::loginpb::LoginEmptyResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_CreatePlayer<WithStreamedUnaryMethod_EnterGame<WithStreamedUnaryMethod_LeaveGame<WithStreamedUnaryMethod_Disconnect<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_CreatePlayer<WithStreamedUnaryMethod_EnterGame<WithStreamedUnaryMethod_LeaveGame<WithStreamedUnaryMethod_Disconnect<Service > > > > > StreamedService;
};

}  // namespace loginpb


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_proto_2fservice_2fgo_2fgrpc_2flogin_2flogin_2eproto__INCLUDED
