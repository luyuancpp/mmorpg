// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/service/go/grpc/login/login.proto

#include "proto/service/go/grpc/login/login.pb.h"
#include "proto/service/go/grpc/login/login.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace loginpb {

static const char* ClientPlayerLogin_method_names[] = {
  "/loginpb.ClientPlayerLogin/Login",
  "/loginpb.ClientPlayerLogin/CreatePlayer",
  "/loginpb.ClientPlayerLogin/EnterGame",
  "/loginpb.ClientPlayerLogin/LeaveGame",
  "/loginpb.ClientPlayerLogin/Disconnect",
};

std::unique_ptr< ClientPlayerLogin::Stub> ClientPlayerLogin::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClientPlayerLogin::Stub> stub(new ClientPlayerLogin::Stub(channel, options));
  return stub;
}

ClientPlayerLogin::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Login_(ClientPlayerLogin_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreatePlayer_(ClientPlayerLogin_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EnterGame_(ClientPlayerLogin_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LeaveGame_(ClientPlayerLogin_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Disconnect_(ClientPlayerLogin_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClientPlayerLogin::Stub::Login(::grpc::ClientContext* context, const ::loginpb::LoginRequest& request, ::loginpb::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::loginpb::LoginRequest, ::loginpb::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void ClientPlayerLogin::Stub::async::Login(::grpc::ClientContext* context, const ::loginpb::LoginRequest* request, ::loginpb::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::loginpb::LoginRequest, ::loginpb::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void ClientPlayerLogin::Stub::async::Login(::grpc::ClientContext* context, const ::loginpb::LoginRequest* request, ::loginpb::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::loginpb::LoginResponse>* ClientPlayerLogin::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::loginpb::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::loginpb::LoginResponse, ::loginpb::LoginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::loginpb::LoginResponse>* ClientPlayerLogin::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::loginpb::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientPlayerLogin::Stub::CreatePlayer(::grpc::ClientContext* context, const ::loginpb::CreatePlayerRequest& request, ::loginpb::CreatePlayerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::loginpb::CreatePlayerRequest, ::loginpb::CreatePlayerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreatePlayer_, context, request, response);
}

void ClientPlayerLogin::Stub::async::CreatePlayer(::grpc::ClientContext* context, const ::loginpb::CreatePlayerRequest* request, ::loginpb::CreatePlayerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::loginpb::CreatePlayerRequest, ::loginpb::CreatePlayerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreatePlayer_, context, request, response, std::move(f));
}

void ClientPlayerLogin::Stub::async::CreatePlayer(::grpc::ClientContext* context, const ::loginpb::CreatePlayerRequest* request, ::loginpb::CreatePlayerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreatePlayer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::loginpb::CreatePlayerResponse>* ClientPlayerLogin::Stub::PrepareAsyncCreatePlayerRaw(::grpc::ClientContext* context, const ::loginpb::CreatePlayerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::loginpb::CreatePlayerResponse, ::loginpb::CreatePlayerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreatePlayer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::loginpb::CreatePlayerResponse>* ClientPlayerLogin::Stub::AsyncCreatePlayerRaw(::grpc::ClientContext* context, const ::loginpb::CreatePlayerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreatePlayerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientPlayerLogin::Stub::EnterGame(::grpc::ClientContext* context, const ::loginpb::EnterGameRequest& request, ::loginpb::EnterGameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::loginpb::EnterGameRequest, ::loginpb::EnterGameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EnterGame_, context, request, response);
}

void ClientPlayerLogin::Stub::async::EnterGame(::grpc::ClientContext* context, const ::loginpb::EnterGameRequest* request, ::loginpb::EnterGameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::loginpb::EnterGameRequest, ::loginpb::EnterGameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnterGame_, context, request, response, std::move(f));
}

void ClientPlayerLogin::Stub::async::EnterGame(::grpc::ClientContext* context, const ::loginpb::EnterGameRequest* request, ::loginpb::EnterGameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnterGame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::loginpb::EnterGameResponse>* ClientPlayerLogin::Stub::PrepareAsyncEnterGameRaw(::grpc::ClientContext* context, const ::loginpb::EnterGameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::loginpb::EnterGameResponse, ::loginpb::EnterGameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EnterGame_, context, request);
}

::grpc::ClientAsyncResponseReader< ::loginpb::EnterGameResponse>* ClientPlayerLogin::Stub::AsyncEnterGameRaw(::grpc::ClientContext* context, const ::loginpb::EnterGameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnterGameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientPlayerLogin::Stub::LeaveGame(::grpc::ClientContext* context, const ::loginpb::LeaveGameRequest& request, ::loginpb::LoginEmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::loginpb::LeaveGameRequest, ::loginpb::LoginEmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LeaveGame_, context, request, response);
}

void ClientPlayerLogin::Stub::async::LeaveGame(::grpc::ClientContext* context, const ::loginpb::LeaveGameRequest* request, ::loginpb::LoginEmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::loginpb::LeaveGameRequest, ::loginpb::LoginEmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LeaveGame_, context, request, response, std::move(f));
}

void ClientPlayerLogin::Stub::async::LeaveGame(::grpc::ClientContext* context, const ::loginpb::LeaveGameRequest* request, ::loginpb::LoginEmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LeaveGame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::loginpb::LoginEmptyResponse>* ClientPlayerLogin::Stub::PrepareAsyncLeaveGameRaw(::grpc::ClientContext* context, const ::loginpb::LeaveGameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::loginpb::LoginEmptyResponse, ::loginpb::LeaveGameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LeaveGame_, context, request);
}

::grpc::ClientAsyncResponseReader< ::loginpb::LoginEmptyResponse>* ClientPlayerLogin::Stub::AsyncLeaveGameRaw(::grpc::ClientContext* context, const ::loginpb::LeaveGameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLeaveGameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClientPlayerLogin::Stub::Disconnect(::grpc::ClientContext* context, const ::loginpb::LoginNodeDisconnectRequest& request, ::loginpb::LoginEmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::loginpb::LoginNodeDisconnectRequest, ::loginpb::LoginEmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Disconnect_, context, request, response);
}

void ClientPlayerLogin::Stub::async::Disconnect(::grpc::ClientContext* context, const ::loginpb::LoginNodeDisconnectRequest* request, ::loginpb::LoginEmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::loginpb::LoginNodeDisconnectRequest, ::loginpb::LoginEmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disconnect_, context, request, response, std::move(f));
}

void ClientPlayerLogin::Stub::async::Disconnect(::grpc::ClientContext* context, const ::loginpb::LoginNodeDisconnectRequest* request, ::loginpb::LoginEmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disconnect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::loginpb::LoginEmptyResponse>* ClientPlayerLogin::Stub::PrepareAsyncDisconnectRaw(::grpc::ClientContext* context, const ::loginpb::LoginNodeDisconnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::loginpb::LoginEmptyResponse, ::loginpb::LoginNodeDisconnectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Disconnect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::loginpb::LoginEmptyResponse>* ClientPlayerLogin::Stub::AsyncDisconnectRaw(::grpc::ClientContext* context, const ::loginpb::LoginNodeDisconnectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisconnectRaw(context, request, cq);
  result->StartCall();
  return result;
}

ClientPlayerLogin::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientPlayerLogin_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientPlayerLogin::Service, ::loginpb::LoginRequest, ::loginpb::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientPlayerLogin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::loginpb::LoginRequest* req,
             ::loginpb::LoginResponse* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientPlayerLogin_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientPlayerLogin::Service, ::loginpb::CreatePlayerRequest, ::loginpb::CreatePlayerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientPlayerLogin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::loginpb::CreatePlayerRequest* req,
             ::loginpb::CreatePlayerResponse* resp) {
               return service->CreatePlayer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientPlayerLogin_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientPlayerLogin::Service, ::loginpb::EnterGameRequest, ::loginpb::EnterGameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientPlayerLogin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::loginpb::EnterGameRequest* req,
             ::loginpb::EnterGameResponse* resp) {
               return service->EnterGame(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientPlayerLogin_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientPlayerLogin::Service, ::loginpb::LeaveGameRequest, ::loginpb::LoginEmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientPlayerLogin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::loginpb::LeaveGameRequest* req,
             ::loginpb::LoginEmptyResponse* resp) {
               return service->LeaveGame(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientPlayerLogin_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientPlayerLogin::Service, ::loginpb::LoginNodeDisconnectRequest, ::loginpb::LoginEmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClientPlayerLogin::Service* service,
             ::grpc::ServerContext* ctx,
             const ::loginpb::LoginNodeDisconnectRequest* req,
             ::loginpb::LoginEmptyResponse* resp) {
               return service->Disconnect(ctx, req, resp);
             }, this)));
}

ClientPlayerLogin::Service::~Service() {
}

::grpc::Status ClientPlayerLogin::Service::Login(::grpc::ServerContext* context, const ::loginpb::LoginRequest* request, ::loginpb::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientPlayerLogin::Service::CreatePlayer(::grpc::ServerContext* context, const ::loginpb::CreatePlayerRequest* request, ::loginpb::CreatePlayerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientPlayerLogin::Service::EnterGame(::grpc::ServerContext* context, const ::loginpb::EnterGameRequest* request, ::loginpb::EnterGameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientPlayerLogin::Service::LeaveGame(::grpc::ServerContext* context, const ::loginpb::LeaveGameRequest* request, ::loginpb::LoginEmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientPlayerLogin::Service::Disconnect(::grpc::ServerContext* context, const ::loginpb::LoginNodeDisconnectRequest* request, ::loginpb::LoginEmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace loginpb

