// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/service/go/grpc/player_locator/player_locator.proto

#include "proto/service/go/grpc/player_locator/player_locator.pb.h"
#include "proto/service/go/grpc/player_locator/player_locator.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace playerlocator {

static const char* PlayerLocator_method_names[] = {
  "/playerlocator.PlayerLocator/SetLocation",
  "/playerlocator.PlayerLocator/GetLocation",
  "/playerlocator.PlayerLocator/MarkOffline",
};

std::unique_ptr< PlayerLocator::Stub> PlayerLocator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PlayerLocator::Stub> stub(new PlayerLocator::Stub(channel, options));
  return stub;
}

PlayerLocator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetLocation_(PlayerLocator_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLocation_(PlayerLocator_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarkOffline_(PlayerLocator_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PlayerLocator::Stub::SetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerLocation& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::playerlocator::PlayerLocation, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetLocation_, context, request, response);
}

void PlayerLocator::Stub::async::SetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerLocation* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::playerlocator::PlayerLocation, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLocation_, context, request, response, std::move(f));
}

void PlayerLocator::Stub::async::SetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerLocation* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* PlayerLocator::Stub::PrepareAsyncSetLocationRaw(::grpc::ClientContext* context, const ::playerlocator::PlayerLocation& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::playerlocator::PlayerLocation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetLocation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* PlayerLocator::Stub::AsyncSetLocationRaw(::grpc::ClientContext* context, const ::playerlocator::PlayerLocation& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetLocationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PlayerLocator::Stub::GetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::playerlocator::PlayerLocation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::playerlocator::PlayerId, ::playerlocator::PlayerLocation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLocation_, context, request, response);
}

void PlayerLocator::Stub::async::GetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerId* request, ::playerlocator::PlayerLocation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::playerlocator::PlayerId, ::playerlocator::PlayerLocation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLocation_, context, request, response, std::move(f));
}

void PlayerLocator::Stub::async::GetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerId* request, ::playerlocator::PlayerLocation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::playerlocator::PlayerLocation>* PlayerLocator::Stub::PrepareAsyncGetLocationRaw(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::playerlocator::PlayerLocation, ::playerlocator::PlayerId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLocation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::playerlocator::PlayerLocation>* PlayerLocator::Stub::AsyncGetLocationRaw(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLocationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PlayerLocator::Stub::MarkOffline(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::playerlocator::PlayerId, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MarkOffline_, context, request, response);
}

void PlayerLocator::Stub::async::MarkOffline(::grpc::ClientContext* context, const ::playerlocator::PlayerId* request, ::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::playerlocator::PlayerId, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarkOffline_, context, request, response, std::move(f));
}

void PlayerLocator::Stub::async::MarkOffline(::grpc::ClientContext* context, const ::playerlocator::PlayerId* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarkOffline_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Empty>* PlayerLocator::Stub::PrepareAsyncMarkOfflineRaw(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Empty, ::playerlocator::PlayerId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MarkOffline_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Empty>* PlayerLocator::Stub::AsyncMarkOfflineRaw(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarkOfflineRaw(context, request, cq);
  result->StartCall();
  return result;
}

PlayerLocator::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerLocator_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerLocator::Service, ::playerlocator::PlayerLocation, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PlayerLocator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::playerlocator::PlayerLocation* req,
             ::Empty* resp) {
               return service->SetLocation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerLocator_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerLocator::Service, ::playerlocator::PlayerId, ::playerlocator::PlayerLocation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PlayerLocator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::playerlocator::PlayerId* req,
             ::playerlocator::PlayerLocation* resp) {
               return service->GetLocation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerLocator_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerLocator::Service, ::playerlocator::PlayerId, ::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PlayerLocator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::playerlocator::PlayerId* req,
             ::Empty* resp) {
               return service->MarkOffline(ctx, req, resp);
             }, this)));
}

PlayerLocator::Service::~Service() {
}

::grpc::Status PlayerLocator::Service::SetLocation(::grpc::ServerContext* context, const ::playerlocator::PlayerLocation* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlayerLocator::Service::GetLocation(::grpc::ServerContext* context, const ::playerlocator::PlayerId* request, ::playerlocator::PlayerLocation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlayerLocator::Service::MarkOffline(::grpc::ServerContext* context, const ::playerlocator::PlayerId* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace playerlocator

