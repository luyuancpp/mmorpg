// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/centre/centre_player.proto
// Protobuf C++ Version: 5.29.0

#ifndef proto_2fcentre_2fcentre_5fplayer_2eproto_2epb_2eh
#define proto_2fcentre_2fcentre_5fplayer_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/service.h"
#include "google/protobuf/unknown_field_set.h"
#include "proto/common/tip.pb.h"
#include "proto/common/empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fcentre_2fcentre_5fplayer_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fcentre_2fcentre_5fplayer_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proto_2fcentre_2fcentre_5fplayer_2eproto;
class CentreKickPlayerRequest;
struct CentreKickPlayerRequestDefaultTypeInternal;
extern CentreKickPlayerRequestDefaultTypeInternal _CentreKickPlayerRequest_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class CentreKickPlayerRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CentreKickPlayerRequest) */ {
 public:
  inline CentreKickPlayerRequest() : CentreKickPlayerRequest(nullptr) {}
  ~CentreKickPlayerRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CentreKickPlayerRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CentreKickPlayerRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CentreKickPlayerRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CentreKickPlayerRequest(const CentreKickPlayerRequest& from) : CentreKickPlayerRequest(nullptr, from) {}
  inline CentreKickPlayerRequest(CentreKickPlayerRequest&& from) noexcept
      : CentreKickPlayerRequest(nullptr, std::move(from)) {}
  inline CentreKickPlayerRequest& operator=(const CentreKickPlayerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CentreKickPlayerRequest& operator=(CentreKickPlayerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CentreKickPlayerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CentreKickPlayerRequest* internal_default_instance() {
    return reinterpret_cast<const CentreKickPlayerRequest*>(
        &_CentreKickPlayerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(CentreKickPlayerRequest& a, CentreKickPlayerRequest& b) { a.Swap(&b); }
  inline void Swap(CentreKickPlayerRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CentreKickPlayerRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CentreKickPlayerRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CentreKickPlayerRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CentreKickPlayerRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CentreKickPlayerRequest& from) { CentreKickPlayerRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CentreKickPlayerRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CentreKickPlayerRequest"; }

 protected:
  explicit CentreKickPlayerRequest(::google::protobuf::Arena* arena);
  CentreKickPlayerRequest(::google::protobuf::Arena* arena, const CentreKickPlayerRequest& from);
  CentreKickPlayerRequest(::google::protobuf::Arena* arena, CentreKickPlayerRequest&& from) noexcept
      : CentreKickPlayerRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOperatorFieldNumber = 2,
    kReasonFieldNumber = 1,
  };
  // string operator = 2;
  void clear_operator_() ;
  const std::string& operator_() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_operator_(Arg_&& arg, Args_... args);
  std::string* mutable_operator_();
  PROTOBUF_NODISCARD std::string* release_operator_();
  void set_allocated_operator_(std::string* value);

  private:
  const std::string& _internal_operator_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operator_(
      const std::string& value);
  std::string* _internal_mutable_operator_();

  public:
  // .TipInfoMessage reason = 1;
  bool has_reason() const;
  void clear_reason() ;
  const ::TipInfoMessage& reason() const;
  PROTOBUF_NODISCARD ::TipInfoMessage* release_reason();
  ::TipInfoMessage* mutable_reason();
  void set_allocated_reason(::TipInfoMessage* value);
  void unsafe_arena_set_allocated_reason(::TipInfoMessage* value);
  ::TipInfoMessage* unsafe_arena_release_reason();

  private:
  const ::TipInfoMessage& _internal_reason() const;
  ::TipInfoMessage* _internal_mutable_reason();

  public:
  // @@protoc_insertion_point(class_scope:CentreKickPlayerRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CentreKickPlayerRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr operator__;
    ::TipInfoMessage* reason_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fcentre_2fcentre_5fplayer_2eproto;
};

// ===================================================================


// -------------------------------------------------------------------

class CentrePlayerUtility_Stub;
class CentrePlayerUtility : public ::google::protobuf::Service {
 protected:
  CentrePlayerUtility() = default;

 public:
  using Stub = CentrePlayerUtility_Stub;

  CentrePlayerUtility(const CentrePlayerUtility&) = delete;
  CentrePlayerUtility& operator=(const CentrePlayerUtility&) = delete;
  virtual ~CentrePlayerUtility() = default;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void SendTipToClient(::google::protobuf::RpcController* controller,
                        const ::TipInfoMessage* request,
                        ::Empty* response,
                        ::google::protobuf::Closure* done);
  virtual void KickPlayer(::google::protobuf::RpcController* controller,
                        const ::CentreKickPlayerRequest* request,
                        ::Empty* response,
                        ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------
  const ::google::protobuf::ServiceDescriptor* GetDescriptor() override;

  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done) override;

  const ::google::protobuf::Message& GetRequestPrototype(
      const ::google::protobuf::MethodDescriptor* method) const override;

  const ::google::protobuf::Message& GetResponsePrototype(
      const ::google::protobuf::MethodDescriptor* method) const override;
};

class CentrePlayerUtility_Stub final : public CentrePlayerUtility {
 public:
  CentrePlayerUtility_Stub(::google::protobuf::RpcChannel* channel);
  CentrePlayerUtility_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);

  CentrePlayerUtility_Stub(const CentrePlayerUtility_Stub&) = delete;
  CentrePlayerUtility_Stub& operator=(const CentrePlayerUtility_Stub&) = delete;

  ~CentrePlayerUtility_Stub() override;

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements CentrePlayerUtility ------------------------------------------
  void SendTipToClient(::google::protobuf::RpcController* controller,
                        const ::TipInfoMessage* request,
                        ::Empty* response,
                        ::google::protobuf::Closure* done) override;
  void KickPlayer(::google::protobuf::RpcController* controller,
                        const ::CentreKickPlayerRequest* request,
                        ::Empty* response,
                        ::google::protobuf::Closure* done) override;

 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
};
// ===================================================================



// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CentreKickPlayerRequest

// .TipInfoMessage reason = 1;
inline bool CentreKickPlayerRequest::has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reason_ != nullptr);
  return value;
}
inline const ::TipInfoMessage& CentreKickPlayerRequest::_internal_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::TipInfoMessage* p = _impl_.reason_;
  return p != nullptr ? *p : reinterpret_cast<const ::TipInfoMessage&>(::_TipInfoMessage_default_instance_);
}
inline const ::TipInfoMessage& CentreKickPlayerRequest::reason() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CentreKickPlayerRequest.reason)
  return _internal_reason();
}
inline void CentreKickPlayerRequest::unsafe_arena_set_allocated_reason(::TipInfoMessage* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reason_);
  }
  _impl_.reason_ = reinterpret_cast<::TipInfoMessage*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CentreKickPlayerRequest.reason)
}
inline ::TipInfoMessage* CentreKickPlayerRequest::release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TipInfoMessage* released = _impl_.reason_;
  _impl_.reason_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::TipInfoMessage* CentreKickPlayerRequest::unsafe_arena_release_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CentreKickPlayerRequest.reason)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TipInfoMessage* temp = _impl_.reason_;
  _impl_.reason_ = nullptr;
  return temp;
}
inline ::TipInfoMessage* CentreKickPlayerRequest::_internal_mutable_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.reason_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::TipInfoMessage>(GetArena());
    _impl_.reason_ = reinterpret_cast<::TipInfoMessage*>(p);
  }
  return _impl_.reason_;
}
inline ::TipInfoMessage* CentreKickPlayerRequest::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::TipInfoMessage* _msg = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:CentreKickPlayerRequest.reason)
  return _msg;
}
inline void CentreKickPlayerRequest::set_allocated_reason(::TipInfoMessage* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.reason_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.reason_ = reinterpret_cast<::TipInfoMessage*>(value);
  // @@protoc_insertion_point(field_set_allocated:CentreKickPlayerRequest.reason)
}

// string operator = 2;
inline void CentreKickPlayerRequest::clear_operator_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operator__.ClearToEmpty();
}
inline const std::string& CentreKickPlayerRequest::operator_() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CentreKickPlayerRequest.operator)
  return _internal_operator_();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CentreKickPlayerRequest::set_operator_(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operator__.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CentreKickPlayerRequest.operator)
}
inline std::string* CentreKickPlayerRequest::mutable_operator_() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_operator_();
  // @@protoc_insertion_point(field_mutable:CentreKickPlayerRequest.operator)
  return _s;
}
inline const std::string& CentreKickPlayerRequest::_internal_operator_() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.operator__.Get();
}
inline void CentreKickPlayerRequest::_internal_set_operator_(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operator__.Set(value, GetArena());
}
inline std::string* CentreKickPlayerRequest::_internal_mutable_operator_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.operator__.Mutable( GetArena());
}
inline std::string* CentreKickPlayerRequest::release_operator_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CentreKickPlayerRequest.operator)
  return _impl_.operator__.Release();
}
inline void CentreKickPlayerRequest::set_allocated_operator_(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.operator__.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.operator__.IsDefault()) {
    _impl_.operator__.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CentreKickPlayerRequest.operator)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // proto_2fcentre_2fcentre_5fplayer_2eproto_2epb_2eh
