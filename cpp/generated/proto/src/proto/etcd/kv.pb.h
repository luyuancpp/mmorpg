// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/etcd/kv.proto
// Protobuf C++ Version: 5.29.0

#ifndef proto_2fetcd_2fkv_2eproto_2epb_2eh
#define proto_2fetcd_2fkv_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "proto/etcd/version.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fetcd_2fkv_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fetcd_2fkv_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proto_2fetcd_2fkv_2eproto;
namespace mvccpb {
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class KeyValue;
struct KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
}  // namespace mvccpb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace mvccpb {
enum Event_EventType : int {
  Event_EventType_PUT = 0,
  Event_EventType_DELETE = 1,
  Event_EventType_Event_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Event_EventType_Event_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Event_EventType_IsValid(int value);
extern const uint32_t Event_EventType_internal_data_[];
constexpr Event_EventType Event_EventType_EventType_MIN = static_cast<Event_EventType>(0);
constexpr Event_EventType Event_EventType_EventType_MAX = static_cast<Event_EventType>(1);
constexpr int Event_EventType_EventType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
Event_EventType_descriptor();
template <typename T>
const std::string& Event_EventType_Name(T value) {
  static_assert(std::is_same<T, Event_EventType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EventType_Name().");
  return Event_EventType_Name(static_cast<Event_EventType>(value));
}
template <>
inline const std::string& Event_EventType_Name(Event_EventType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Event_EventType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Event_EventType_Parse(absl::string_view name, Event_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Event_EventType>(
      Event_EventType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class KeyValue final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mvccpb.KeyValue) */ {
 public:
  inline KeyValue() : KeyValue(nullptr) {}
  ~KeyValue() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(KeyValue* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(KeyValue));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR KeyValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline KeyValue(const KeyValue& from) : KeyValue(nullptr, from) {}
  inline KeyValue(KeyValue&& from) noexcept
      : KeyValue(nullptr, std::move(from)) {}
  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
        &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(KeyValue& a, KeyValue& b) { a.Swap(&b); }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyValue* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<KeyValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const KeyValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const KeyValue& from) { KeyValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(KeyValue* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mvccpb.KeyValue"; }

 protected:
  explicit KeyValue(::google::protobuf::Arena* arena);
  KeyValue(::google::protobuf::Arena* arena, const KeyValue& from);
  KeyValue(::google::protobuf::Arena* arena, KeyValue&& from) noexcept
      : KeyValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 5,
    kCreateRevisionFieldNumber = 2,
    kModRevisionFieldNumber = 3,
    kVersionFieldNumber = 4,
    kLeaseFieldNumber = 6,
  };
  // bytes key = 1;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // bytes value = 5;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // int64 create_revision = 2;
  void clear_create_revision() ;
  ::int64_t create_revision() const;
  void set_create_revision(::int64_t value);

  private:
  ::int64_t _internal_create_revision() const;
  void _internal_set_create_revision(::int64_t value);

  public:
  // int64 mod_revision = 3;
  void clear_mod_revision() ;
  ::int64_t mod_revision() const;
  void set_mod_revision(::int64_t value);

  private:
  ::int64_t _internal_mod_revision() const;
  void _internal_set_mod_revision(::int64_t value);

  public:
  // int64 version = 4;
  void clear_version() ;
  ::int64_t version() const;
  void set_version(::int64_t value);

  private:
  ::int64_t _internal_version() const;
  void _internal_set_version(::int64_t value);

  public:
  // int64 lease = 6;
  void clear_lease() ;
  ::int64_t lease() const;
  void set_lease(::int64_t value);

  private:
  ::int64_t _internal_lease() const;
  void _internal_set_lease(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:mvccpb.KeyValue)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const KeyValue& from_msg);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::int64_t create_revision_;
    ::int64_t mod_revision_;
    ::int64_t version_;
    ::int64_t lease_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fetcd_2fkv_2eproto;
};
// -------------------------------------------------------------------

class Event final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mvccpb.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Event* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Event));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Event(
      ::google::protobuf::internal::ConstantInitialized);

  inline Event(const Event& from) : Event(nullptr, from) {}
  inline Event(Event&& from) noexcept
      : Event(nullptr, std::move(from)) {}
  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
        &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Event& a, Event& b) { a.Swap(&b); }
  inline void Swap(Event* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Event>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Event& from) { Event::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Event* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "mvccpb.Event"; }

 protected:
  explicit Event(::google::protobuf::Arena* arena);
  Event(::google::protobuf::Arena* arena, const Event& from);
  Event(::google::protobuf::Arena* arena, Event&& from) noexcept
      : Event(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using EventType = Event_EventType;
  static constexpr EventType PUT = Event_EventType_PUT;
  static constexpr EventType DELETE = Event_EventType_DELETE;
  static inline bool EventType_IsValid(int value) {
    return Event_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN = Event_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX = Event_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE = Event_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* EventType_descriptor() {
    return Event_EventType_descriptor();
  }
  template <typename T>
  static inline const std::string& EventType_Name(T value) {
    return Event_EventType_Name(value);
  }
  static inline bool EventType_Parse(absl::string_view name, EventType* value) {
    return Event_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kKvFieldNumber = 2,
    kPrevKvFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // .mvccpb.KeyValue kv = 2;
  bool has_kv() const;
  void clear_kv() ;
  const ::mvccpb::KeyValue& kv() const;
  PROTOBUF_NODISCARD ::mvccpb::KeyValue* release_kv();
  ::mvccpb::KeyValue* mutable_kv();
  void set_allocated_kv(::mvccpb::KeyValue* value);
  void unsafe_arena_set_allocated_kv(::mvccpb::KeyValue* value);
  ::mvccpb::KeyValue* unsafe_arena_release_kv();

  private:
  const ::mvccpb::KeyValue& _internal_kv() const;
  ::mvccpb::KeyValue* _internal_mutable_kv();

  public:
  // .mvccpb.KeyValue prev_kv = 3;
  bool has_prev_kv() const;
  void clear_prev_kv() ;
  const ::mvccpb::KeyValue& prev_kv() const;
  PROTOBUF_NODISCARD ::mvccpb::KeyValue* release_prev_kv();
  ::mvccpb::KeyValue* mutable_prev_kv();
  void set_allocated_prev_kv(::mvccpb::KeyValue* value);
  void unsafe_arena_set_allocated_prev_kv(::mvccpb::KeyValue* value);
  ::mvccpb::KeyValue* unsafe_arena_release_prev_kv();

  private:
  const ::mvccpb::KeyValue& _internal_prev_kv() const;
  ::mvccpb::KeyValue* _internal_mutable_prev_kv();

  public:
  // .mvccpb.Event.EventType type = 1;
  void clear_type() ;
  ::mvccpb::Event_EventType type() const;
  void set_type(::mvccpb::Event_EventType value);

  private:
  ::mvccpb::Event_EventType _internal_type() const;
  void _internal_set_type(::mvccpb::Event_EventType value);

  public:
  // @@protoc_insertion_point(class_scope:mvccpb.Event)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Event& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::mvccpb::KeyValue* kv_;
    ::mvccpb::KeyValue* prev_kv_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fetcd_2fkv_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// KeyValue

// bytes key = 1;
inline void KeyValue::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& KeyValue::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mvccpb.KeyValue.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KeyValue::set_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mvccpb.KeyValue.key)
}
inline std::string* KeyValue::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:mvccpb.KeyValue.key)
  return _s;
}
inline const std::string& KeyValue::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_.Get();
}
inline void KeyValue::_internal_set_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* KeyValue::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* KeyValue::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mvccpb.KeyValue.key)
  return _impl_.key_.Release();
}
inline void KeyValue::set_allocated_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mvccpb.KeyValue.key)
}

// int64 create_revision = 2;
inline void KeyValue::clear_create_revision() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.create_revision_ = ::int64_t{0};
}
inline ::int64_t KeyValue::create_revision() const {
  // @@protoc_insertion_point(field_get:mvccpb.KeyValue.create_revision)
  return _internal_create_revision();
}
inline void KeyValue::set_create_revision(::int64_t value) {
  _internal_set_create_revision(value);
  // @@protoc_insertion_point(field_set:mvccpb.KeyValue.create_revision)
}
inline ::int64_t KeyValue::_internal_create_revision() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.create_revision_;
}
inline void KeyValue::_internal_set_create_revision(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.create_revision_ = value;
}

// int64 mod_revision = 3;
inline void KeyValue::clear_mod_revision() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mod_revision_ = ::int64_t{0};
}
inline ::int64_t KeyValue::mod_revision() const {
  // @@protoc_insertion_point(field_get:mvccpb.KeyValue.mod_revision)
  return _internal_mod_revision();
}
inline void KeyValue::set_mod_revision(::int64_t value) {
  _internal_set_mod_revision(value);
  // @@protoc_insertion_point(field_set:mvccpb.KeyValue.mod_revision)
}
inline ::int64_t KeyValue::_internal_mod_revision() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mod_revision_;
}
inline void KeyValue::_internal_set_mod_revision(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mod_revision_ = value;
}

// int64 version = 4;
inline void KeyValue::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = ::int64_t{0};
}
inline ::int64_t KeyValue::version() const {
  // @@protoc_insertion_point(field_get:mvccpb.KeyValue.version)
  return _internal_version();
}
inline void KeyValue::set_version(::int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:mvccpb.KeyValue.version)
}
inline ::int64_t KeyValue::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_;
}
inline void KeyValue::_internal_set_version(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = value;
}

// bytes value = 5;
inline void KeyValue::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& KeyValue::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mvccpb.KeyValue.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KeyValue::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mvccpb.KeyValue.value)
}
inline std::string* KeyValue::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:mvccpb.KeyValue.value)
  return _s;
}
inline const std::string& KeyValue::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void KeyValue::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* KeyValue::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* KeyValue::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mvccpb.KeyValue.value)
  return _impl_.value_.Release();
}
inline void KeyValue::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mvccpb.KeyValue.value)
}

// int64 lease = 6;
inline void KeyValue::clear_lease() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lease_ = ::int64_t{0};
}
inline ::int64_t KeyValue::lease() const {
  // @@protoc_insertion_point(field_get:mvccpb.KeyValue.lease)
  return _internal_lease();
}
inline void KeyValue::set_lease(::int64_t value) {
  _internal_set_lease(value);
  // @@protoc_insertion_point(field_set:mvccpb.KeyValue.lease)
}
inline ::int64_t KeyValue::_internal_lease() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.lease_;
}
inline void KeyValue::_internal_set_lease(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.lease_ = value;
}

// -------------------------------------------------------------------

// Event

// .mvccpb.Event.EventType type = 1;
inline void Event::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::mvccpb::Event_EventType Event::type() const {
  // @@protoc_insertion_point(field_get:mvccpb.Event.type)
  return _internal_type();
}
inline void Event::set_type(::mvccpb::Event_EventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mvccpb.Event.type)
}
inline ::mvccpb::Event_EventType Event::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mvccpb::Event_EventType>(_impl_.type_);
}
inline void Event::_internal_set_type(::mvccpb::Event_EventType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .mvccpb.KeyValue kv = 2;
inline bool Event::has_kv() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kv_ != nullptr);
  return value;
}
inline void Event::clear_kv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kv_ != nullptr) _impl_.kv_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mvccpb::KeyValue& Event::_internal_kv() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mvccpb::KeyValue* p = _impl_.kv_;
  return p != nullptr ? *p : reinterpret_cast<const ::mvccpb::KeyValue&>(::mvccpb::_KeyValue_default_instance_);
}
inline const ::mvccpb::KeyValue& Event::kv() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mvccpb.Event.kv)
  return _internal_kv();
}
inline void Event::unsafe_arena_set_allocated_kv(::mvccpb::KeyValue* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kv_);
  }
  _impl_.kv_ = reinterpret_cast<::mvccpb::KeyValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mvccpb.Event.kv)
}
inline ::mvccpb::KeyValue* Event::release_kv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mvccpb::KeyValue* released = _impl_.kv_;
  _impl_.kv_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mvccpb::KeyValue* Event::unsafe_arena_release_kv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mvccpb.Event.kv)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mvccpb::KeyValue* temp = _impl_.kv_;
  _impl_.kv_ = nullptr;
  return temp;
}
inline ::mvccpb::KeyValue* Event::_internal_mutable_kv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kv_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mvccpb::KeyValue>(GetArena());
    _impl_.kv_ = reinterpret_cast<::mvccpb::KeyValue*>(p);
  }
  return _impl_.kv_;
}
inline ::mvccpb::KeyValue* Event::mutable_kv() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mvccpb::KeyValue* _msg = _internal_mutable_kv();
  // @@protoc_insertion_point(field_mutable:mvccpb.Event.kv)
  return _msg;
}
inline void Event::set_allocated_kv(::mvccpb::KeyValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.kv_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.kv_ = reinterpret_cast<::mvccpb::KeyValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:mvccpb.Event.kv)
}

// .mvccpb.KeyValue prev_kv = 3;
inline bool Event::has_prev_kv() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.prev_kv_ != nullptr);
  return value;
}
inline void Event::clear_prev_kv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.prev_kv_ != nullptr) _impl_.prev_kv_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mvccpb::KeyValue& Event::_internal_prev_kv() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mvccpb::KeyValue* p = _impl_.prev_kv_;
  return p != nullptr ? *p : reinterpret_cast<const ::mvccpb::KeyValue&>(::mvccpb::_KeyValue_default_instance_);
}
inline const ::mvccpb::KeyValue& Event::prev_kv() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mvccpb.Event.prev_kv)
  return _internal_prev_kv();
}
inline void Event::unsafe_arena_set_allocated_prev_kv(::mvccpb::KeyValue* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.prev_kv_);
  }
  _impl_.prev_kv_ = reinterpret_cast<::mvccpb::KeyValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mvccpb.Event.prev_kv)
}
inline ::mvccpb::KeyValue* Event::release_prev_kv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mvccpb::KeyValue* released = _impl_.prev_kv_;
  _impl_.prev_kv_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::mvccpb::KeyValue* Event::unsafe_arena_release_prev_kv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mvccpb.Event.prev_kv)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mvccpb::KeyValue* temp = _impl_.prev_kv_;
  _impl_.prev_kv_ = nullptr;
  return temp;
}
inline ::mvccpb::KeyValue* Event::_internal_mutable_prev_kv() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.prev_kv_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mvccpb::KeyValue>(GetArena());
    _impl_.prev_kv_ = reinterpret_cast<::mvccpb::KeyValue*>(p);
  }
  return _impl_.prev_kv_;
}
inline ::mvccpb::KeyValue* Event::mutable_prev_kv() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::mvccpb::KeyValue* _msg = _internal_mutable_prev_kv();
  // @@protoc_insertion_point(field_mutable:mvccpb.Event.prev_kv)
  return _msg;
}
inline void Event::set_allocated_prev_kv(::mvccpb::KeyValue* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.prev_kv_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.prev_kv_ = reinterpret_cast<::mvccpb::KeyValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:mvccpb.Event.prev_kv)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace mvccpb


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::mvccpb::Event_EventType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mvccpb::Event_EventType>() {
  return ::mvccpb::Event_EventType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // proto_2fetcd_2fkv_2eproto_2epb_2eh
