// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/logic/constants/function_switch.proto
// Protobuf C++ Version: 5.29.0

#ifndef proto_2flogic_2fconstants_2ffunction_5fswitch_2eproto_2epb_2eh
#define proto_2flogic_2fconstants_2ffunction_5fswitch_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2flogic_2fconstants_2ffunction_5fswitch_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2flogic_2fconstants_2ffunction_5fswitch_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proto_2flogic_2fconstants_2ffunction_5fswitch_2eproto;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum eFunctionSwitchBitType : int {
  kFunctionSwitchTeam = 0,
  kFunctionSwitchFriends = 1,
  eFunctionSwitchBitType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  eFunctionSwitchBitType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool eFunctionSwitchBitType_IsValid(int value);
extern const uint32_t eFunctionSwitchBitType_internal_data_[];
constexpr eFunctionSwitchBitType eFunctionSwitchBitType_MIN = static_cast<eFunctionSwitchBitType>(0);
constexpr eFunctionSwitchBitType eFunctionSwitchBitType_MAX = static_cast<eFunctionSwitchBitType>(1);
constexpr int eFunctionSwitchBitType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
eFunctionSwitchBitType_descriptor();
template <typename T>
const std::string& eFunctionSwitchBitType_Name(T value) {
  static_assert(std::is_same<T, eFunctionSwitchBitType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to eFunctionSwitchBitType_Name().");
  return eFunctionSwitchBitType_Name(static_cast<eFunctionSwitchBitType>(value));
}
template <>
inline const std::string& eFunctionSwitchBitType_Name(eFunctionSwitchBitType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<eFunctionSwitchBitType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool eFunctionSwitchBitType_Parse(absl::string_view name, eFunctionSwitchBitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eFunctionSwitchBitType>(
      eFunctionSwitchBitType_descriptor(), name, value);
}

// ===================================================================



// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::eFunctionSwitchBitType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::eFunctionSwitchBitType>() {
  return ::eFunctionSwitchBitType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // proto_2flogic_2fconstants_2ffunction_5fswitch_2eproto_2epb_2eh
