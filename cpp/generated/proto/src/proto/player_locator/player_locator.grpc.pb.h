// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/player_locator/player_locator.proto
#ifndef GRPC_proto_2fplayer_5flocator_2fplayer_5flocator_2eproto__INCLUDED
#define GRPC_proto_2fplayer_5flocator_2fplayer_5flocator_2eproto__INCLUDED

#include "proto/player_locator/player_locator.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace playerlocator {

class PlayerLocator final {
 public:
  static constexpr char const* service_full_name() {
    return "playerlocator.PlayerLocator";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerLocation& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncSetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerLocation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncSetLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncSetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerLocation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncSetLocationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::playerlocator::PlayerLocation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playerlocator::PlayerLocation>> AsyncGetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playerlocator::PlayerLocation>>(AsyncGetLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playerlocator::PlayerLocation>> PrepareAsyncGetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::playerlocator::PlayerLocation>>(PrepareAsyncGetLocationRaw(context, request, cq));
    }
    virtual ::grpc::Status MarkOffline(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncMarkOffline(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncMarkOfflineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncMarkOffline(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncMarkOfflineRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerLocation* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerLocation* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerId* request, ::playerlocator::PlayerLocation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerId* request, ::playerlocator::PlayerLocation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void MarkOffline(::grpc::ClientContext* context, const ::playerlocator::PlayerId* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MarkOffline(::grpc::ClientContext* context, const ::playerlocator::PlayerId* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncSetLocationRaw(::grpc::ClientContext* context, const ::playerlocator::PlayerLocation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncSetLocationRaw(::grpc::ClientContext* context, const ::playerlocator::PlayerLocation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::playerlocator::PlayerLocation>* AsyncGetLocationRaw(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::playerlocator::PlayerLocation>* PrepareAsyncGetLocationRaw(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncMarkOfflineRaw(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncMarkOfflineRaw(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerLocation& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncSetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerLocation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncSetLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncSetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerLocation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncSetLocationRaw(context, request, cq));
    }
    ::grpc::Status GetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::playerlocator::PlayerLocation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playerlocator::PlayerLocation>> AsyncGetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playerlocator::PlayerLocation>>(AsyncGetLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playerlocator::PlayerLocation>> PrepareAsyncGetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::playerlocator::PlayerLocation>>(PrepareAsyncGetLocationRaw(context, request, cq));
    }
    ::grpc::Status MarkOffline(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncMarkOffline(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncMarkOfflineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncMarkOffline(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncMarkOfflineRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerLocation* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerLocation* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerId* request, ::playerlocator::PlayerLocation* response, std::function<void(::grpc::Status)>) override;
      void GetLocation(::grpc::ClientContext* context, const ::playerlocator::PlayerId* request, ::playerlocator::PlayerLocation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MarkOffline(::grpc::ClientContext* context, const ::playerlocator::PlayerId* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void MarkOffline(::grpc::ClientContext* context, const ::playerlocator::PlayerId* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncSetLocationRaw(::grpc::ClientContext* context, const ::playerlocator::PlayerLocation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncSetLocationRaw(::grpc::ClientContext* context, const ::playerlocator::PlayerLocation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::playerlocator::PlayerLocation>* AsyncGetLocationRaw(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::playerlocator::PlayerLocation>* PrepareAsyncGetLocationRaw(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncMarkOfflineRaw(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncMarkOfflineRaw(::grpc::ClientContext* context, const ::playerlocator::PlayerId& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetLocation_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLocation_;
    const ::grpc::internal::RpcMethod rpcmethod_MarkOffline_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SetLocation(::grpc::ServerContext* context, const ::playerlocator::PlayerLocation* request, ::Empty* response);
    virtual ::grpc::Status GetLocation(::grpc::ServerContext* context, const ::playerlocator::PlayerId* request, ::playerlocator::PlayerLocation* response);
    virtual ::grpc::Status MarkOffline(::grpc::ServerContext* context, const ::playerlocator::PlayerId* request, ::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetLocation() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLocation(::grpc::ServerContext* /*context*/, const ::playerlocator::PlayerLocation* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLocation(::grpc::ServerContext* context, ::playerlocator::PlayerLocation* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLocation() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocation(::grpc::ServerContext* /*context*/, const ::playerlocator::PlayerId* /*request*/, ::playerlocator::PlayerLocation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLocation(::grpc::ServerContext* context, ::playerlocator::PlayerId* request, ::grpc::ServerAsyncResponseWriter< ::playerlocator::PlayerLocation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MarkOffline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MarkOffline() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_MarkOffline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkOffline(::grpc::ServerContext* /*context*/, const ::playerlocator::PlayerId* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarkOffline(::grpc::ServerContext* context, ::playerlocator::PlayerId* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetLocation<WithAsyncMethod_GetLocation<WithAsyncMethod_MarkOffline<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetLocation() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::playerlocator::PlayerLocation, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::playerlocator::PlayerLocation* request, ::Empty* response) { return this->SetLocation(context, request, response); }));}
    void SetMessageAllocatorFor_SetLocation(
        ::grpc::MessageAllocator< ::playerlocator::PlayerLocation, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::playerlocator::PlayerLocation, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLocation(::grpc::ServerContext* /*context*/, const ::playerlocator::PlayerLocation* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::playerlocator::PlayerLocation* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLocation() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::playerlocator::PlayerId, ::playerlocator::PlayerLocation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::playerlocator::PlayerId* request, ::playerlocator::PlayerLocation* response) { return this->GetLocation(context, request, response); }));}
    void SetMessageAllocatorFor_GetLocation(
        ::grpc::MessageAllocator< ::playerlocator::PlayerId, ::playerlocator::PlayerLocation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::playerlocator::PlayerId, ::playerlocator::PlayerLocation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocation(::grpc::ServerContext* /*context*/, const ::playerlocator::PlayerId* /*request*/, ::playerlocator::PlayerLocation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::playerlocator::PlayerId* /*request*/, ::playerlocator::PlayerLocation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MarkOffline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MarkOffline() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::playerlocator::PlayerId, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::playerlocator::PlayerId* request, ::Empty* response) { return this->MarkOffline(context, request, response); }));}
    void SetMessageAllocatorFor_MarkOffline(
        ::grpc::MessageAllocator< ::playerlocator::PlayerId, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::playerlocator::PlayerId, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MarkOffline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkOffline(::grpc::ServerContext* /*context*/, const ::playerlocator::PlayerId* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MarkOffline(
      ::grpc::CallbackServerContext* /*context*/, const ::playerlocator::PlayerId* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SetLocation<WithCallbackMethod_GetLocation<WithCallbackMethod_MarkOffline<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetLocation() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLocation(::grpc::ServerContext* /*context*/, const ::playerlocator::PlayerLocation* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLocation() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocation(::grpc::ServerContext* /*context*/, const ::playerlocator::PlayerId* /*request*/, ::playerlocator::PlayerLocation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MarkOffline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MarkOffline() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_MarkOffline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkOffline(::grpc::ServerContext* /*context*/, const ::playerlocator::PlayerId* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetLocation() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLocation(::grpc::ServerContext* /*context*/, const ::playerlocator::PlayerLocation* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLocation() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocation(::grpc::ServerContext* /*context*/, const ::playerlocator::PlayerId* /*request*/, ::playerlocator::PlayerLocation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MarkOffline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MarkOffline() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_MarkOffline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkOffline(::grpc::ServerContext* /*context*/, const ::playerlocator::PlayerId* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarkOffline(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetLocation() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetLocation(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLocation(::grpc::ServerContext* /*context*/, const ::playerlocator::PlayerLocation* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLocation() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLocation(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocation(::grpc::ServerContext* /*context*/, const ::playerlocator::PlayerId* /*request*/, ::playerlocator::PlayerLocation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MarkOffline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MarkOffline() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MarkOffline(context, request, response); }));
    }
    ~WithRawCallbackMethod_MarkOffline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkOffline(::grpc::ServerContext* /*context*/, const ::playerlocator::PlayerId* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MarkOffline(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetLocation() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::playerlocator::PlayerLocation, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::playerlocator::PlayerLocation, ::Empty>* streamer) {
                       return this->StreamedSetLocation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetLocation(::grpc::ServerContext* /*context*/, const ::playerlocator::PlayerLocation* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::playerlocator::PlayerLocation,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLocation() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::playerlocator::PlayerId, ::playerlocator::PlayerLocation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::playerlocator::PlayerId, ::playerlocator::PlayerLocation>* streamer) {
                       return this->StreamedGetLocation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLocation(::grpc::ServerContext* /*context*/, const ::playerlocator::PlayerId* /*request*/, ::playerlocator::PlayerLocation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::playerlocator::PlayerId,::playerlocator::PlayerLocation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MarkOffline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MarkOffline() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::playerlocator::PlayerId, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::playerlocator::PlayerId, ::Empty>* streamer) {
                       return this->StreamedMarkOffline(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MarkOffline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MarkOffline(::grpc::ServerContext* /*context*/, const ::playerlocator::PlayerId* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMarkOffline(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::playerlocator::PlayerId,::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetLocation<WithStreamedUnaryMethod_GetLocation<WithStreamedUnaryMethod_MarkOffline<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetLocation<WithStreamedUnaryMethod_GetLocation<WithStreamedUnaryMethod_MarkOffline<Service > > > StreamedService;
};

}  // namespace playerlocator


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_proto_2fplayer_5flocator_2fplayer_5flocator_2eproto__INCLUDED
