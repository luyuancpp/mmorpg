// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/common/config.proto
// Protobuf C++ Version: 6.31.1

#include "proto/common/config.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr ServiceConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR ServiceConfig::ServiceConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ServiceConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ServiceConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceConfigDefaultTypeInternal() {}
  union {
    ServiceConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceConfigDefaultTypeInternal _ServiceConfig_default_instance_;

inline constexpr KafkaConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        brokers_{},
        topics_{},
        group_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        auto_offset_reset_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        enable_auto_commit_{false} {}

template <typename>
PROTOBUF_CONSTEXPR KafkaConfig::KafkaConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(KafkaConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct KafkaConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KafkaConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~KafkaConfigDefaultTypeInternal() {}
  union {
    KafkaConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KafkaConfigDefaultTypeInternal _KafkaConfig_default_instance_;

inline constexpr GameConfig_ZoneRedisConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        host_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        password_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        port_{0u},
        db_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR GameConfig_ZoneRedisConfig::GameConfig_ZoneRedisConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(GameConfig_ZoneRedisConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameConfig_ZoneRedisConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameConfig_ZoneRedisConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameConfig_ZoneRedisConfigDefaultTypeInternal() {}
  union {
    GameConfig_ZoneRedisConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameConfig_ZoneRedisConfigDefaultTypeInternal _GameConfig_ZoneRedisConfig_default_instance_;

inline constexpr GameConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        zone_redis_{nullptr},
        scene_node_type_{0u},
        zone_id_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR GameConfig::GameConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(GameConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameConfigDefaultTypeInternal() {}
  union {
    GameConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameConfigDefaultTypeInternal _GameConfig_default_instance_;

inline constexpr BaseDeployConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        etcd_hosts_{},
        services_{},
        service_discovery_prefixes_{},
        deployservice_prefix_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        kafka_{nullptr},
        log_level_{0u},
        keep_alive_interval_{0u},
        node_ttl_seconds_{0u},
        health_check_interval_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR BaseDeployConfig::BaseDeployConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(BaseDeployConfig_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BaseDeployConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaseDeployConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaseDeployConfigDefaultTypeInternal() {}
  union {
    BaseDeployConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaseDeployConfigDefaultTypeInternal _BaseDeployConfig_default_instance_;
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_proto_2fcommon_2fconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_proto_2fcommon_2fconfig_2eproto = nullptr;
const ::uint32_t
    TableStruct_proto_2fcommon_2fconfig_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::ServiceConfig, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::ServiceConfig, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::ServiceConfig, _impl_.url_),
        0,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::KafkaConfig, _impl_._has_bits_),
        8, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::KafkaConfig, _impl_.brokers_),
        PROTOBUF_FIELD_OFFSET(::KafkaConfig, _impl_.topics_),
        PROTOBUF_FIELD_OFFSET(::KafkaConfig, _impl_.group_id_),
        PROTOBUF_FIELD_OFFSET(::KafkaConfig, _impl_.enable_auto_commit_),
        PROTOBUF_FIELD_OFFSET(::KafkaConfig, _impl_.auto_offset_reset_),
        ~0u,
        ~0u,
        0,
        2,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::BaseDeployConfig, _impl_._has_bits_),
        12, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::BaseDeployConfig, _impl_.etcd_hosts_),
        PROTOBUF_FIELD_OFFSET(::BaseDeployConfig, _impl_.log_level_),
        PROTOBUF_FIELD_OFFSET(::BaseDeployConfig, _impl_.services_),
        PROTOBUF_FIELD_OFFSET(::BaseDeployConfig, _impl_.service_discovery_prefixes_),
        PROTOBUF_FIELD_OFFSET(::BaseDeployConfig, _impl_.keep_alive_interval_),
        PROTOBUF_FIELD_OFFSET(::BaseDeployConfig, _impl_.deployservice_prefix_),
        PROTOBUF_FIELD_OFFSET(::BaseDeployConfig, _impl_.node_ttl_seconds_),
        PROTOBUF_FIELD_OFFSET(::BaseDeployConfig, _impl_.health_check_interval_),
        PROTOBUF_FIELD_OFFSET(::BaseDeployConfig, _impl_.kafka_),
        ~0u,
        2,
        ~0u,
        ~0u,
        3,
        0,
        4,
        5,
        1,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::GameConfig_ZoneRedisConfig, _impl_._has_bits_),
        7, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::GameConfig_ZoneRedisConfig, _impl_.host_),
        PROTOBUF_FIELD_OFFSET(::GameConfig_ZoneRedisConfig, _impl_.port_),
        PROTOBUF_FIELD_OFFSET(::GameConfig_ZoneRedisConfig, _impl_.password_),
        PROTOBUF_FIELD_OFFSET(::GameConfig_ZoneRedisConfig, _impl_.db_),
        0,
        2,
        1,
        3,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::GameConfig, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::GameConfig, _impl_.scene_node_type_),
        PROTOBUF_FIELD_OFFSET(::GameConfig, _impl_.zone_id_),
        PROTOBUF_FIELD_OFFSET(::GameConfig, _impl_.zone_redis_),
        1,
        2,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::ServiceConfig)},
        {7, sizeof(::KafkaConfig)},
        {20, sizeof(::BaseDeployConfig)},
        {41, sizeof(::GameConfig_ZoneRedisConfig)},
        {52, sizeof(::GameConfig)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::_ServiceConfig_default_instance_._instance,
    &::_KafkaConfig_default_instance_._instance,
    &::_BaseDeployConfig_default_instance_._instance,
    &::_GameConfig_ZoneRedisConfig_default_instance_._instance,
    &::_GameConfig_default_instance_._instance,
};
const char descriptor_table_protodef_proto_2fcommon_2fconfig_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\031proto/common/config.proto\"*\n\rServiceCo"
    "nfig\022\014\n\004name\030\001 \001(\t\022\013\n\003url\030\002 \001(\t\"w\n\013Kafka"
    "Config\022\017\n\007brokers\030\001 \003(\t\022\016\n\006topics\030\002 \003(\t\022"
    "\020\n\010group_id\030\003 \001(\t\022\032\n\022enable_auto_commit\030"
    "\004 \001(\010\022\031\n\021auto_offset_reset\030\005 \001(\t\"\220\002\n\020Bas"
    "eDeployConfig\022\022\n\netcd_hosts\030\001 \003(\t\022\021\n\tlog"
    "_level\030\002 \001(\r\022 \n\010services\030\003 \003(\0132\016.Service"
    "Config\022\"\n\032service_discovery_prefixes\030\004 \003"
    "(\t\022\033\n\023keep_alive_interval\030\005 \001(\r\022\034\n\024deplo"
    "yservice_prefix\030\006 \001(\t\022\030\n\020node_ttl_second"
    "s\030\007 \001(\r\022\035\n\025health_check_interval\030\010 \001(\r\022\033"
    "\n\005kafka\030\t \001(\0132\014.KafkaConfig\"\264\001\n\nGameConf"
    "ig\022\027\n\017scene_node_type\030\001 \001(\r\022\017\n\007zone_id\030\002"
    " \001(\r\022/\n\nzone_redis\030\007 \001(\0132\033.GameConfig.Zo"
    "neRedisConfig\032K\n\017ZoneRedisConfig\022\014\n\004host"
    "\030\003 \001(\t\022\014\n\004port\030\004 \001(\r\022\020\n\010password\030\005 \001(\t\022\n"
    "\n\002db\030\006 \001(\rB\034Z\032generated/pb/common/common"
    "b\006proto3"
};
static ::absl::once_flag descriptor_table_proto_2fcommon_2fconfig_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_proto_2fcommon_2fconfig_2eproto = {
    false,
    false,
    688,
    descriptor_table_protodef_proto_2fcommon_2fconfig_2eproto,
    "proto/common/config.proto",
    &descriptor_table_proto_2fcommon_2fconfig_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_proto_2fcommon_2fconfig_2eproto::offsets,
    file_level_enum_descriptors_proto_2fcommon_2fconfig_2eproto,
    file_level_service_descriptors_proto_2fcommon_2fconfig_2eproto,
};
// ===================================================================

class ServiceConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<ServiceConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_._has_bits_);
};

ServiceConfig::ServiceConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ServiceConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ServiceConfig)
}
PROTOBUF_NDEBUG_INLINE ServiceConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::ServiceConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_),
        url_(arena, from.url_) {}

ServiceConfig::ServiceConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const ServiceConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ServiceConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ServiceConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:ServiceConfig)
}
PROTOBUF_NDEBUG_INLINE ServiceConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        name_(arena),
        url_(arena) {}

inline void ServiceConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ServiceConfig::~ServiceConfig() {
  // @@protoc_insertion_point(destructor:ServiceConfig)
  SharedDtor(*this);
}
inline void ServiceConfig::SharedDtor(MessageLite& self) {
  ServiceConfig& this_ = static_cast<ServiceConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.url_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ServiceConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ServiceConfig(arena);
}
constexpr auto ServiceConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ServiceConfig),
                                            alignof(ServiceConfig));
}
constexpr auto ServiceConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ServiceConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &ServiceConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ServiceConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ServiceConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ServiceConfig>(), &ServiceConfig::ByteSizeLong,
              &ServiceConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_._cached_size_),
          false,
      },
      &ServiceConfig::kDescriptorMethods,
      &descriptor_table_proto_2fcommon_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull ServiceConfig_class_data_ =
        ServiceConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ServiceConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ServiceConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ServiceConfig_class_data_.tc_table);
  return ServiceConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 29, 2>
ServiceConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    ServiceConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ServiceConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string url = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_.url_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string url = 2;
    {PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_.url_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\15\4\3\0\0\0\0\0"
    "ServiceConfig"
    "name"
    "url"
  }},
};
PROTOBUF_NOINLINE void ServiceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ServiceConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.url_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL ServiceConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ServiceConfig& this_ = static_cast<const ServiceConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ServiceConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ServiceConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:ServiceConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_name().empty()) {
      const ::std::string& _s = this_._internal_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ServiceConfig.name");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string url = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_url().empty()) {
      const ::std::string& _s = this_._internal_url();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ServiceConfig.url");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServiceConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ServiceConfig::ByteSizeLong(const MessageLite& base) {
  const ServiceConfig& this_ = static_cast<const ServiceConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t ServiceConfig::ByteSizeLong() const {
  const ServiceConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:ServiceConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string name = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_name());
      }
    }
    // string url = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_url().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_url());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void ServiceConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ServiceConfig*>(&to_msg);
  auto& from = static_cast<const ServiceConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServiceConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_name().empty()) {
        _this->_internal_set_name(from._internal_name());
      } else {
        if (_this->_impl_.name_.IsDefault()) {
          _this->_internal_set_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_url().empty()) {
        _this->_internal_set_url(from._internal_url());
      } else {
        if (_this->_impl_.url_.IsDefault()) {
          _this->_internal_set_url("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceConfig::CopyFrom(const ServiceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServiceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ServiceConfig::InternalSwap(ServiceConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.url_, &other->_impl_.url_, arena);
}

::google::protobuf::Metadata ServiceConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class KafkaConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<KafkaConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(KafkaConfig, _impl_._has_bits_);
};

KafkaConfig::KafkaConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, KafkaConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:KafkaConfig)
}
PROTOBUF_NDEBUG_INLINE KafkaConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::KafkaConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        brokers_{visibility, arena, from.brokers_},
        topics_{visibility, arena, from.topics_},
        group_id_(arena, from.group_id_),
        auto_offset_reset_(arena, from.auto_offset_reset_) {}

KafkaConfig::KafkaConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const KafkaConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, KafkaConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  KafkaConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.enable_auto_commit_ = from._impl_.enable_auto_commit_;

  // @@protoc_insertion_point(copy_constructor:KafkaConfig)
}
PROTOBUF_NDEBUG_INLINE KafkaConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        brokers_{visibility, arena},
        topics_{visibility, arena},
        group_id_(arena),
        auto_offset_reset_(arena) {}

inline void KafkaConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.enable_auto_commit_ = {};
}
KafkaConfig::~KafkaConfig() {
  // @@protoc_insertion_point(destructor:KafkaConfig)
  SharedDtor(*this);
}
inline void KafkaConfig::SharedDtor(MessageLite& self) {
  KafkaConfig& this_ = static_cast<KafkaConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.group_id_.Destroy();
  this_._impl_.auto_offset_reset_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL KafkaConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) KafkaConfig(arena);
}
constexpr auto KafkaConfig::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(KafkaConfig, _impl_.brokers_) +
          decltype(KafkaConfig::_impl_.brokers_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(KafkaConfig, _impl_.topics_) +
          decltype(KafkaConfig::_impl_.topics_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(KafkaConfig), alignof(KafkaConfig), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&KafkaConfig::PlacementNew_,
                                 sizeof(KafkaConfig),
                                 alignof(KafkaConfig));
  }
}
constexpr auto KafkaConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_KafkaConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &KafkaConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<KafkaConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &KafkaConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<KafkaConfig>(), &KafkaConfig::ByteSizeLong,
              &KafkaConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(KafkaConfig, _impl_._cached_size_),
          false,
      },
      &KafkaConfig::kDescriptorMethods,
      &descriptor_table_proto_2fcommon_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull KafkaConfig_class_data_ =
        KafkaConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
KafkaConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&KafkaConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(KafkaConfig_class_data_.tc_table);
  return KafkaConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 58, 2>
KafkaConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(KafkaConfig, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    KafkaConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::KafkaConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string brokers = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(KafkaConfig, _impl_.brokers_)}},
    // repeated string topics = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(KafkaConfig, _impl_.topics_)}},
    // string group_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(KafkaConfig, _impl_.group_id_)}},
    // bool enable_auto_commit = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(KafkaConfig, _impl_.enable_auto_commit_), 2>(),
     {32, 2, 0, PROTOBUF_FIELD_OFFSET(KafkaConfig, _impl_.enable_auto_commit_)}},
    // string auto_offset_reset = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(KafkaConfig, _impl_.auto_offset_reset_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string brokers = 1;
    {PROTOBUF_FIELD_OFFSET(KafkaConfig, _impl_.brokers_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string topics = 2;
    {PROTOBUF_FIELD_OFFSET(KafkaConfig, _impl_.topics_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string group_id = 3;
    {PROTOBUF_FIELD_OFFSET(KafkaConfig, _impl_.group_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool enable_auto_commit = 4;
    {PROTOBUF_FIELD_OFFSET(KafkaConfig, _impl_.enable_auto_commit_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // string auto_offset_reset = 5;
    {PROTOBUF_FIELD_OFFSET(KafkaConfig, _impl_.auto_offset_reset_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\13\7\6\10\0\21\0\0"
    "KafkaConfig"
    "brokers"
    "topics"
    "group_id"
    "auto_offset_reset"
  }},
};
PROTOBUF_NOINLINE void KafkaConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:KafkaConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.brokers_.Clear();
  _impl_.topics_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.group_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.auto_offset_reset_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.enable_auto_commit_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL KafkaConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const KafkaConfig& this_ = static_cast<const KafkaConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL KafkaConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const KafkaConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:KafkaConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string brokers = 1;
  for (int i = 0, n = this_._internal_brokers_size(); i < n; ++i) {
    const auto& s = this_._internal_brokers().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "KafkaConfig.brokers");
    target = stream->WriteString(1, s, target);
  }

  // repeated string topics = 2;
  for (int i = 0, n = this_._internal_topics_size(); i < n; ++i) {
    const auto& s = this_._internal_topics().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "KafkaConfig.topics");
    target = stream->WriteString(2, s, target);
  }

  // string group_id = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_group_id().empty()) {
      const ::std::string& _s = this_._internal_group_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "KafkaConfig.group_id");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // bool enable_auto_commit = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_enable_auto_commit() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          4, this_._internal_enable_auto_commit(), target);
    }
  }

  // string auto_offset_reset = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_auto_offset_reset().empty()) {
      const ::std::string& _s = this_._internal_auto_offset_reset();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "KafkaConfig.auto_offset_reset");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KafkaConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t KafkaConfig::ByteSizeLong(const MessageLite& base) {
  const KafkaConfig& this_ = static_cast<const KafkaConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t KafkaConfig::ByteSizeLong() const {
  const KafkaConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:KafkaConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string brokers = 1;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_brokers().size());
      for (int i = 0, n = this_._internal_brokers().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_brokers().Get(i));
      }
    }
    // repeated string topics = 2;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_topics().size());
      for (int i = 0, n = this_._internal_topics().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_topics().Get(i));
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string group_id = 3;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_group_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_group_id());
      }
    }
    // string auto_offset_reset = 5;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_auto_offset_reset().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_auto_offset_reset());
      }
    }
    // bool enable_auto_commit = 4;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_enable_auto_commit() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void KafkaConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<KafkaConfig*>(&to_msg);
  auto& from = static_cast<const KafkaConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KafkaConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_brokers()->MergeFrom(from._internal_brokers());
  _this->_internal_mutable_topics()->MergeFrom(from._internal_topics());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_group_id().empty()) {
        _this->_internal_set_group_id(from._internal_group_id());
      } else {
        if (_this->_impl_.group_id_.IsDefault()) {
          _this->_internal_set_group_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_auto_offset_reset().empty()) {
        _this->_internal_set_auto_offset_reset(from._internal_auto_offset_reset());
      } else {
        if (_this->_impl_.auto_offset_reset_.IsDefault()) {
          _this->_internal_set_auto_offset_reset("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_enable_auto_commit() != 0) {
        _this->_impl_.enable_auto_commit_ = from._impl_.enable_auto_commit_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void KafkaConfig::CopyFrom(const KafkaConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KafkaConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void KafkaConfig::InternalSwap(KafkaConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.brokers_.InternalSwap(&other->_impl_.brokers_);
  _impl_.topics_.InternalSwap(&other->_impl_.topics_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.group_id_, &other->_impl_.group_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.auto_offset_reset_, &other->_impl_.auto_offset_reset_, arena);
  swap(_impl_.enable_auto_commit_, other->_impl_.enable_auto_commit_);
}

::google::protobuf::Metadata KafkaConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BaseDeployConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<BaseDeployConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_._has_bits_);
};

BaseDeployConfig::BaseDeployConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, BaseDeployConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:BaseDeployConfig)
}
PROTOBUF_NDEBUG_INLINE BaseDeployConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::BaseDeployConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        etcd_hosts_{visibility, arena, from.etcd_hosts_},
        services_{visibility, arena, from.services_},
        service_discovery_prefixes_{visibility, arena, from.service_discovery_prefixes_},
        deployservice_prefix_(arena, from.deployservice_prefix_) {}

BaseDeployConfig::BaseDeployConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const BaseDeployConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, BaseDeployConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BaseDeployConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.kafka_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.kafka_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, log_level_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, log_level_),
           offsetof(Impl_, health_check_interval_) -
               offsetof(Impl_, log_level_) +
               sizeof(Impl_::health_check_interval_));

  // @@protoc_insertion_point(copy_constructor:BaseDeployConfig)
}
PROTOBUF_NDEBUG_INLINE BaseDeployConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        etcd_hosts_{visibility, arena},
        services_{visibility, arena},
        service_discovery_prefixes_{visibility, arena},
        deployservice_prefix_(arena) {}

inline void BaseDeployConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, kafka_),
           0,
           offsetof(Impl_, health_check_interval_) -
               offsetof(Impl_, kafka_) +
               sizeof(Impl_::health_check_interval_));
}
BaseDeployConfig::~BaseDeployConfig() {
  // @@protoc_insertion_point(destructor:BaseDeployConfig)
  SharedDtor(*this);
}
inline void BaseDeployConfig::SharedDtor(MessageLite& self) {
  BaseDeployConfig& this_ = static_cast<BaseDeployConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.deployservice_prefix_.Destroy();
  delete this_._impl_.kafka_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL BaseDeployConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) BaseDeployConfig(arena);
}
constexpr auto BaseDeployConfig::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.etcd_hosts_) +
          decltype(BaseDeployConfig::_impl_.etcd_hosts_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.services_) +
          decltype(BaseDeployConfig::_impl_.services_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.service_discovery_prefixes_) +
          decltype(BaseDeployConfig::_impl_.service_discovery_prefixes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(BaseDeployConfig), alignof(BaseDeployConfig), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&BaseDeployConfig::PlacementNew_,
                                 sizeof(BaseDeployConfig),
                                 alignof(BaseDeployConfig));
  }
}
constexpr auto BaseDeployConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_BaseDeployConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &BaseDeployConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<BaseDeployConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &BaseDeployConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<BaseDeployConfig>(), &BaseDeployConfig::ByteSizeLong,
              &BaseDeployConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_._cached_size_),
          false,
      },
      &BaseDeployConfig::kDescriptorMethods,
      &descriptor_table_proto_2fcommon_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull BaseDeployConfig_class_data_ =
        BaseDeployConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
BaseDeployConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&BaseDeployConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(BaseDeployConfig_class_data_.tc_table);
  return BaseDeployConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 2, 89, 2>
BaseDeployConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    BaseDeployConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::BaseDeployConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string etcd_hosts = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.etcd_hosts_)}},
    // uint32 log_level = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BaseDeployConfig, _impl_.log_level_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.log_level_)}},
    // repeated .ServiceConfig services = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.services_)}},
    // repeated string service_discovery_prefixes = 4;
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.service_discovery_prefixes_)}},
    // uint32 keep_alive_interval = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BaseDeployConfig, _impl_.keep_alive_interval_), 3>(),
     {40, 3, 0, PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.keep_alive_interval_)}},
    // string deployservice_prefix = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.deployservice_prefix_)}},
    // uint32 node_ttl_seconds = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BaseDeployConfig, _impl_.node_ttl_seconds_), 4>(),
     {56, 4, 0, PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.node_ttl_seconds_)}},
    // uint32 health_check_interval = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BaseDeployConfig, _impl_.health_check_interval_), 5>(),
     {64, 5, 0, PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.health_check_interval_)}},
    // .KafkaConfig kafka = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 1, 1, PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.kafka_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string etcd_hosts = 1;
    {PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.etcd_hosts_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // uint32 log_level = 2;
    {PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.log_level_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated .ServiceConfig services = 3;
    {PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.services_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string service_discovery_prefixes = 4;
    {PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.service_discovery_prefixes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // uint32 keep_alive_interval = 5;
    {PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.keep_alive_interval_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // string deployservice_prefix = 6;
    {PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.deployservice_prefix_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 node_ttl_seconds = 7;
    {PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.node_ttl_seconds_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 health_check_interval = 8;
    {PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.health_check_interval_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // .KafkaConfig kafka = 9;
    {PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.kafka_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::ServiceConfig>()},
      {::_pbi::TcParser::GetTable<::KafkaConfig>()},
  }},
  {{
    "\20\12\0\0\32\0\24\0\0\0\0\0\0\0\0\0"
    "BaseDeployConfig"
    "etcd_hosts"
    "service_discovery_prefixes"
    "deployservice_prefix"
  }},
};
PROTOBUF_NOINLINE void BaseDeployConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:BaseDeployConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.etcd_hosts_.Clear();
  _impl_.services_.Clear();
  _impl_.service_discovery_prefixes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.deployservice_prefix_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.kafka_ != nullptr);
      _impl_.kafka_->Clear();
    }
  }
  if ((cached_has_bits & 0x0000003cu) != 0) {
    ::memset(&_impl_.log_level_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.health_check_interval_) -
        reinterpret_cast<char*>(&_impl_.log_level_)) + sizeof(_impl_.health_check_interval_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL BaseDeployConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const BaseDeployConfig& this_ = static_cast<const BaseDeployConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL BaseDeployConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const BaseDeployConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:BaseDeployConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string etcd_hosts = 1;
  for (int i = 0, n = this_._internal_etcd_hosts_size(); i < n; ++i) {
    const auto& s = this_._internal_etcd_hosts().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "BaseDeployConfig.etcd_hosts");
    target = stream->WriteString(1, s, target);
  }

  // uint32 log_level = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_log_level() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this_._internal_log_level(), target);
    }
  }

  // repeated .ServiceConfig services = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_services_size());
       i < n; i++) {
    const auto& repfield = this_._internal_services().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated string service_discovery_prefixes = 4;
  for (int i = 0, n = this_._internal_service_discovery_prefixes_size(); i < n; ++i) {
    const auto& s = this_._internal_service_discovery_prefixes().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "BaseDeployConfig.service_discovery_prefixes");
    target = stream->WriteString(4, s, target);
  }

  // uint32 keep_alive_interval = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_keep_alive_interval() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          5, this_._internal_keep_alive_interval(), target);
    }
  }

  // string deployservice_prefix = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_deployservice_prefix().empty()) {
      const ::std::string& _s = this_._internal_deployservice_prefix();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "BaseDeployConfig.deployservice_prefix");
      target = stream->WriteStringMaybeAliased(6, _s, target);
    }
  }

  // uint32 node_ttl_seconds = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_node_ttl_seconds() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          7, this_._internal_node_ttl_seconds(), target);
    }
  }

  // uint32 health_check_interval = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (this_._internal_health_check_interval() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          8, this_._internal_health_check_interval(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .KafkaConfig kafka = 9;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *this_._impl_.kafka_, this_._impl_.kafka_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BaseDeployConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t BaseDeployConfig::ByteSizeLong(const MessageLite& base) {
  const BaseDeployConfig& this_ = static_cast<const BaseDeployConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t BaseDeployConfig::ByteSizeLong() const {
  const BaseDeployConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:BaseDeployConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string etcd_hosts = 1;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_etcd_hosts().size());
      for (int i = 0, n = this_._internal_etcd_hosts().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_etcd_hosts().Get(i));
      }
    }
    // repeated .ServiceConfig services = 3;
    {
      total_size += 1UL * this_._internal_services_size();
      for (const auto& msg : this_._internal_services()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated string service_discovery_prefixes = 4;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_service_discovery_prefixes().size());
      for (int i = 0, n = this_._internal_service_discovery_prefixes().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_service_discovery_prefixes().Get(i));
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    // string deployservice_prefix = 6;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_deployservice_prefix().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_deployservice_prefix());
      }
    }
    // .KafkaConfig kafka = 9;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kafka_);
    }
    // uint32 log_level = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_log_level() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_log_level());
      }
    }
    // uint32 keep_alive_interval = 5;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_keep_alive_interval() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_keep_alive_interval());
      }
    }
    // uint32 node_ttl_seconds = 7;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_node_ttl_seconds() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_node_ttl_seconds());
      }
    }
    // uint32 health_check_interval = 8;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (this_._internal_health_check_interval() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_health_check_interval());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void BaseDeployConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BaseDeployConfig*>(&to_msg);
  auto& from = static_cast<const BaseDeployConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:BaseDeployConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_etcd_hosts()->MergeFrom(from._internal_etcd_hosts());
  _this->_internal_mutable_services()->MergeFrom(
      from._internal_services());
  _this->_internal_mutable_service_discovery_prefixes()->MergeFrom(from._internal_service_discovery_prefixes());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_deployservice_prefix().empty()) {
        _this->_internal_set_deployservice_prefix(from._internal_deployservice_prefix());
      } else {
        if (_this->_impl_.deployservice_prefix_.IsDefault()) {
          _this->_internal_set_deployservice_prefix("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.kafka_ != nullptr);
      if (_this->_impl_.kafka_ == nullptr) {
        _this->_impl_.kafka_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.kafka_);
      } else {
        _this->_impl_.kafka_->MergeFrom(*from._impl_.kafka_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_log_level() != 0) {
        _this->_impl_.log_level_ = from._impl_.log_level_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_keep_alive_interval() != 0) {
        _this->_impl_.keep_alive_interval_ = from._impl_.keep_alive_interval_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_node_ttl_seconds() != 0) {
        _this->_impl_.node_ttl_seconds_ = from._impl_.node_ttl_seconds_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (from._internal_health_check_interval() != 0) {
        _this->_impl_.health_check_interval_ = from._impl_.health_check_interval_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BaseDeployConfig::CopyFrom(const BaseDeployConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BaseDeployConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BaseDeployConfig::InternalSwap(BaseDeployConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.etcd_hosts_.InternalSwap(&other->_impl_.etcd_hosts_);
  _impl_.services_.InternalSwap(&other->_impl_.services_);
  _impl_.service_discovery_prefixes_.InternalSwap(&other->_impl_.service_discovery_prefixes_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deployservice_prefix_, &other->_impl_.deployservice_prefix_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.health_check_interval_)
      + sizeof(BaseDeployConfig::_impl_.health_check_interval_)
      - PROTOBUF_FIELD_OFFSET(BaseDeployConfig, _impl_.kafka_)>(
          reinterpret_cast<char*>(&_impl_.kafka_),
          reinterpret_cast<char*>(&other->_impl_.kafka_));
}

::google::protobuf::Metadata BaseDeployConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameConfig_ZoneRedisConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<GameConfig_ZoneRedisConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameConfig_ZoneRedisConfig, _impl_._has_bits_);
};

GameConfig_ZoneRedisConfig::GameConfig_ZoneRedisConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, GameConfig_ZoneRedisConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameConfig.ZoneRedisConfig)
}
PROTOBUF_NDEBUG_INLINE GameConfig_ZoneRedisConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::GameConfig_ZoneRedisConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        host_(arena, from.host_),
        password_(arena, from.password_) {}

GameConfig_ZoneRedisConfig::GameConfig_ZoneRedisConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const GameConfig_ZoneRedisConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, GameConfig_ZoneRedisConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameConfig_ZoneRedisConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, port_),
           offsetof(Impl_, db_) -
               offsetof(Impl_, port_) +
               sizeof(Impl_::db_));

  // @@protoc_insertion_point(copy_constructor:GameConfig.ZoneRedisConfig)
}
PROTOBUF_NDEBUG_INLINE GameConfig_ZoneRedisConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        host_(arena),
        password_(arena) {}

inline void GameConfig_ZoneRedisConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_),
           0,
           offsetof(Impl_, db_) -
               offsetof(Impl_, port_) +
               sizeof(Impl_::db_));
}
GameConfig_ZoneRedisConfig::~GameConfig_ZoneRedisConfig() {
  // @@protoc_insertion_point(destructor:GameConfig.ZoneRedisConfig)
  SharedDtor(*this);
}
inline void GameConfig_ZoneRedisConfig::SharedDtor(MessageLite& self) {
  GameConfig_ZoneRedisConfig& this_ = static_cast<GameConfig_ZoneRedisConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.host_.Destroy();
  this_._impl_.password_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL GameConfig_ZoneRedisConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) GameConfig_ZoneRedisConfig(arena);
}
constexpr auto GameConfig_ZoneRedisConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GameConfig_ZoneRedisConfig),
                                            alignof(GameConfig_ZoneRedisConfig));
}
constexpr auto GameConfig_ZoneRedisConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_GameConfig_ZoneRedisConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &GameConfig_ZoneRedisConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<GameConfig_ZoneRedisConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &GameConfig_ZoneRedisConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<GameConfig_ZoneRedisConfig>(), &GameConfig_ZoneRedisConfig::ByteSizeLong,
              &GameConfig_ZoneRedisConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(GameConfig_ZoneRedisConfig, _impl_._cached_size_),
          false,
      },
      &GameConfig_ZoneRedisConfig::kDescriptorMethods,
      &descriptor_table_proto_2fcommon_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull GameConfig_ZoneRedisConfig_class_data_ =
        GameConfig_ZoneRedisConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
GameConfig_ZoneRedisConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&GameConfig_ZoneRedisConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(GameConfig_ZoneRedisConfig_class_data_.tc_table);
  return GameConfig_ZoneRedisConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 47, 2>
GameConfig_ZoneRedisConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameConfig_ZoneRedisConfig, _impl_._has_bits_),
    0, // no _extensions_
    6, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967235,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    GameConfig_ZoneRedisConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameConfig_ZoneRedisConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 port = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameConfig_ZoneRedisConfig, _impl_.port_), 2>(),
     {32, 2, 0, PROTOBUF_FIELD_OFFSET(GameConfig_ZoneRedisConfig, _impl_.port_)}},
    // string password = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(GameConfig_ZoneRedisConfig, _impl_.password_)}},
    // uint32 db = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameConfig_ZoneRedisConfig, _impl_.db_), 3>(),
     {48, 3, 0, PROTOBUF_FIELD_OFFSET(GameConfig_ZoneRedisConfig, _impl_.db_)}},
    // string host = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameConfig_ZoneRedisConfig, _impl_.host_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string host = 3;
    {PROTOBUF_FIELD_OFFSET(GameConfig_ZoneRedisConfig, _impl_.host_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 port = 4;
    {PROTOBUF_FIELD_OFFSET(GameConfig_ZoneRedisConfig, _impl_.port_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // string password = 5;
    {PROTOBUF_FIELD_OFFSET(GameConfig_ZoneRedisConfig, _impl_.password_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 db = 6;
    {PROTOBUF_FIELD_OFFSET(GameConfig_ZoneRedisConfig, _impl_.db_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\32\4\0\10\0\0\0\0"
    "GameConfig.ZoneRedisConfig"
    "host"
    "password"
  }},
};
PROTOBUF_NOINLINE void GameConfig_ZoneRedisConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:GameConfig.ZoneRedisConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.host_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.password_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000000cu) != 0) {
    ::memset(&_impl_.port_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.db_) -
        reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.db_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL GameConfig_ZoneRedisConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const GameConfig_ZoneRedisConfig& this_ = static_cast<const GameConfig_ZoneRedisConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL GameConfig_ZoneRedisConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const GameConfig_ZoneRedisConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:GameConfig.ZoneRedisConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string host = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_host().empty()) {
      const ::std::string& _s = this_._internal_host();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "GameConfig.ZoneRedisConfig.host");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // uint32 port = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_port() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          4, this_._internal_port(), target);
    }
  }

  // string password = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_password().empty()) {
      const ::std::string& _s = this_._internal_password();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "GameConfig.ZoneRedisConfig.password");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  // uint32 db = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_db() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          6, this_._internal_db(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameConfig.ZoneRedisConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t GameConfig_ZoneRedisConfig::ByteSizeLong(const MessageLite& base) {
  const GameConfig_ZoneRedisConfig& this_ = static_cast<const GameConfig_ZoneRedisConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t GameConfig_ZoneRedisConfig::ByteSizeLong() const {
  const GameConfig_ZoneRedisConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:GameConfig.ZoneRedisConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // string host = 3;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_host().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_host());
      }
    }
    // string password = 5;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_password().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_password());
      }
    }
    // uint32 port = 4;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_port() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_port());
      }
    }
    // uint32 db = 6;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_db() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_db());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void GameConfig_ZoneRedisConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameConfig_ZoneRedisConfig*>(&to_msg);
  auto& from = static_cast<const GameConfig_ZoneRedisConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameConfig.ZoneRedisConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_host().empty()) {
        _this->_internal_set_host(from._internal_host());
      } else {
        if (_this->_impl_.host_.IsDefault()) {
          _this->_internal_set_host("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_password().empty()) {
        _this->_internal_set_password(from._internal_password());
      } else {
        if (_this->_impl_.password_.IsDefault()) {
          _this->_internal_set_password("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_port() != 0) {
        _this->_impl_.port_ = from._impl_.port_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_db() != 0) {
        _this->_impl_.db_ = from._impl_.db_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameConfig_ZoneRedisConfig::CopyFrom(const GameConfig_ZoneRedisConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameConfig.ZoneRedisConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GameConfig_ZoneRedisConfig::InternalSwap(GameConfig_ZoneRedisConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.host_, &other->_impl_.host_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.password_, &other->_impl_.password_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameConfig_ZoneRedisConfig, _impl_.db_)
      + sizeof(GameConfig_ZoneRedisConfig::_impl_.db_)
      - PROTOBUF_FIELD_OFFSET(GameConfig_ZoneRedisConfig, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::google::protobuf::Metadata GameConfig_ZoneRedisConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameConfig::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<GameConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameConfig, _impl_._has_bits_);
};

GameConfig::GameConfig(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, GameConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GameConfig)
}
PROTOBUF_NDEBUG_INLINE GameConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::GameConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameConfig::GameConfig(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const GameConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, GameConfig_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.zone_redis_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.zone_redis_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, scene_node_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, scene_node_type_),
           offsetof(Impl_, zone_id_) -
               offsetof(Impl_, scene_node_type_) +
               sizeof(Impl_::zone_id_));

  // @@protoc_insertion_point(copy_constructor:GameConfig)
}
PROTOBUF_NDEBUG_INLINE GameConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void GameConfig::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, zone_redis_),
           0,
           offsetof(Impl_, zone_id_) -
               offsetof(Impl_, zone_redis_) +
               sizeof(Impl_::zone_id_));
}
GameConfig::~GameConfig() {
  // @@protoc_insertion_point(destructor:GameConfig)
  SharedDtor(*this);
}
inline void GameConfig::SharedDtor(MessageLite& self) {
  GameConfig& this_ = static_cast<GameConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.zone_redis_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL GameConfig::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) GameConfig(arena);
}
constexpr auto GameConfig::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GameConfig),
                                            alignof(GameConfig));
}
constexpr auto GameConfig::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_GameConfig_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &GameConfig::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<GameConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &GameConfig::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<GameConfig>(), &GameConfig::ByteSizeLong,
              &GameConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(GameConfig, _impl_._cached_size_),
          false,
      },
      &GameConfig::kDescriptorMethods,
      &descriptor_table_proto_2fcommon_2fconfig_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull GameConfig_class_data_ =
        GameConfig::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
GameConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&GameConfig_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(GameConfig_class_data_.tc_table);
  return GameConfig_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2>
GameConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameConfig, _impl_._has_bits_),
    0, // no _extensions_
    7, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967228,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    GameConfig_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::GameConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 scene_node_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameConfig, _impl_.scene_node_type_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(GameConfig, _impl_.scene_node_type_)}},
    // uint32 zone_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameConfig, _impl_.zone_id_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(GameConfig, _impl_.zone_id_)}},
    // .GameConfig.ZoneRedisConfig zone_redis = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(GameConfig, _impl_.zone_redis_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 scene_node_type = 1;
    {PROTOBUF_FIELD_OFFSET(GameConfig, _impl_.scene_node_type_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // uint32 zone_id = 2;
    {PROTOBUF_FIELD_OFFSET(GameConfig, _impl_.zone_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // .GameConfig.ZoneRedisConfig zone_redis = 7;
    {PROTOBUF_FIELD_OFFSET(GameConfig, _impl_.zone_redis_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::GameConfig_ZoneRedisConfig>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void GameConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:GameConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.zone_redis_ != nullptr);
    _impl_.zone_redis_->Clear();
  }
  if ((cached_has_bits & 0x00000006u) != 0) {
    ::memset(&_impl_.scene_node_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.zone_id_) -
        reinterpret_cast<char*>(&_impl_.scene_node_type_)) + sizeof(_impl_.zone_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL GameConfig::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const GameConfig& this_ = static_cast<const GameConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL GameConfig::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const GameConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:GameConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 scene_node_type = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_scene_node_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          1, this_._internal_scene_node_type(), target);
    }
  }

  // uint32 zone_id = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_zone_id() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this_._internal_zone_id(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .GameConfig.ZoneRedisConfig zone_redis = 7;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.zone_redis_, this_._impl_.zone_redis_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameConfig)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t GameConfig::ByteSizeLong(const MessageLite& base) {
  const GameConfig& this_ = static_cast<const GameConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t GameConfig::ByteSizeLong() const {
  const GameConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:GameConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .GameConfig.ZoneRedisConfig zone_redis = 7;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.zone_redis_);
    }
    // uint32 scene_node_type = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_scene_node_type() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_scene_node_type());
      }
    }
    // uint32 zone_id = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_zone_id() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
            this_._internal_zone_id());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void GameConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameConfig*>(&to_msg);
  auto& from = static_cast<const GameConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:GameConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.zone_redis_ != nullptr);
      if (_this->_impl_.zone_redis_ == nullptr) {
        _this->_impl_.zone_redis_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.zone_redis_);
      } else {
        _this->_impl_.zone_redis_->MergeFrom(*from._impl_.zone_redis_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_scene_node_type() != 0) {
        _this->_impl_.scene_node_type_ = from._impl_.scene_node_type_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_zone_id() != 0) {
        _this->_impl_.zone_id_ = from._impl_.zone_id_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameConfig::CopyFrom(const GameConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GameConfig::InternalSwap(GameConfig* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameConfig, _impl_.zone_id_)
      + sizeof(GameConfig::_impl_.zone_id_)
      - PROTOBUF_FIELD_OFFSET(GameConfig, _impl_.zone_redis_)>(
          reinterpret_cast<char*>(&_impl_.zone_redis_),
          reinterpret_cast<char*>(&other->_impl_.zone_redis_));
}

::google::protobuf::Metadata GameConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_proto_2fcommon_2fconfig_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
