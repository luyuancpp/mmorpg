// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: testmultikey_table.proto
// Protobuf C++ Version: 6.31.1

#ifndef testmultikey_5ftable_2eproto_2epb_2eh
#define testmultikey_5ftable_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6031001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_type_handler.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_testmultikey_5ftable_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_testmultikey_5ftable_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_testmultikey_5ftable_2eproto;
}  // extern "C"
class TestMultiKeyTable;
struct TestMultiKeyTableDefaultTypeInternal;
extern TestMultiKeyTableDefaultTypeInternal _TestMultiKeyTable_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TestMultiKeyTable_class_data_;
class TestMultiKeyTableData;
struct TestMultiKeyTableDataDefaultTypeInternal;
extern TestMultiKeyTableDataDefaultTypeInternal _TestMultiKeyTableData_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TestMultiKeyTableData_class_data_;
class TestMultiKeyTable_Immunetag1Entry_DoNotUse;
struct TestMultiKeyTable_Immunetag1Entry_DoNotUseDefaultTypeInternal;
extern TestMultiKeyTable_Immunetag1Entry_DoNotUseDefaultTypeInternal _TestMultiKeyTable_Immunetag1Entry_DoNotUse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TestMultiKeyTable_Immunetag1Entry_DoNotUse_class_data_;
class TestMultiKeyTable_Tag1Entry_DoNotUse;
struct TestMultiKeyTable_Tag1Entry_DoNotUseDefaultTypeInternal;
extern TestMultiKeyTable_Tag1Entry_DoNotUseDefaultTypeInternal _TestMultiKeyTable_Tag1Entry_DoNotUse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TestMultiKeyTable_Tag1Entry_DoNotUse_class_data_;
class TestMultiKeyimmunetag1;
struct TestMultiKeyimmunetag1DefaultTypeInternal;
extern TestMultiKeyimmunetag1DefaultTypeInternal _TestMultiKeyimmunetag1_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TestMultiKeyimmunetag1_class_data_;
class TestMultiKeytag1;
struct TestMultiKeytag1DefaultTypeInternal;
extern TestMultiKeytag1DefaultTypeInternal _TestMultiKeytag1_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TestMultiKeytag1_class_data_;
class TestMultiKeytestobj1;
struct TestMultiKeytestobj1DefaultTypeInternal;
extern TestMultiKeytestobj1DefaultTypeInternal _TestMultiKeytestobj1_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull TestMultiKeytestobj1_class_data_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class TestMultiKeytestobj1 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TestMultiKeytestobj1) */ {
 public:
  inline TestMultiKeytestobj1() : TestMultiKeytestobj1(nullptr) {}
  ~TestMultiKeytestobj1() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TestMultiKeytestobj1* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TestMultiKeytestobj1));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestMultiKeytestobj1(::google::protobuf::internal::ConstantInitialized);

  inline TestMultiKeytestobj1(const TestMultiKeytestobj1& from) : TestMultiKeytestobj1(nullptr, from) {}
  inline TestMultiKeytestobj1(TestMultiKeytestobj1&& from) noexcept
      : TestMultiKeytestobj1(nullptr, ::std::move(from)) {}
  inline TestMultiKeytestobj1& operator=(const TestMultiKeytestobj1& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMultiKeytestobj1& operator=(TestMultiKeytestobj1&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMultiKeytestobj1& default_instance() {
    return *reinterpret_cast<const TestMultiKeytestobj1*>(
        &_TestMultiKeytestobj1_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(TestMultiKeytestobj1& a, TestMultiKeytestobj1& b) { a.Swap(&b); }
  inline void Swap(TestMultiKeytestobj1* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMultiKeytestobj1* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMultiKeytestobj1* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TestMultiKeytestobj1>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestMultiKeytestobj1& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestMultiKeytestobj1& from) { TestMultiKeytestobj1::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TestMultiKeytestobj1* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "TestMultiKeytestobj1"; }

 protected:
  explicit TestMultiKeytestobj1(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TestMultiKeytestobj1(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TestMultiKeytestobj1& from);
  TestMultiKeytestobj1(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TestMultiKeytestobj1&& from) noexcept
      : TestMultiKeytestobj1(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTestobj1KeyFieldNumber = 1,
    kTestobj1ValueFieldNumber = 2,
  };
  // uint32 testobj1_key = 1;
  void clear_testobj1_key() ;
  ::uint32_t testobj1_key() const;
  void set_testobj1_key(::uint32_t value);

  private:
  ::uint32_t _internal_testobj1_key() const;
  void _internal_set_testobj1_key(::uint32_t value);

  public:
  // uint32 testobj1_value = 2;
  void clear_testobj1_value() ;
  ::uint32_t testobj1_value() const;
  void set_testobj1_value(::uint32_t value);

  private:
  ::uint32_t _internal_testobj1_value() const;
  void _internal_set_testobj1_value(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TestMultiKeytestobj1)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TestMultiKeytestobj1& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t testobj1_key_;
    ::uint32_t testobj1_value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_testmultikey_5ftable_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TestMultiKeytestobj1_class_data_;
// -------------------------------------------------------------------

class TestMultiKeytag1 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TestMultiKeytag1) */ {
 public:
  inline TestMultiKeytag1() : TestMultiKeytag1(nullptr) {}
  ~TestMultiKeytag1() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TestMultiKeytag1* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TestMultiKeytag1));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestMultiKeytag1(::google::protobuf::internal::ConstantInitialized);

  inline TestMultiKeytag1(const TestMultiKeytag1& from) : TestMultiKeytag1(nullptr, from) {}
  inline TestMultiKeytag1(TestMultiKeytag1&& from) noexcept
      : TestMultiKeytag1(nullptr, ::std::move(from)) {}
  inline TestMultiKeytag1& operator=(const TestMultiKeytag1& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMultiKeytag1& operator=(TestMultiKeytag1&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMultiKeytag1& default_instance() {
    return *reinterpret_cast<const TestMultiKeytag1*>(
        &_TestMultiKeytag1_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(TestMultiKeytag1& a, TestMultiKeytag1& b) { a.Swap(&b); }
  inline void Swap(TestMultiKeytag1* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMultiKeytag1* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMultiKeytag1* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TestMultiKeytag1>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestMultiKeytag1& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestMultiKeytag1& from) { TestMultiKeytag1::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TestMultiKeytag1* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "TestMultiKeytag1"; }

 protected:
  explicit TestMultiKeytag1(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TestMultiKeytag1(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TestMultiKeytag1& from);
  TestMultiKeytag1(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TestMultiKeytag1&& from) noexcept
      : TestMultiKeytag1(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTag1KeyFieldNumber = 1,
    kTag1ValueFieldNumber = 2,
  };
  // string tag1_key = 1;
  void clear_tag1_key() ;
  const ::std::string& tag1_key() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_tag1_key(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_tag1_key();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_tag1_key();
  void set_allocated_tag1_key(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_tag1_key() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_tag1_key(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_tag1_key();

  public:
  // string tag1_value = 2;
  void clear_tag1_value() ;
  const ::std::string& tag1_value() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_tag1_value(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_tag1_value();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_tag1_value();
  void set_allocated_tag1_value(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_tag1_value() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_tag1_value(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_tag1_value();

  public:
  // @@protoc_insertion_point(class_scope:TestMultiKeytag1)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 43,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TestMultiKeytag1& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr tag1_key_;
    ::google::protobuf::internal::ArenaStringPtr tag1_value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_testmultikey_5ftable_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TestMultiKeytag1_class_data_;
// -------------------------------------------------------------------

class TestMultiKeyimmunetag1 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TestMultiKeyimmunetag1) */ {
 public:
  inline TestMultiKeyimmunetag1() : TestMultiKeyimmunetag1(nullptr) {}
  ~TestMultiKeyimmunetag1() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TestMultiKeyimmunetag1* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TestMultiKeyimmunetag1));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestMultiKeyimmunetag1(::google::protobuf::internal::ConstantInitialized);

  inline TestMultiKeyimmunetag1(const TestMultiKeyimmunetag1& from) : TestMultiKeyimmunetag1(nullptr, from) {}
  inline TestMultiKeyimmunetag1(TestMultiKeyimmunetag1&& from) noexcept
      : TestMultiKeyimmunetag1(nullptr, ::std::move(from)) {}
  inline TestMultiKeyimmunetag1& operator=(const TestMultiKeyimmunetag1& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMultiKeyimmunetag1& operator=(TestMultiKeyimmunetag1&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMultiKeyimmunetag1& default_instance() {
    return *reinterpret_cast<const TestMultiKeyimmunetag1*>(
        &_TestMultiKeyimmunetag1_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(TestMultiKeyimmunetag1& a, TestMultiKeyimmunetag1& b) { a.Swap(&b); }
  inline void Swap(TestMultiKeyimmunetag1* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMultiKeyimmunetag1* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMultiKeyimmunetag1* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TestMultiKeyimmunetag1>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestMultiKeyimmunetag1& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestMultiKeyimmunetag1& from) { TestMultiKeyimmunetag1::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TestMultiKeyimmunetag1* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "TestMultiKeyimmunetag1"; }

 protected:
  explicit TestMultiKeyimmunetag1(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TestMultiKeyimmunetag1(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TestMultiKeyimmunetag1& from);
  TestMultiKeyimmunetag1(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TestMultiKeyimmunetag1&& from) noexcept
      : TestMultiKeyimmunetag1(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kImmunetag1KeyFieldNumber = 1,
    kImmunetag1ValueFieldNumber = 2,
  };
  // string immunetag1_key = 1;
  void clear_immunetag1_key() ;
  const ::std::string& immunetag1_key() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_immunetag1_key(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_immunetag1_key();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_immunetag1_key();
  void set_allocated_immunetag1_key(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_immunetag1_key() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_immunetag1_key(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_immunetag1_key();

  public:
  // string immunetag1_value = 2;
  void clear_immunetag1_value() ;
  const ::std::string& immunetag1_value() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_immunetag1_value(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_immunetag1_value();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_immunetag1_value();
  void set_allocated_immunetag1_value(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_immunetag1_value() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_immunetag1_value(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_immunetag1_value();

  public:
  // @@protoc_insertion_point(class_scope:TestMultiKeyimmunetag1)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 61,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TestMultiKeyimmunetag1& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr immunetag1_key_;
    ::google::protobuf::internal::ArenaStringPtr immunetag1_value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_testmultikey_5ftable_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TestMultiKeyimmunetag1_class_data_;
// -------------------------------------------------------------------

class TestMultiKeyTable_Tag1Entry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<std::string, std::string,
                             ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                             ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType =
      ::google::protobuf::internal::MapEntry<std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  TestMultiKeyTable_Tag1Entry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestMultiKeyTable_Tag1Entry_DoNotUse(::google::protobuf::internal::ConstantInitialized);
  explicit TestMultiKeyTable_Tag1Entry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr const void* PROTOBUF_NONNULL internal_default_instance() {
    return &_TestMultiKeyTable_Tag1Entry_DoNotUse_default_instance_;
  }


  static constexpr auto InternalGenerateClassData_();

 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_testmultikey_5ftable_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 44,
                                   2>
      _table_;

  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();
};
extern const ::google::protobuf::internal::ClassDataFull TestMultiKeyTable_Tag1Entry_DoNotUse_class_data_;
// -------------------------------------------------------------------

class TestMultiKeyTable_Immunetag1Entry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<std::string, std::string,
                             ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                             ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType =
      ::google::protobuf::internal::MapEntry<std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  TestMultiKeyTable_Immunetag1Entry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestMultiKeyTable_Immunetag1Entry_DoNotUse(::google::protobuf::internal::ConstantInitialized);
  explicit TestMultiKeyTable_Immunetag1Entry_DoNotUse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr const void* PROTOBUF_NONNULL internal_default_instance() {
    return &_TestMultiKeyTable_Immunetag1Entry_DoNotUse_default_instance_;
  }


  static constexpr auto InternalGenerateClassData_();

 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_testmultikey_5ftable_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   0, 50,
                                   2>
      _table_;

  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();
};
extern const ::google::protobuf::internal::ClassDataFull TestMultiKeyTable_Immunetag1Entry_DoNotUse_class_data_;
// -------------------------------------------------------------------

class TestMultiKeyTable final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TestMultiKeyTable) */ {
 public:
  inline TestMultiKeyTable() : TestMultiKeyTable(nullptr) {}
  ~TestMultiKeyTable() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TestMultiKeyTable* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TestMultiKeyTable));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestMultiKeyTable(::google::protobuf::internal::ConstantInitialized);

  inline TestMultiKeyTable(const TestMultiKeyTable& from) : TestMultiKeyTable(nullptr, from) {}
  inline TestMultiKeyTable(TestMultiKeyTable&& from) noexcept
      : TestMultiKeyTable(nullptr, ::std::move(from)) {}
  inline TestMultiKeyTable& operator=(const TestMultiKeyTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMultiKeyTable& operator=(TestMultiKeyTable&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMultiKeyTable& default_instance() {
    return *reinterpret_cast<const TestMultiKeyTable*>(
        &_TestMultiKeyTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(TestMultiKeyTable& a, TestMultiKeyTable& b) { a.Swap(&b); }
  inline void Swap(TestMultiKeyTable* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMultiKeyTable* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMultiKeyTable* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TestMultiKeyTable>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestMultiKeyTable& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestMultiKeyTable& from) { TestMultiKeyTable::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TestMultiKeyTable* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "TestMultiKeyTable"; }

 protected:
  explicit TestMultiKeyTable(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TestMultiKeyTable(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TestMultiKeyTable& from);
  TestMultiKeyTable(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TestMultiKeyTable&& from) noexcept
      : TestMultiKeyTable(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTag1FieldNumber = 2,
    kImmunetag1FieldNumber = 3,
    kTestobj1FieldNumber = 5,
    kEffectFieldNumber = 6,
    kStringkeyFieldNumber = 7,
    kMstringkeyFieldNumber = 10,
    kIdFieldNumber = 1,
    kLevelFieldNumber = 4,
    kUint32KeyFieldNumber = 8,
    kIn32KeyFieldNumber = 9,
    kMuint32KeyFieldNumber = 11,
    kMin32KeyFieldNumber = 12,
  };
  // map<string, string> tag1 = 2;
  int tag1_size() const;
  private:
  int _internal_tag1_size() const;

  public:
  void clear_tag1() ;
  const ::google::protobuf::Map<std::string, std::string>& tag1() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL mutable_tag1();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_tag1() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL _internal_mutable_tag1();

  public:
  // map<string, string> immunetag1 = 3;
  int immunetag1_size() const;
  private:
  int _internal_immunetag1_size() const;

  public:
  void clear_immunetag1() ;
  const ::google::protobuf::Map<std::string, std::string>& immunetag1() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL mutable_immunetag1();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_immunetag1() const;
  ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL _internal_mutable_immunetag1();

  public:
  // repeated .TestMultiKeytestobj1 testobj1 = 5;
  int testobj1_size() const;
  private:
  int _internal_testobj1_size() const;

  public:
  void clear_testobj1() ;
  ::TestMultiKeytestobj1* PROTOBUF_NONNULL mutable_testobj1(int index);
  ::google::protobuf::RepeatedPtrField<::TestMultiKeytestobj1>* PROTOBUF_NONNULL mutable_testobj1();

  private:
  const ::google::protobuf::RepeatedPtrField<::TestMultiKeytestobj1>& _internal_testobj1() const;
  ::google::protobuf::RepeatedPtrField<::TestMultiKeytestobj1>* PROTOBUF_NONNULL _internal_mutable_testobj1();
  public:
  const ::TestMultiKeytestobj1& testobj1(int index) const;
  ::TestMultiKeytestobj1* PROTOBUF_NONNULL add_testobj1();
  const ::google::protobuf::RepeatedPtrField<::TestMultiKeytestobj1>& testobj1() const;
  // repeated uint32 effect = 6;
  int effect_size() const;
  private:
  int _internal_effect_size() const;

  public:
  void clear_effect() ;
  ::uint32_t effect(int index) const;
  void set_effect(int index, ::uint32_t value);
  void add_effect(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& effect() const;
  ::google::protobuf::RepeatedField<::uint32_t>* PROTOBUF_NONNULL mutable_effect();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_effect() const;
  ::google::protobuf::RepeatedField<::uint32_t>* PROTOBUF_NONNULL _internal_mutable_effect();

  public:
  // string stringkey = 7;
  void clear_stringkey() ;
  const ::std::string& stringkey() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_stringkey(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_stringkey();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_stringkey();
  void set_allocated_stringkey(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_stringkey() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_stringkey(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_stringkey();

  public:
  // string mstringkey = 10;
  void clear_mstringkey() ;
  const ::std::string& mstringkey() const;
  template <typename Arg_ = const ::std::string&, typename... Args_>
  void set_mstringkey(Arg_&& arg, Args_... args);
  ::std::string* PROTOBUF_NONNULL mutable_mstringkey();
  [[nodiscard]] ::std::string* PROTOBUF_NULLABLE release_mstringkey();
  void set_allocated_mstringkey(::std::string* PROTOBUF_NULLABLE value);

  private:
  const ::std::string& _internal_mstringkey() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_mstringkey(const ::std::string& value);
  ::std::string* PROTOBUF_NONNULL _internal_mutable_mstringkey();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // uint32 level = 4;
  void clear_level() ;
  ::uint32_t level() const;
  void set_level(::uint32_t value);

  private:
  ::uint32_t _internal_level() const;
  void _internal_set_level(::uint32_t value);

  public:
  // uint32 uint32key = 8;
  void clear_uint32key() ;
  ::uint32_t uint32key() const;
  void set_uint32key(::uint32_t value);

  private:
  ::uint32_t _internal_uint32key() const;
  void _internal_set_uint32key(::uint32_t value);

  public:
  // int32 in32key = 9;
  void clear_in32key() ;
  ::int32_t in32key() const;
  void set_in32key(::int32_t value);

  private:
  ::int32_t _internal_in32key() const;
  void _internal_set_in32key(::int32_t value);

  public:
  // uint32 muint32key = 11;
  void clear_muint32key() ;
  ::uint32_t muint32key() const;
  void set_muint32key(::uint32_t value);

  private:
  ::uint32_t _internal_muint32key() const;
  void _internal_set_muint32key(::uint32_t value);

  public:
  // int32 min32key = 12;
  void clear_min32key() ;
  ::int32_t min32key() const;
  void set_min32key(::int32_t value);

  private:
  ::int32_t _internal_min32key() const;
  void _internal_set_min32key(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TestMultiKeyTable)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 12,
                                   3, 67,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TestMultiKeyTable& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<TestMultiKeyTable_Tag1Entry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        tag1_;
    ::google::protobuf::internal::MapField<TestMultiKeyTable_Immunetag1Entry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        immunetag1_;
    ::google::protobuf::RepeatedPtrField< ::TestMultiKeytestobj1 > testobj1_;
    ::google::protobuf::RepeatedField<::uint32_t> effect_;
    ::google::protobuf::internal::CachedSize _effect_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr stringkey_;
    ::google::protobuf::internal::ArenaStringPtr mstringkey_;
    ::uint32_t id_;
    ::uint32_t level_;
    ::uint32_t uint32key_;
    ::int32_t in32key_;
    ::uint32_t muint32key_;
    ::int32_t min32key_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_testmultikey_5ftable_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TestMultiKeyTable_class_data_;
// -------------------------------------------------------------------

class TestMultiKeyTableData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TestMultiKeyTableData) */ {
 public:
  inline TestMultiKeyTableData() : TestMultiKeyTableData(nullptr) {}
  ~TestMultiKeyTableData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TestMultiKeyTableData* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TestMultiKeyTableData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestMultiKeyTableData(::google::protobuf::internal::ConstantInitialized);

  inline TestMultiKeyTableData(const TestMultiKeyTableData& from) : TestMultiKeyTableData(nullptr, from) {}
  inline TestMultiKeyTableData(TestMultiKeyTableData&& from) noexcept
      : TestMultiKeyTableData(nullptr, ::std::move(from)) {}
  inline TestMultiKeyTableData& operator=(const TestMultiKeyTableData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMultiKeyTableData& operator=(TestMultiKeyTableData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMultiKeyTableData& default_instance() {
    return *reinterpret_cast<const TestMultiKeyTableData*>(
        &_TestMultiKeyTableData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(TestMultiKeyTableData& a, TestMultiKeyTableData& b) { a.Swap(&b); }
  inline void Swap(TestMultiKeyTableData* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMultiKeyTableData* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMultiKeyTableData* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TestMultiKeyTableData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestMultiKeyTableData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestMultiKeyTableData& from) { TestMultiKeyTableData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TestMultiKeyTableData* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "TestMultiKeyTableData"; }

 protected:
  explicit TestMultiKeyTableData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  TestMultiKeyTableData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TestMultiKeyTableData& from);
  TestMultiKeyTableData(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, TestMultiKeyTableData&& from) noexcept
      : TestMultiKeyTableData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .TestMultiKeyTable data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  ::TestMultiKeyTable* PROTOBUF_NONNULL mutable_data(int index);
  ::google::protobuf::RepeatedPtrField<::TestMultiKeyTable>* PROTOBUF_NONNULL mutable_data();

  private:
  const ::google::protobuf::RepeatedPtrField<::TestMultiKeyTable>& _internal_data() const;
  ::google::protobuf::RepeatedPtrField<::TestMultiKeyTable>* PROTOBUF_NONNULL _internal_mutable_data();
  public:
  const ::TestMultiKeyTable& data(int index) const;
  ::TestMultiKeyTable* PROTOBUF_NONNULL add_data();
  const ::google::protobuf::RepeatedPtrField<::TestMultiKeyTable>& data() const;
  // @@protoc_insertion_point(class_scope:TestMultiKeyTableData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const TestMultiKeyTableData& from_msg);
    ::google::protobuf::RepeatedPtrField< ::TestMultiKeyTable > data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_testmultikey_5ftable_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull TestMultiKeyTableData_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TestMultiKeytag1

// string tag1_key = 1;
inline void TestMultiKeytag1::clear_tag1_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tag1_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& TestMultiKeytag1::tag1_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TestMultiKeytag1.tag1_key)
  return _internal_tag1_key();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TestMultiKeytag1::set_tag1_key(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tag1_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TestMultiKeytag1.tag1_key)
}
inline ::std::string* PROTOBUF_NONNULL TestMultiKeytag1::mutable_tag1_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_tag1_key();
  // @@protoc_insertion_point(field_mutable:TestMultiKeytag1.tag1_key)
  return _s;
}
inline const ::std::string& TestMultiKeytag1::_internal_tag1_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tag1_key_.Get();
}
inline void TestMultiKeytag1::_internal_set_tag1_key(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tag1_key_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL TestMultiKeytag1::_internal_mutable_tag1_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tag1_key_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE TestMultiKeytag1::release_tag1_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TestMultiKeytag1.tag1_key)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.tag1_key_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.tag1_key_.Set("", GetArena());
  }
  return released;
}
inline void TestMultiKeytag1::set_allocated_tag1_key(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tag1_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.tag1_key_.IsDefault()) {
    _impl_.tag1_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:TestMultiKeytag1.tag1_key)
}

// string tag1_value = 2;
inline void TestMultiKeytag1::clear_tag1_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tag1_value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& TestMultiKeytag1::tag1_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TestMultiKeytag1.tag1_value)
  return _internal_tag1_value();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TestMultiKeytag1::set_tag1_value(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tag1_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TestMultiKeytag1.tag1_value)
}
inline ::std::string* PROTOBUF_NONNULL TestMultiKeytag1::mutable_tag1_value()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_tag1_value();
  // @@protoc_insertion_point(field_mutable:TestMultiKeytag1.tag1_value)
  return _s;
}
inline const ::std::string& TestMultiKeytag1::_internal_tag1_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tag1_value_.Get();
}
inline void TestMultiKeytag1::_internal_set_tag1_value(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tag1_value_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL TestMultiKeytag1::_internal_mutable_tag1_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.tag1_value_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE TestMultiKeytag1::release_tag1_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TestMultiKeytag1.tag1_value)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.tag1_value_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.tag1_value_.Set("", GetArena());
  }
  return released;
}
inline void TestMultiKeytag1::set_allocated_tag1_value(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.tag1_value_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.tag1_value_.IsDefault()) {
    _impl_.tag1_value_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:TestMultiKeytag1.tag1_value)
}

// -------------------------------------------------------------------

// TestMultiKeyimmunetag1

// string immunetag1_key = 1;
inline void TestMultiKeyimmunetag1::clear_immunetag1_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.immunetag1_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& TestMultiKeyimmunetag1::immunetag1_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TestMultiKeyimmunetag1.immunetag1_key)
  return _internal_immunetag1_key();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TestMultiKeyimmunetag1::set_immunetag1_key(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.immunetag1_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TestMultiKeyimmunetag1.immunetag1_key)
}
inline ::std::string* PROTOBUF_NONNULL TestMultiKeyimmunetag1::mutable_immunetag1_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_immunetag1_key();
  // @@protoc_insertion_point(field_mutable:TestMultiKeyimmunetag1.immunetag1_key)
  return _s;
}
inline const ::std::string& TestMultiKeyimmunetag1::_internal_immunetag1_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.immunetag1_key_.Get();
}
inline void TestMultiKeyimmunetag1::_internal_set_immunetag1_key(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.immunetag1_key_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL TestMultiKeyimmunetag1::_internal_mutable_immunetag1_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.immunetag1_key_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE TestMultiKeyimmunetag1::release_immunetag1_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TestMultiKeyimmunetag1.immunetag1_key)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.immunetag1_key_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.immunetag1_key_.Set("", GetArena());
  }
  return released;
}
inline void TestMultiKeyimmunetag1::set_allocated_immunetag1_key(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.immunetag1_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.immunetag1_key_.IsDefault()) {
    _impl_.immunetag1_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:TestMultiKeyimmunetag1.immunetag1_key)
}

// string immunetag1_value = 2;
inline void TestMultiKeyimmunetag1::clear_immunetag1_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.immunetag1_value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& TestMultiKeyimmunetag1::immunetag1_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TestMultiKeyimmunetag1.immunetag1_value)
  return _internal_immunetag1_value();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TestMultiKeyimmunetag1::set_immunetag1_value(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.immunetag1_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TestMultiKeyimmunetag1.immunetag1_value)
}
inline ::std::string* PROTOBUF_NONNULL TestMultiKeyimmunetag1::mutable_immunetag1_value()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_immunetag1_value();
  // @@protoc_insertion_point(field_mutable:TestMultiKeyimmunetag1.immunetag1_value)
  return _s;
}
inline const ::std::string& TestMultiKeyimmunetag1::_internal_immunetag1_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.immunetag1_value_.Get();
}
inline void TestMultiKeyimmunetag1::_internal_set_immunetag1_value(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.immunetag1_value_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL TestMultiKeyimmunetag1::_internal_mutable_immunetag1_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.immunetag1_value_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE TestMultiKeyimmunetag1::release_immunetag1_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TestMultiKeyimmunetag1.immunetag1_value)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.immunetag1_value_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.immunetag1_value_.Set("", GetArena());
  }
  return released;
}
inline void TestMultiKeyimmunetag1::set_allocated_immunetag1_value(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.immunetag1_value_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.immunetag1_value_.IsDefault()) {
    _impl_.immunetag1_value_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:TestMultiKeyimmunetag1.immunetag1_value)
}

// -------------------------------------------------------------------

// TestMultiKeytestobj1

// uint32 testobj1_key = 1;
inline void TestMultiKeytestobj1::clear_testobj1_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.testobj1_key_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t TestMultiKeytestobj1::testobj1_key() const {
  // @@protoc_insertion_point(field_get:TestMultiKeytestobj1.testobj1_key)
  return _internal_testobj1_key();
}
inline void TestMultiKeytestobj1::set_testobj1_key(::uint32_t value) {
  _internal_set_testobj1_key(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:TestMultiKeytestobj1.testobj1_key)
}
inline ::uint32_t TestMultiKeytestobj1::_internal_testobj1_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.testobj1_key_;
}
inline void TestMultiKeytestobj1::_internal_set_testobj1_key(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.testobj1_key_ = value;
}

// uint32 testobj1_value = 2;
inline void TestMultiKeytestobj1::clear_testobj1_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.testobj1_value_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t TestMultiKeytestobj1::testobj1_value() const {
  // @@protoc_insertion_point(field_get:TestMultiKeytestobj1.testobj1_value)
  return _internal_testobj1_value();
}
inline void TestMultiKeytestobj1::set_testobj1_value(::uint32_t value) {
  _internal_set_testobj1_value(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:TestMultiKeytestobj1.testobj1_value)
}
inline ::uint32_t TestMultiKeytestobj1::_internal_testobj1_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.testobj1_value_;
}
inline void TestMultiKeytestobj1::_internal_set_testobj1_value(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.testobj1_value_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TestMultiKeyTable

// uint32 id = 1;
inline void TestMultiKeyTable::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t TestMultiKeyTable::id() const {
  // @@protoc_insertion_point(field_get:TestMultiKeyTable.id)
  return _internal_id();
}
inline void TestMultiKeyTable::set_id(::uint32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:TestMultiKeyTable.id)
}
inline ::uint32_t TestMultiKeyTable::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void TestMultiKeyTable::_internal_set_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// map<string, string> tag1 = 2;
inline int TestMultiKeyTable::_internal_tag1_size() const {
  return _internal_tag1().size();
}
inline int TestMultiKeyTable::tag1_size() const {
  return _internal_tag1_size();
}
inline void TestMultiKeyTable::clear_tag1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tag1_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& TestMultiKeyTable::_internal_tag1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tag1_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& TestMultiKeyTable::tag1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:TestMultiKeyTable.tag1)
  return _internal_tag1();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL TestMultiKeyTable::_internal_mutable_tag1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.tag1_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL TestMultiKeyTable::mutable_tag1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:TestMultiKeyTable.tag1)
  return _internal_mutable_tag1();
}

// map<string, string> immunetag1 = 3;
inline int TestMultiKeyTable::_internal_immunetag1_size() const {
  return _internal_immunetag1().size();
}
inline int TestMultiKeyTable::immunetag1_size() const {
  return _internal_immunetag1_size();
}
inline void TestMultiKeyTable::clear_immunetag1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.immunetag1_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& TestMultiKeyTable::_internal_immunetag1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.immunetag1_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& TestMultiKeyTable::immunetag1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:TestMultiKeyTable.immunetag1)
  return _internal_immunetag1();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL TestMultiKeyTable::_internal_mutable_immunetag1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.immunetag1_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* PROTOBUF_NONNULL TestMultiKeyTable::mutable_immunetag1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:TestMultiKeyTable.immunetag1)
  return _internal_mutable_immunetag1();
}

// uint32 level = 4;
inline void TestMultiKeyTable::clear_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t TestMultiKeyTable::level() const {
  // @@protoc_insertion_point(field_get:TestMultiKeyTable.level)
  return _internal_level();
}
inline void TestMultiKeyTable::set_level(::uint32_t value) {
  _internal_set_level(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:TestMultiKeyTable.level)
}
inline ::uint32_t TestMultiKeyTable::_internal_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.level_;
}
inline void TestMultiKeyTable::_internal_set_level(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = value;
}

// repeated .TestMultiKeytestobj1 testobj1 = 5;
inline int TestMultiKeyTable::_internal_testobj1_size() const {
  return _internal_testobj1().size();
}
inline int TestMultiKeyTable::testobj1_size() const {
  return _internal_testobj1_size();
}
inline void TestMultiKeyTable::clear_testobj1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.testobj1_.Clear();
}
inline ::TestMultiKeytestobj1* PROTOBUF_NONNULL TestMultiKeyTable::mutable_testobj1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TestMultiKeyTable.testobj1)
  return _internal_mutable_testobj1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::TestMultiKeytestobj1>* PROTOBUF_NONNULL TestMultiKeyTable::mutable_testobj1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TestMultiKeyTable.testobj1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_testobj1();
}
inline const ::TestMultiKeytestobj1& TestMultiKeyTable::testobj1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TestMultiKeyTable.testobj1)
  return _internal_testobj1().Get(index);
}
inline ::TestMultiKeytestobj1* PROTOBUF_NONNULL TestMultiKeyTable::add_testobj1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::TestMultiKeytestobj1* _add = _internal_mutable_testobj1()->Add();
  // @@protoc_insertion_point(field_add:TestMultiKeyTable.testobj1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::TestMultiKeytestobj1>& TestMultiKeyTable::testobj1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TestMultiKeyTable.testobj1)
  return _internal_testobj1();
}
inline const ::google::protobuf::RepeatedPtrField<::TestMultiKeytestobj1>&
TestMultiKeyTable::_internal_testobj1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.testobj1_;
}
inline ::google::protobuf::RepeatedPtrField<::TestMultiKeytestobj1>* PROTOBUF_NONNULL
TestMultiKeyTable::_internal_mutable_testobj1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.testobj1_;
}

// repeated uint32 effect = 6;
inline int TestMultiKeyTable::_internal_effect_size() const {
  return _internal_effect().size();
}
inline int TestMultiKeyTable::effect_size() const {
  return _internal_effect_size();
}
inline void TestMultiKeyTable::clear_effect() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.effect_.Clear();
}
inline ::uint32_t TestMultiKeyTable::effect(int index) const {
  // @@protoc_insertion_point(field_get:TestMultiKeyTable.effect)
  return _internal_effect().Get(index);
}
inline void TestMultiKeyTable::set_effect(int index, ::uint32_t value) {
  _internal_mutable_effect()->Set(index, value);
  // @@protoc_insertion_point(field_set:TestMultiKeyTable.effect)
}
inline void TestMultiKeyTable::add_effect(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_effect()->Add(value);
  // @@protoc_insertion_point(field_add:TestMultiKeyTable.effect)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& TestMultiKeyTable::effect() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TestMultiKeyTable.effect)
  return _internal_effect();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* PROTOBUF_NONNULL TestMultiKeyTable::mutable_effect()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TestMultiKeyTable.effect)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_effect();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
TestMultiKeyTable::_internal_effect() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.effect_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* PROTOBUF_NONNULL
TestMultiKeyTable::_internal_mutable_effect() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.effect_;
}

// string stringkey = 7;
inline void TestMultiKeyTable::clear_stringkey() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stringkey_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& TestMultiKeyTable::stringkey() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TestMultiKeyTable.stringkey)
  return _internal_stringkey();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TestMultiKeyTable::set_stringkey(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stringkey_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TestMultiKeyTable.stringkey)
}
inline ::std::string* PROTOBUF_NONNULL TestMultiKeyTable::mutable_stringkey()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_stringkey();
  // @@protoc_insertion_point(field_mutable:TestMultiKeyTable.stringkey)
  return _s;
}
inline const ::std::string& TestMultiKeyTable::_internal_stringkey() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stringkey_.Get();
}
inline void TestMultiKeyTable::_internal_set_stringkey(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stringkey_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL TestMultiKeyTable::_internal_mutable_stringkey() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.stringkey_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE TestMultiKeyTable::release_stringkey() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TestMultiKeyTable.stringkey)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.stringkey_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.stringkey_.Set("", GetArena());
  }
  return released;
}
inline void TestMultiKeyTable::set_allocated_stringkey(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.stringkey_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.stringkey_.IsDefault()) {
    _impl_.stringkey_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:TestMultiKeyTable.stringkey)
}

// uint32 uint32key = 8;
inline void TestMultiKeyTable::clear_uint32key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uint32key_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t TestMultiKeyTable::uint32key() const {
  // @@protoc_insertion_point(field_get:TestMultiKeyTable.uint32key)
  return _internal_uint32key();
}
inline void TestMultiKeyTable::set_uint32key(::uint32_t value) {
  _internal_set_uint32key(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:TestMultiKeyTable.uint32key)
}
inline ::uint32_t TestMultiKeyTable::_internal_uint32key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uint32key_;
}
inline void TestMultiKeyTable::_internal_set_uint32key(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uint32key_ = value;
}

// int32 in32key = 9;
inline void TestMultiKeyTable::clear_in32key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.in32key_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t TestMultiKeyTable::in32key() const {
  // @@protoc_insertion_point(field_get:TestMultiKeyTable.in32key)
  return _internal_in32key();
}
inline void TestMultiKeyTable::set_in32key(::int32_t value) {
  _internal_set_in32key(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:TestMultiKeyTable.in32key)
}
inline ::int32_t TestMultiKeyTable::_internal_in32key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.in32key_;
}
inline void TestMultiKeyTable::_internal_set_in32key(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.in32key_ = value;
}

// string mstringkey = 10;
inline void TestMultiKeyTable::clear_mstringkey() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mstringkey_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& TestMultiKeyTable::mstringkey() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TestMultiKeyTable.mstringkey)
  return _internal_mstringkey();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void TestMultiKeyTable::set_mstringkey(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mstringkey_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TestMultiKeyTable.mstringkey)
}
inline ::std::string* PROTOBUF_NONNULL TestMultiKeyTable::mutable_mstringkey()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::std::string* _s = _internal_mutable_mstringkey();
  // @@protoc_insertion_point(field_mutable:TestMultiKeyTable.mstringkey)
  return _s;
}
inline const ::std::string& TestMultiKeyTable::_internal_mstringkey() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mstringkey_.Get();
}
inline void TestMultiKeyTable::_internal_set_mstringkey(const ::std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mstringkey_.Set(value, GetArena());
}
inline ::std::string* PROTOBUF_NONNULL TestMultiKeyTable::_internal_mutable_mstringkey() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.mstringkey_.Mutable( GetArena());
}
inline ::std::string* PROTOBUF_NULLABLE TestMultiKeyTable::release_mstringkey() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TestMultiKeyTable.mstringkey)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.mstringkey_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.mstringkey_.Set("", GetArena());
  }
  return released;
}
inline void TestMultiKeyTable::set_allocated_mstringkey(::std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mstringkey_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.mstringkey_.IsDefault()) {
    _impl_.mstringkey_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:TestMultiKeyTable.mstringkey)
}

// uint32 muint32key = 11;
inline void TestMultiKeyTable::clear_muint32key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.muint32key_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t TestMultiKeyTable::muint32key() const {
  // @@protoc_insertion_point(field_get:TestMultiKeyTable.muint32key)
  return _internal_muint32key();
}
inline void TestMultiKeyTable::set_muint32key(::uint32_t value) {
  _internal_set_muint32key(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:TestMultiKeyTable.muint32key)
}
inline ::uint32_t TestMultiKeyTable::_internal_muint32key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.muint32key_;
}
inline void TestMultiKeyTable::_internal_set_muint32key(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.muint32key_ = value;
}

// int32 min32key = 12;
inline void TestMultiKeyTable::clear_min32key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min32key_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t TestMultiKeyTable::min32key() const {
  // @@protoc_insertion_point(field_get:TestMultiKeyTable.min32key)
  return _internal_min32key();
}
inline void TestMultiKeyTable::set_min32key(::int32_t value) {
  _internal_set_min32key(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:TestMultiKeyTable.min32key)
}
inline ::int32_t TestMultiKeyTable::_internal_min32key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min32key_;
}
inline void TestMultiKeyTable::_internal_set_min32key(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min32key_ = value;
}

// -------------------------------------------------------------------

// TestMultiKeyTableData

// repeated .TestMultiKeyTable data = 1;
inline int TestMultiKeyTableData::_internal_data_size() const {
  return _internal_data().size();
}
inline int TestMultiKeyTableData::data_size() const {
  return _internal_data_size();
}
inline void TestMultiKeyTableData::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline ::TestMultiKeyTable* PROTOBUF_NONNULL TestMultiKeyTableData::mutable_data(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TestMultiKeyTableData.data)
  return _internal_mutable_data()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::TestMultiKeyTable>* PROTOBUF_NONNULL TestMultiKeyTableData::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TestMultiKeyTableData.data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data();
}
inline const ::TestMultiKeyTable& TestMultiKeyTableData::data(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TestMultiKeyTableData.data)
  return _internal_data().Get(index);
}
inline ::TestMultiKeyTable* PROTOBUF_NONNULL TestMultiKeyTableData::add_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::TestMultiKeyTable* _add = _internal_mutable_data()->Add();
  // @@protoc_insertion_point(field_add:TestMultiKeyTableData.data)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::TestMultiKeyTable>& TestMultiKeyTableData::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TestMultiKeyTableData.data)
  return _internal_data();
}
inline const ::google::protobuf::RepeatedPtrField<::TestMultiKeyTable>&
TestMultiKeyTableData::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedPtrField<::TestMultiKeyTable>* PROTOBUF_NONNULL
TestMultiKeyTableData::_internal_mutable_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // testmultikey_5ftable_2eproto_2epb_2eh
