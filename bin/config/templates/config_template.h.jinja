#pragma once
#include <cstdint>
#include <unordered_map>
#include "config_expression/config_expression.h"
#include "muduo/base/Logging.h"
#include "{{ sheetname | lower }}_config.pb.h"

class {{ sheetname }}ConfigurationTable {
public:
    using KeyValueDataType = std::unordered_map{{ container_type }}<uint32_t, const {{ sheetname }}Table*>;

    static {{ sheetname }}ConfigurationTable& Instance() {
        static {{ sheetname }}ConfigurationTable instance;
        return instance;
    }

    const {{ sheetname }}TabledData& All() const { return data_; }
    std::pair<const {{ sheetname }}Table*, uint32_t> GetTable(uint32_t tableId);
    std::pair<const {{ sheetname }}Table*, uint32_t> GetTableWithoutErrorLogging(uint32_t tableId);
    const KeyValueDataType& KeyValueData() const { return kv_data_; }
    void Load();

    {%- for data in datastring if data -%}
        {%- if data[gen_common.COL_OBJ_TABLE_KEY_INDEX] == gen_common.TABLE_KEY_CELL -%}
            {%- set column_map_type = 'unordered_map' if data[gen_common.COL_OBJ_TABLE_MULTI] != gen_common.MULTI_TABLE_KEY_CELL else 'unordered_multimap' -%}
    std::pair<const {{ sheetname }}Table*, uint32_t> GetBy{{ data[gen_common.COL_OBJ_COLUMN_NAME] | title }}({{ get_cpp_type_param_name_with_ref(data[gen_common.COL_OBJ_COLUMN_TYPE]) }} tableId) const;
    const std::{{ column_map_type }}<{{ get_cpp_type_name(data[gen_common.COL_OBJ_COLUMN_TYPE]) }}, const {{ sheetname }}Table*>& Get{{ data[gen_common.COL_OBJ_COLUMN_NAME] | title }}Data() const { return kv_{{ data[gen_common.COL_OBJ_COLUMN_NAME] }}data_; }
        {%- endif -%}
        {%- if data[gen_common.COL_OBJ_TABLE_EXPRESSION_TYPE_INDEX] is not none -%}
    {{ data[gen_common.COL_OBJ_TABLE_EXPRESSION_TYPE_INDEX] }} Get{{ data[gen_common.COL_OBJ_COLUMN_NAME] | title }}(const uint32_t tableId);
    void Set{{ data[gen_common.COL_OBJ_COLUMN_NAME] | title }}Param(const std::vector<{{ data[gen_common.COL_OBJ_TABLE_EXPRESSION_TYPE_INDEX] }}>& paramList);
        {%- endif -%}
    {%- endfor %}
private:
    {{ sheetname }}TabledData data_;
    KeyValueDataType kv_data_;

    {%- for data in datastring if data -%}
        {%- if data[gen_common.COL_OBJ_TABLE_KEY_INDEX] == gen_common.TABLE_KEY_CELL -%}
            {%- set column_map_type = 'unordered_map' if data[gen_common.COL_OBJ_TABLE_MULTI] != gen_common.MULTI_TABLE_KEY_CELL else 'unordered_multimap' -%}
    std::{{ column_map_type }}<{{ get_cpp_type_name(data[gen_common.COL_OBJ_COLUMN_TYPE]) }}, const {{ sheetname }}Table*> kv_{{ data[gen_common.COL_OBJ_COLUMN_NAME] }}data_;
        {%- endif -%}
        {%- if data[gen_common.COL_OBJ_TABLE_EXPRESSION_TYPE_INDEX] is not none -%}
    ExcelExpression<{{ data[gen_common.COL_OBJ_TABLE_EXPRESSION_TYPE_INDEX] }}> expression_{{ data[gen_common.COL_OBJ_COLUMN_NAME] }}_;
        {%- endif -%}
    {%- endfor %}
};

inline const {{ sheetname }}TabledData& Get{{ sheetname }}AllTable() {
    return {{ sheetname }}ConfigurationTable::Instance().All();
}

#define FetchAndValidate{{ sheetname }}Table(tableId) \
    const auto [{{ sheetname | lower }}Table, fetchResult] = {{ sheetname }}ConfigurationTable::Instance().GetTable(tableId); \
    do { if (!( {{ sheetname | lower }}Table )) { LOG_ERROR << "{{ sheetname }} table not found for ID: " << tableId; return fetchResult; } } while(0)

#define FetchAndValidateCustom{{ sheetname }}Table(prefix, tableId) \
    const auto [prefix##{{ sheetname }}Table, prefix##fetchResult] = {{ sheetname }}ConfigurationTable::Instance().GetTable(tableId); \
    do { if (!(prefix##{{ sheetname }}Table)) { LOG_ERROR << "{{ sheetname }} table not found for ID: " << tableId; return prefix##fetchResult; } } while(0)

#define Fetch{{ sheetname }}TableOrReturnCustom(tableId, customReturnValue) \
    const auto [{{ sheetname | lower }}Table, fetchResult] = {{ sheetname }}ConfigurationTable::Instance().GetTable(tableId); \
    do { if (!( {{ sheetname | lower }}Table )) { LOG_ERROR << "{{ sheetname }} table not found for ID: " << tableId; return customReturnValue; } } while(0)

#define Fetch{{ sheetname }}TableOrReturnVoid(tableId) \
    const auto [{{ sheetname | lower }}Table, fetchResult] = {{ sheetname }}ConfigurationTable::Instance().GetTable(tableId); \
    do { if (!( {{ sheetname | lower }}Table )) { LOG_ERROR << "{{ sheetname }} table not found for ID: " << tableId; return; } } while(0)

#define Fetch{{ sheetname }}TableOrContinue(tableId) \
    const auto [{{ sheetname | lower }}Table, fetchResult] = {{ sheetname }}ConfigurationTable::Instance().GetTable(tableId); \
    do { if (!( {{ sheetname | lower }}Table )) { LOG_ERROR << "{{ sheetname }} table not found for ID: " << tableId; continue; } } while(0)

#define Fetch{{ sheetname }}TableOrReturnFalse(tableId) \
    const auto [{{ sheetname | lower }}Table, fetchResult] = {{ sheetname }}ConfigurationTable::Instance().GetTable(tableId); \
    do { if (!( {{ sheetname | lower }}Table )) { LOG_ERROR << "{{ sheetname }} table not found for ID: " << tableId; return false; } } while(0)
