#include "google/protobuf/util/json_util.h"
#include "core/utils/file/file2string.h"
#include "table/proto/tip/common_error_tip.pb.h"
#include "table/code/{{ sheetname | lower }}_table.h"

std::string GetConfigDir();

void {{ sheetname }}TableManager::Load() {
    data_.Clear();

    std::string path = GetConfigDir() + "{{ sheetname | lower }}.json";
    const auto contents = File2String(path);
    if (const auto result = google::protobuf::util::JsonStringToMessage(contents.data(), &data_); !result.ok()) {
        LOG_FATAL << "{{ sheetname }}" << result.message().data();
    }

    for (int32_t i = 0; i < data_.data_size(); ++i) {
        const auto& row_data = data_.data(i);
        kv_data_.emplace(row_data.id(), &row_data);
        {%- for data in datastring %}
            {%- if data and data[generate_common.COL_OBJ_TABLE_KEY_INDEX] == generate_common.TABLE_KEY_CELL %}
        kv_{{ data[generate_common.COL_OBJ_COLUMN_NAME] }}data_.emplace(row_data.{{ data[generate_common.COL_OBJ_COLUMN_NAME] }}(), &row_data);
            {%- endif %}
        {%- endfor %}
    }

    {%- for data in datastring %}
        {%- if data and data[generate_common.COL_OBJ_TABLE_EXPRESSION_PARAM_NAMES_INDEX] is not none %}
            {%- set word_count, word_list = generate_common.count_words_by_comma(data[generate_common.COL_OBJ_TABLE_EXPRESSION_PARAM_NAMES_INDEX]) %}
                {%- if word_count > 0 %}
    expression_{{ data[generate_common.COL_OBJ_COLUMN_NAME] }}_.Init({
          {%- for word in word_list %}
            "{{ word }}"{%- if not loop.last %}, {% endif %}
          {%- endfor %}
    });
                {%- endif %}
        {%- endif %}
    {%- endfor %}
}

std::pair<const {{ sheetname }}Table*, uint32_t> {{ sheetname }}TableManager::GetTable(const uint32_t tableId) {
    const auto it = kv_data_.find(tableId);
    if (it == kv_data_.end()) {
        LOG_ERROR << "{{ sheetname }} table not found for ID: " << tableId;
        return {nullptr, kInvalidTableId };
    }
    return {it->second, kSuccess };
}

std::pair<const {{ sheetname }}Table*, uint32_t> {{ sheetname }}TableManager::GetTableWithoutErrorLogging(const uint32_t tableId) {
    const auto it = kv_data_.find(tableId);
    if (it == kv_data_.end()) {
        return {nullptr, kInvalidTableId };
    }
    return {it->second, kSuccess };
}

{%- for data in datastring %}
    {%- if data and data[generate_common.COL_OBJ_TABLE_KEY_INDEX] == generate_common.TABLE_KEY_CELL %}
std::pair<const {{ sheetname }}Table*, uint32_t> {{ sheetname }}TableManager::GetBy{{ data[generate_common.COL_OBJ_COLUMN_NAME] | title }}({{ get_cpp_type_param_name_with_ref(data[generate_common.COL_OBJ_COLUMN_TYPE]) }} tableId) const {
    const auto it = kv_{{ data[generate_common.COL_OBJ_COLUMN_NAME] }}data_.find(tableId);
    if (it == kv_{{ data[generate_common.COL_OBJ_COLUMN_NAME] }}data_.end()) {
        LOG_ERROR << "{{ sheetname }} table not found for ID: " << tableId;
        return {nullptr, kInvalidTableId };
    }
    return {it->second, kSuccess };
}
    {%- endif %}
{%- endfor %}
