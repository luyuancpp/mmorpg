syntax = "proto3";


option go_package = "pb/game";

import "proto/common/db_base.proto";

message database_node_db
{
  option(OptionTableName)  = "database_node_db";
  option(OptionPrimaryKey) = "id";
  option(OptionAutoIncrementKey) = "id";
  uint32 id = 1;
  string addr = 2;
  uint32 zone_id = 3;
}

message login_node_list_db
{
  repeated login_node_db login_info = 1;
}

message centre_node_list_db
{
  repeated centre_node_db centre_info = 1;
}

message gate_node_list_db
{
  repeated gate_node_db gate_info = 1;
}

message game_node_list_db
{
  repeated game_node_db game_info = 1; 
}

message redis_node_list_db
{
  repeated redis_node_db redis_info = 1; 
}

message nodes_info_data
{
  database_node_db database_info = 1;
  login_node_list_db login_info = 2;
  centre_node_list_db centre_info = 3;
  gate_node_list_db gate_info = 4;
  game_node_list_db game_info = 5; 
  redis_node_list_db redis_info = 6;
}

message login_node_db
{
  option(OptionTableName)  = "login_node_db";
  option(OptionPrimaryKey) = "id";
  option(OptionAutoIncrementKey) = "id";
  uint32 id = 1;
  string addr = 2;
  uint32 zone_id = 3;
}

message centre_node_db
{
  option(OptionTableName)  = "centre_node_db";
  option(OptionPrimaryKey) = "id";
  option(OptionAutoIncrementKey) = "id";
  uint32 id = 1;
  string ip = 2;
  uint32 port = 3;
  uint32 zone_id = 4;
}

message lobby_node_db
{
  option(OptionTableName)  = "lobby_node_db";
  option(OptionPrimaryKey) = "id";
  option(OptionAutoIncrementKey) = "id";
  uint32 id = 1;
  string ip = 2;
  uint32 port = 3;
}

message redis_node_db
{
  option(OptionTableName)  = "redis_node_db";
  option(OptionPrimaryKey) = "id";
  option(OptionAutoIncrementKey) = "id";
  uint32 id = 1;
  string ip = 2;
  uint32 port = 3;
  uint32 zone_id = 4;
}

message game_node_db
{
  option(OptionTableName)  = "game_node_db";
  option(OptionPrimaryKey) = "id";
  option(OptionAutoIncrementKey) = "id";
  uint32 id = 1;
  string ip = 2;
  uint32 port = 3;
  uint32 zone_id = 4;
}

message gate_node_db
{
  option(OptionTableName)  = "gate_node_db";
  option(OptionPrimaryKey) = "id";
  option(OptionAutoIncrementKey) = "id";
  uint32 id = 1;
  string ip = 2;
  uint32 port = 3;
  uint32 zone_id = 4;
}

message NodeInfoRequest
{
  uint32 zone_id = 1;
  uint32 node_type = 2;
}

message NodeInfoResponse
{
  nodes_info_data info = 1;
  uint32 node_id = 2;
}


// 请求分配 ID
message GetIDRequest 
{
  string client_name = 1;
  uint32 node_type = 2; // 服务器类型，例如 "gate" 或 "scene"
}

// 返回的 ID
message GetIDResponse 
{
  uint64 id = 1;  // 分配的唯一 ID
}

// 请求释放 ID
message ReleaseIDRequest 
{
  uint64 id = 1;  // 要释放的 ID
  uint32 node_type = 2;  // 服务器类型
}

// 返回的响应
message ReleaseIDResponse 
{
  bool success = 1;  // 是否成功回收 ID
}

service DeployService 
{
  rpc GetNodeInfo (NodeInfoRequest) returns (NodeInfoResponse);
  rpc GetID (GetIDRequest) returns (GetIDResponse);
  rpc ReleaseID (ReleaseIDRequest) returns (ReleaseIDResponse);
}
