syntax = "proto3";

option go_package = "generated/pb/game";

import "proto/common/empty.proto";
import "proto/common/common.proto";
import "proto/common/message.proto";

option cc_generic_services = true;

message PlayerEnterGameNodeRequest
{
  uint64 player_id = 1;
  uint64 session_id = 2;
  uint32 centre_node_id = 3;
}

message ClientSendMessageToPlayerRequest
{
  MessageContent message_content = 1;
  uint64 session_id = 2;
}

message ClientSendMessageToPlayerResponse
{
  MessageContent message_content = 1;
  uint64 session_id = 2;
}

message SessionDisconnectRequest
{
  uint64 player_id = 1;
}

message GameNodeConnectRequest
{
  NetworkAddress rpc_client = 1;
  uint32 gate_node_id = 2;
}

message RegisterPlayerSessionRequest
{
  uint64 session_id = 1;
  uint64 player_id = 2;
}

message Centre2GsEnterSceneRequest
{
  uint64 player_id = 1;
  uint64 scene_id = 2;
}

message CreateSceneRequest
{
  uint32 config_id = 1;
}

message CreateSceneResponse
{
  RoomInfoPBComponent scene_info = 1;
}

service Scene {
  rpc PlayerEnterGameNode (PlayerEnterGameNodeRequest) returns (Empty);
  rpc SendMessageToPlayer (NodeRouteMessageRequest) returns (NodeRouteMessageResponse);
  rpc ClientSendMessageToPlayer (ClientSendMessageToPlayerRequest) returns (ClientSendMessageToPlayerResponse);
  rpc CentreSendToPlayerViaGameNode (NodeRouteMessageRequest) returns (Empty);
  rpc InvokePlayerService (NodeRouteMessageRequest) returns (NodeRouteMessageResponse);
  rpc RouteNodeStringMsg (RouteMessageRequest) returns (RouteMessageResponse);
  rpc RoutePlayerStringMsg (RoutePlayerMessageRequest) returns (RoutePlayerMessageResponse);
  rpc UpdateSessionDetail (RegisterPlayerSessionRequest) returns (Empty);
  rpc EnterScene (Centre2GsEnterSceneRequest) returns (Empty);
  rpc CreateScene (CreateSceneRequest) returns (CreateSceneResponse);
  rpc NodeHandshake(NodeHandshakeRequest) returns (NodeHandshakeResponse);
}
