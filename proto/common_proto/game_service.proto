syntax = "proto3";
import "google/protobuf/empty.proto";
import "common_proto/common.proto";
import "common_proto/node_common.proto";
option cc_generic_services = true;


message GameNodeEnterGsRequest
{
  uint64 player_id = 1;
  uint64 session_id = 2;
  uint32 controller_node_id = 3;
}

message GameNodeRpcClientRequest
{
  bytes request = 1;
  uint64 session_id = 2;
  uint32 message_id = 3;
  uint64 id = 4;
}

message GameNodeRpcClientResponse
{
  bytes response = 1;
  uint64 session_id = 2;
  uint32 message_id = 3;
  uint64 id = 4;
}

message GameNodeDisconnectRequest
{
  uint64 player_id = 1;
}

message GameNodeConnectRequest
{
  IpPort rpc_client = 1;
  uint32 gate_node_id = 2;
}

message UpdatePlayerSessionRequest
{
  uint64 session_id = 1;
  uint64 player_id = 2;
}

message Ctlr2GsEnterSceneRequest
{
  uint64 player_id = 1;
  uint64 scene_id = 2;
}

service GameService {
  rpc EnterGs (GameNodeEnterGsRequest) returns (google.protobuf.Empty);
  rpc Send2Player (NodeServiceMessageRequest) returns (NodeServiceMessageResponse);
  rpc ClientSend2Player (GameNodeRpcClientRequest) returns (GameNodeRpcClientResponse);
  rpc Disconnect (GameNodeDisconnectRequest) returns (google.protobuf.Empty); 
  rpc GateConnectGs (GameNodeConnectRequest) returns (google.protobuf.Empty); 
  rpc ControllerSend2PlayerViaGs (NodeServiceMessageRequest) returns (google.protobuf.Empty);
  rpc CallPlayer (NodeServiceMessageRequest) returns (NodeServiceMessageResponse);
  rpc RouteNodeStringMsg (RouteMsgStringRequest) returns (RouteMsgStringResponse);
  rpc RoutePlayerStringMsg (RoutePlayerMsgStringRequest) returns (RoutePlayerMsgStringResponse);
  rpc UpdateSession (UpdatePlayerSessionRequest) returns (google.protobuf.Empty);
  rpc EnterScene (Ctlr2GsEnterSceneRequest) returns (google.protobuf.Empty);
}